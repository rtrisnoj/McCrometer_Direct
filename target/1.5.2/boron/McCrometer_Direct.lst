
c:/Users/ryan.trisnojoyo/Documents/Particle/McCrometer_Direct/target/1.5.2/boron/McCrometer_Direct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000068c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da8e0  000da8e0  0000a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da8e8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  2003dc54  000da8ec  0001dc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a98  2003dd58  2003dd58  0002dd58  2**2
                  ALLOC
  7 .module_info_suffix 0000002c  000da9f0  000da9f0  0002a9f0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000daa1c  000daa1c  0002aa1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f1e4c  00000000  00000000  0002aa20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013785  00000000  00000000  0011c86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00020a3e  00000000  00000000  0012fff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e70  00000000  00000000  00150a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005298  00000000  00000000  0015389f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00039034  00000000  00000000  00158b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000305d8  00000000  00000000  00191b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00108cc5  00000000  00000000  001c2143  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e818  00000000  00000000  002cae08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fcc5 	bl	d89bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fce5 	bl	d8a08 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dc54 	.word	0x2003dc54
   d4048:	000da8ec 	.word	0x000da8ec
   d404c:	2003dd58 	.word	0x2003dd58
   d4050:	2003dd58 	.word	0x2003dd58
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fbdb 	bl	d6814 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da8e0 	.word	0x000da8e0
   d4080:	000da8a0 	.word	0x000da8a0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bfa4 	b.w	d4fd0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fff3 	bl	d5074 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bb81 	b.w	d6798 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bc35 	b.w	d5904 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bc3b 	b.w	d5914 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bc39 	b.w	d5914 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
   d40b6:	3004      	adds	r0, #4
   d40b8:	f001 fe62 	bl	d5d80 <_ZN6StringD1Ev>
   d40bc:	4620      	mov	r0, r4
   d40be:	bd10      	pop	{r4, pc}

000d40c0 <_ZN14http_request_tD1Ev>:
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
  uint16_t timeout;
} http_request_t;
   d40c0:	b510      	push	{r4, lr}
   d40c2:	4604      	mov	r4, r0
   d40c4:	303c      	adds	r0, #60	; 0x3c
   d40c6:	f001 fe5b 	bl	d5d80 <_ZN6StringD1Ev>
   d40ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40ce:	f001 fe57 	bl	d5d80 <_ZN6StringD1Ev>
   d40d2:	4620      	mov	r0, r4
   d40d4:	f001 fe54 	bl	d5d80 <_ZN6StringD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}

000d40dc <_ZN10CloudClass8syncTimeEv.isra.9>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d40dc:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40de:	f001 fbe9 	bl	d58b4 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d40e2:	b120      	cbz	r0, d40ee <_ZN10CloudClass8syncTimeEv.isra.9+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d40e4:	2000      	movs	r0, #0
    }
   d40e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d40ea:	f001 bbf3 	b.w	d58d4 <spark_sync_time>
    }
   d40ee:	bd08      	pop	{r3, pc}

000d40f0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d40f0:	2200      	movs	r2, #0
   d40f2:	4611      	mov	r1, r2
   d40f4:	6840      	ldr	r0, [r0, #4]
   d40f6:	f001 bb8d 	b.w	d5814 <network_ready>
	...

000d40fc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40fc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fe:	6984      	ldr	r4, [r0, #24]
   d4100:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZN9TCPClientD1Ev+0x30>)
   d4102:	6003      	str	r3, [r0, #0]
   d4104:	4605      	mov	r5, r0
   d4106:	b17c      	cbz	r4, d4128 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4108:	6863      	ldr	r3, [r4, #4]
   d410a:	3b01      	subs	r3, #1
   d410c:	6063      	str	r3, [r4, #4]
   d410e:	b95b      	cbnz	r3, d4128 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4110:	6823      	ldr	r3, [r4, #0]
   d4112:	4620      	mov	r0, r4
   d4114:	689b      	ldr	r3, [r3, #8]
   d4116:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4118:	68a3      	ldr	r3, [r4, #8]
   d411a:	3b01      	subs	r3, #1
   d411c:	60a3      	str	r3, [r4, #8]
   d411e:	b91b      	cbnz	r3, d4128 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4120:	6823      	ldr	r3, [r4, #0]
   d4122:	4620      	mov	r0, r4
   d4124:	68db      	ldr	r3, [r3, #12]
   d4126:	4798      	blx	r3
   d4128:	4628      	mov	r0, r5
   d412a:	bd38      	pop	{r3, r4, r5, pc}
   d412c:	000da32c 	.word	0x000da32c

000d4130 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d4130:	b510      	push	{r4, lr}
   d4132:	4604      	mov	r4, r0
   d4134:	f7ff ffe2 	bl	d40fc <_ZN9TCPClientD1Ev>
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <_ZN9TCPClientD0Ev>:
   d413c:	b510      	push	{r4, lr}
   d413e:	4604      	mov	r4, r0
   d4140:	f7ff ffdc 	bl	d40fc <_ZN9TCPClientD1Ev>
   d4144:	4620      	mov	r0, r4
   d4146:	211c      	movs	r1, #28
   d4148:	f003 fb5c 	bl	d7804 <_ZdlPvj>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}

000d4150 <_Z15getSendIntervalv>:
float floatDelay = 20;     
int rebootInterval = 7;

void sendSerialDebug(String message);
int getPowerUp() { return powerUp;}             
int getSendInterval() {return sendInterval;}       
   d4150:	4b01      	ldr	r3, [pc, #4]	; (d4158 <_Z15getSendIntervalv+0x8>)
   d4152:	6818      	ldr	r0, [r3, #0]
   d4154:	4770      	bx	lr
   d4156:	bf00      	nop
   d4158:	2003dc8c 	.word	0x2003dc8c

000d415c <_Z14getLogIntervalv>:
int getLogInterval() {return logInterval;}        
   d415c:	4b01      	ldr	r3, [pc, #4]	; (d4164 <_Z14getLogIntervalv+0x8>)
   d415e:	6818      	ldr	r0, [r3, #0]
   d4160:	4770      	bx	lr
   d4162:	bf00      	nop
   d4164:	2003dc80 	.word	0x2003dc80

000d4168 <_Z17getStatusIntervalv>:
int getStatusInterval() {return statusInterval;}  
   d4168:	4b01      	ldr	r3, [pc, #4]	; (d4170 <_Z17getStatusIntervalv+0x8>)
   d416a:	6818      	ldr	r0, [r3, #0]
   d416c:	4770      	bx	lr
   d416e:	bf00      	nop
   d4170:	2003dc90 	.word	0x2003dc90

000d4174 <_Z17getRebootIntervalv>:
int getTimeout() {return timeout;}  
int getFloatDelay() {return floatDelay;}
int getRebootInterval() {return rebootInterval;}
   d4174:	4b01      	ldr	r3, [pc, #4]	; (d417c <_Z17getRebootIntervalv+0x8>)
   d4176:	6818      	ldr	r0, [r3, #0]
   d4178:	4770      	bx	lr
   d417a:	bf00      	nop
   d417c:	2003dc88 	.word	0x2003dc88

000d4180 <_Z14initConnectionv>:
String hostname = "ws.uscubed.com";
int hostport = 80;
String hostpath = "/ParticleDirect.aspx";

bool initConnection()
{
   d4180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (Cellular.ready())
   d4184:	4d2b      	ldr	r5, [pc, #172]	; (d4234 <_Z14initConnectionv+0xb4>)
   d4186:	4628      	mov	r0, r5
   d4188:	f7ff ffb2 	bl	d40f0 <_ZN5spark13CellularClass5readyEv>
   d418c:	4604      	mov	r4, r0
   d418e:	2800      	cmp	r0, #0
   d4190:	d14c      	bne.n	d422c <_Z14initConnectionv+0xac>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4192:	4603      	mov	r3, r0
   d4194:	4602      	mov	r2, r0
   d4196:	4601      	mov	r1, r0
   d4198:	6868      	ldr	r0, [r5, #4]
   d419a:	f001 fb43 	bl	d5824 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d419e:	6868      	ldr	r0, [r5, #4]
    return true;
  bool retVal = false;
  Cellular.on();
  Cellular.connect();
  waitFor(Cellular.ready,timeout);
   d41a0:	4d25      	ldr	r5, [pc, #148]	; (d4238 <_Z14initConnectionv+0xb8>)
   d41a2:	4623      	mov	r3, r4
   d41a4:	4622      	mov	r2, r4
   d41a6:	4621      	mov	r1, r4
   d41a8:	f001 fb1c 	bl	d57e4 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41ac:	4620      	mov	r0, r4
   d41ae:	682e      	ldr	r6, [r5, #0]
   d41b0:	f001 f972 	bl	d5498 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41b4:	f04f 0900 	mov.w	r9, #0
   d41b8:	4680      	mov	r8, r0
   d41ba:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41bc:	2000      	movs	r0, #0
   d41be:	f001 f96b 	bl	d5498 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41c2:	ebb0 0008 	subs.w	r0, r0, r8
   d41c6:	eb61 0109 	sbc.w	r1, r1, r9
   d41ca:	42b9      	cmp	r1, r7
   d41cc:	bf08      	it	eq
   d41ce:	42b0      	cmpeq	r0, r6
   d41d0:	d206      	bcs.n	d41e0 <_Z14initConnectionv+0x60>
   d41d2:	4818      	ldr	r0, [pc, #96]	; (d4234 <_Z14initConnectionv+0xb4>)
   d41d4:	f7ff ff8c 	bl	d40f0 <_ZN5spark13CellularClass5readyEv>
   d41d8:	b910      	cbnz	r0, d41e0 <_Z14initConnectionv+0x60>
            spark_process();
   d41da:	f001 fb53 	bl	d5884 <spark_process>
   d41de:	e7ed      	b.n	d41bc <_Z14initConnectionv+0x3c>
   d41e0:	4814      	ldr	r0, [pc, #80]	; (d4234 <_Z14initConnectionv+0xb4>)
   d41e2:	f7ff ff85 	bl	d40f0 <_ZN5spark13CellularClass5readyEv>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d41e6:	f001 fb55 	bl	d5894 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41ea:	2000      	movs	r0, #0
  Particle.connect();
  waitFor(Particle.connected,timeout);
   d41ec:	682c      	ldr	r4, [r5, #0]
   d41ee:	f001 f953 	bl	d5498 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41f2:	2700      	movs	r7, #0
   d41f4:	4606      	mov	r6, r0
   d41f6:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41f8:	2000      	movs	r0, #0
   d41fa:	f001 f94d 	bl	d5498 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41fe:	1b80      	subs	r0, r0, r6
   d4200:	eb61 0107 	sbc.w	r1, r1, r7
   d4204:	42a9      	cmp	r1, r5
   d4206:	bf08      	it	eq
   d4208:	42a0      	cmpeq	r0, r4
   d420a:	d205      	bcs.n	d4218 <_Z14initConnectionv+0x98>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d420c:	f001 fb52 	bl	d58b4 <spark_cloud_flag_connected>
   d4210:	b910      	cbnz	r0, d4218 <_Z14initConnectionv+0x98>
            spark_process();
   d4212:	f001 fb37 	bl	d5884 <spark_process>
   d4216:	e7ef      	b.n	d41f8 <_Z14initConnectionv+0x78>
   d4218:	f001 fb4c 	bl	d58b4 <spark_cloud_flag_connected>
  if (Cellular.ready())
   d421c:	4805      	ldr	r0, [pc, #20]	; (d4234 <_Z14initConnectionv+0xb4>)
   d421e:	f7ff ff67 	bl	d40f0 <_ZN5spark13CellularClass5readyEv>
   d4222:	4604      	mov	r4, r0
    retVal = true;
  delay(1000);
   d4224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4228:	f002 f958 	bl	d64dc <delay>
  return retVal;
}
   d422c:	4620      	mov	r0, r4
   d422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4232:	bf00      	nop
   d4234:	2003e2b8 	.word	0x2003e2b8
   d4238:	2003dc78 	.word	0x2003dc78

000d423c <_Z15sendHttpRequest6String>:

bool sendHttpRequest(String data){
   d423c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d423e:	b08f      	sub	sp, #60	; 0x3c
   d4240:	4606      	mov	r6, r0
  if (initConnection()){
   d4242:	f7ff ff9d 	bl	d4180 <_Z14initConnectionv>
   d4246:	4605      	mov	r5, r0
   d4248:	2800      	cmp	r0, #0
   d424a:	d060      	beq.n	d430e <_Z15sendHttpRequest6String+0xd2>
    Particle.syncTime();
    String id = spark_deviceID();

    request.hostname = hostname;
   d424c:	4c31      	ldr	r4, [pc, #196]	; (d4314 <_Z15sendHttpRequest6String+0xd8>)
  return retVal;
}

bool sendHttpRequest(String data){
  if (initConnection()){
    Particle.syncTime();
   d424e:	f7ff ff45 	bl	d40dc <_ZN10CloudClass8syncTimeEv.isra.9>
    String id = spark_deviceID();
   d4252:	a802      	add	r0, sp, #8
   d4254:	f001 fb36 	bl	d58c4 <spark_deviceID>

    request.hostname = hostname;
   d4258:	492f      	ldr	r1, [pc, #188]	; (d4318 <_Z15sendHttpRequest6String+0xdc>)
   d425a:	4620      	mov	r0, r4
   d425c:	f001 fe07 	bl	d5e6e <_ZN6StringaSERKS_>
    request.port = hostport;
   d4260:	4b2e      	ldr	r3, [pc, #184]	; (d431c <_Z15sendHttpRequest6String+0xe0>)
    request.path = hostpath;
   d4262:	492f      	ldr	r1, [pc, #188]	; (d4320 <_Z15sendHttpRequest6String+0xe4>)
  if (initConnection()){
    Particle.syncTime();
    String id = spark_deviceID();

    request.hostname = hostname;
    request.port = hostport;
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = hostpath;
   d4268:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d426c:	f001 fdff 	bl	d5e6e <_ZN6StringaSERKS_>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4270:	a902      	add	r1, sp, #8
   d4272:	a806      	add	r0, sp, #24
   d4274:	f001 fe0a 	bl	d5e8c <_ZN6StringC1ERKS_>
    request.body = id + ";" + String(Time.now())  + "," + data;
   d4278:	492a      	ldr	r1, [pc, #168]	; (d4324 <_Z15sendHttpRequest6String+0xe8>)
   d427a:	a806      	add	r0, sp, #24
   d427c:	f001 fecd 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4280:	4607      	mov	r7, r0
   d4282:	f002 f91a 	bl	d64ba <_ZN9TimeClass3nowEv>
   d4286:	220a      	movs	r2, #10
   d4288:	4601      	mov	r1, r0
   d428a:	a80a      	add	r0, sp, #40	; 0x28
   d428c:	f001 fe4e 	bl	d5f2c <_ZN6StringC1Elh>
   d4290:	a90a      	add	r1, sp, #40	; 0x28
   d4292:	4638      	mov	r0, r7
   d4294:	f001 feb5 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d4298:	4923      	ldr	r1, [pc, #140]	; (d4328 <_Z15sendHttpRequest6String+0xec>)
   d429a:	f001 febe 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d429e:	4631      	mov	r1, r6
   d42a0:	f001 feaf 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d42a4:	4601      	mov	r1, r0
   d42a6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d42aa:	f001 fde0 	bl	d5e6e <_ZN6StringaSERKS_>
   d42ae:	a80a      	add	r0, sp, #40	; 0x28
   d42b0:	f001 fd66 	bl	d5d80 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d42b4:	a806      	add	r0, sp, #24
   d42b6:	f001 fd63 	bl	d5d80 <_ZN6StringD1Ev>
    sendSerialDebug(request.body);
   d42ba:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d42be:	a80a      	add	r0, sp, #40	; 0x28
   d42c0:	f001 fde4 	bl	d5e8c <_ZN6StringC1ERKS_>
   d42c4:	a80a      	add	r0, sp, #40	; 0x28
   d42c6:	f000 fe19 	bl	d4efc <_Z15sendSerialDebug6String>
   d42ca:	a80a      	add	r0, sp, #40	; 0x28
   d42cc:	f001 fd58 	bl	d5d80 <_ZN6StringD1Ev>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d42d0:	4b16      	ldr	r3, [pc, #88]	; (d432c <_Z15sendHttpRequest6String+0xf0>)
   d42d2:	4a17      	ldr	r2, [pc, #92]	; (d4330 <_Z15sendHttpRequest6String+0xf4>)
   d42d4:	9300      	str	r3, [sp, #0]
   d42d6:	4621      	mov	r1, r4
   d42d8:	4b16      	ldr	r3, [pc, #88]	; (d4334 <_Z15sendHttpRequest6String+0xf8>)
   d42da:	4817      	ldr	r0, [pc, #92]	; (d4338 <_Z15sendHttpRequest6String+0xfc>)
   d42dc:	f000 fcb8 	bl	d4c50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
    http.get(request, response, headers);
    sendSerialDebug("After sendHTTPRequest() http.get()");
   d42e0:	4916      	ldr	r1, [pc, #88]	; (d433c <_Z15sendHttpRequest6String+0x100>)
   d42e2:	a80a      	add	r0, sp, #40	; 0x28
   d42e4:	f001 fd93 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d42e8:	a80a      	add	r0, sp, #40	; 0x28
   d42ea:	f000 fe07 	bl	d4efc <_Z15sendSerialDebug6String>
   d42ee:	a80a      	add	r0, sp, #40	; 0x28
   d42f0:	f001 fd46 	bl	d5d80 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d42f4:	4912      	ldr	r1, [pc, #72]	; (d4340 <_Z15sendHttpRequest6String+0x104>)
   d42f6:	4813      	ldr	r0, [pc, #76]	; (d4344 <_Z15sendHttpRequest6String+0x108>)
   d42f8:	f001 fea1 	bl	d603e <_ZNK6String6equalsEPKc>

    if (response.body == "OK")
   d42fc:	4604      	mov	r4, r0
      return true;
   d42fe:	a802      	add	r0, sp, #8
    request.body = id + ";" + String(Time.now())  + "," + data;
    sendSerialDebug(request.body);
    http.get(request, response, headers);
    sendSerialDebug("After sendHTTPRequest() http.get()");

    if (response.body == "OK")
   d4300:	b114      	cbz	r4, d4308 <_Z15sendHttpRequest6String+0xcc>
      return true;
   d4302:	f001 fd3d 	bl	d5d80 <_ZN6StringD1Ev>
   d4306:	e002      	b.n	d430e <_Z15sendHttpRequest6String+0xd2>
}

bool sendHttpRequest(String data){
  if (initConnection()){
    Particle.syncTime();
    String id = spark_deviceID();
   d4308:	f001 fd3a 	bl	d5d80 <_ZN6StringD1Ev>
    sendSerialDebug("After sendHTTPRequest() http.get()");

    if (response.body == "OK")
      return true;
  }
  return false;
   d430c:	4625      	mov	r5, r4
}
   d430e:	4628      	mov	r0, r5
   d4310:	b00f      	add	sp, #60	; 0x3c
   d4312:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4314:	2003dd94 	.word	0x2003dd94
   d4318:	2003dd84 	.word	0x2003dd84
   d431c:	2003dc84 	.word	0x2003dc84
   d4320:	2003dd60 	.word	0x2003dd60
   d4324:	000d9de0 	.word	0x000d9de0
   d4328:	000da03b 	.word	0x000da03b
   d432c:	000d9de2 	.word	0x000d9de2
   d4330:	2003dd70 	.word	0x2003dd70
   d4334:	2003dc58 	.word	0x2003dc58
   d4338:	2003dde4 	.word	0x2003dde4
   d433c:	000d9de6 	.word	0x000d9de6
   d4340:	000d9e09 	.word	0x000d9e09
   d4344:	2003dd74 	.word	0x2003dd74

000d4348 <_Z20disconnectConnectionv>:

void disconnectConnection()
{
   d4348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d434a:	f001 faab 	bl	d58a4 <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d434e:	f001 fab1 	bl	d58b4 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4352:	4604      	mov	r4, r0
   d4354:	b9f0      	cbnz	r0, d4394 <_Z20disconnectConnectionv+0x4c>
   d4356:	f001 faad 	bl	d58b4 <spark_cloud_flag_connected>
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  sendSerialDebug("disconnectConnection(): before Cellular.off()");
   d435a:	4910      	ldr	r1, [pc, #64]	; (d439c <_Z20disconnectConnectionv+0x54>)
   d435c:	4668      	mov	r0, sp
   d435e:	f001 fd56 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4362:	4668      	mov	r0, sp
   d4364:	f000 fdca 	bl	d4efc <_Z15sendSerialDebug6String>
   d4368:	4668      	mov	r0, sp
   d436a:	f001 fd09 	bl	d5d80 <_ZN6StringD1Ev>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d436e:	480c      	ldr	r0, [pc, #48]	; (d43a0 <_Z20disconnectConnectionv+0x58>)
   d4370:	4623      	mov	r3, r4
   d4372:	4622      	mov	r2, r4
   d4374:	4621      	mov	r1, r4
   d4376:	6840      	ldr	r0, [r0, #4]
   d4378:	f001 fa5c 	bl	d5834 <network_off>
  Cellular.off();
  sendSerialDebug("disconnectConnection(): after Cellular.off()"); 
   d437c:	4909      	ldr	r1, [pc, #36]	; (d43a4 <_Z20disconnectConnectionv+0x5c>)
   d437e:	4668      	mov	r0, sp
   d4380:	f001 fd45 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4384:	4668      	mov	r0, sp
   d4386:	f000 fdb9 	bl	d4efc <_Z15sendSerialDebug6String>
   d438a:	4668      	mov	r0, sp
   d438c:	f001 fcf8 	bl	d5d80 <_ZN6StringD1Ev>
}
   d4390:	b004      	add	sp, #16
   d4392:	bd10      	pop	{r4, pc}
            spark_process();
   d4394:	f001 fa76 	bl	d5884 <spark_process>
   d4398:	e7d9      	b.n	d434e <_Z20disconnectConnectionv+0x6>
   d439a:	bf00      	nop
   d439c:	000d9e0c 	.word	0x000d9e0c
   d43a0:	2003e2b8 	.word	0x2003e2b8
   d43a4:	000d9e3a 	.word	0x000d9e3a

000d43a8 <_Z12debugMessage6String>:
void debugMessage(String message){
   d43a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 if(debug)
   d43aa:	4b08      	ldr	r3, [pc, #32]	; (d43cc <_Z12debugMessage6String+0x24>)
   d43ac:	781b      	ldrb	r3, [r3, #0]
  waitUntil(Particle.disconnected);
  sendSerialDebug("disconnectConnection(): before Cellular.off()");
  Cellular.off();
  sendSerialDebug("disconnectConnection(): after Cellular.off()"); 
}
void debugMessage(String message){
   d43ae:	4601      	mov	r1, r0
 if(debug)
   d43b0:	b143      	cbz	r3, d43c4 <_Z12debugMessage6String+0x1c>
 {
    sendHttpRequest(message);
   d43b2:	4668      	mov	r0, sp
   d43b4:	f001 fd6a 	bl	d5e8c <_ZN6StringC1ERKS_>
   d43b8:	4668      	mov	r0, sp
   d43ba:	f7ff ff3f 	bl	d423c <_Z15sendHttpRequest6String>
   d43be:	4668      	mov	r0, sp
   d43c0:	f001 fcde 	bl	d5d80 <_ZN6StringD1Ev>
 }
}
   d43c4:	b005      	add	sp, #20
   d43c6:	f85d fb04 	ldr.w	pc, [sp], #4
   d43ca:	bf00      	nop
   d43cc:	2003dd5c 	.word	0x2003dd5c

000d43d0 <_Z12setParameter6StringS_>:
bool setParameter(String param, String value)
{ if (param == "si")
   d43d0:	b530      	push	{r4, r5, lr}
   d43d2:	460c      	mov	r4, r1
   d43d4:	b089      	sub	sp, #36	; 0x24
   d43d6:	4941      	ldr	r1, [pc, #260]	; (d44dc <_Z12setParameter6StringS_+0x10c>)
   d43d8:	4605      	mov	r5, r0
   d43da:	f001 fe30 	bl	d603e <_ZNK6String6equalsEPKc>
   d43de:	b120      	cbz	r0, d43ea <_Z12setParameter6StringS_+0x1a>
  {
    sendInterval = value.toInt();
   d43e0:	4620      	mov	r0, r4
   d43e2:	f001 fef7 	bl	d61d4 <_ZNK6String5toIntEv>
   d43e6:	4b3e      	ldr	r3, [pc, #248]	; (d44e0 <_Z12setParameter6StringS_+0x110>)
   d43e8:	e008      	b.n	d43fc <_Z12setParameter6StringS_+0x2c>
   d43ea:	493e      	ldr	r1, [pc, #248]	; (d44e4 <_Z12setParameter6StringS_+0x114>)
   d43ec:	4628      	mov	r0, r5
   d43ee:	f001 fe26 	bl	d603e <_ZNK6String6equalsEPKc>
  }
  else if (param == "li")
   d43f2:	b128      	cbz	r0, d4400 <_Z12setParameter6StringS_+0x30>
  {
      logInterval = value.toInt();
   d43f4:	4620      	mov	r0, r4
   d43f6:	f001 feed 	bl	d61d4 <_ZNK6String5toIntEv>
   d43fa:	4b3b      	ldr	r3, [pc, #236]	; (d44e8 <_Z12setParameter6StringS_+0x118>)
   d43fc:	6018      	str	r0, [r3, #0]
   d43fe:	e069      	b.n	d44d4 <_Z12setParameter6StringS_+0x104>
   d4400:	493a      	ldr	r1, [pc, #232]	; (d44ec <_Z12setParameter6StringS_+0x11c>)
   d4402:	4628      	mov	r0, r5
   d4404:	f001 fe1b 	bl	d603e <_ZNK6String6equalsEPKc>
  }
  else if (param == "sm")
   d4408:	b120      	cbz	r0, d4414 <_Z12setParameter6StringS_+0x44>
  {
      statusInterval = value.toInt();
   d440a:	4620      	mov	r0, r4
   d440c:	f001 fee2 	bl	d61d4 <_ZNK6String5toIntEv>
   d4410:	4b37      	ldr	r3, [pc, #220]	; (d44f0 <_Z12setParameter6StringS_+0x120>)
   d4412:	e7f3      	b.n	d43fc <_Z12setParameter6StringS_+0x2c>
   d4414:	4937      	ldr	r1, [pc, #220]	; (d44f4 <_Z12setParameter6StringS_+0x124>)
   d4416:	4628      	mov	r0, r5
   d4418:	f001 fe11 	bl	d603e <_ZNK6String6equalsEPKc>
  }
  else if (param == "pu")
   d441c:	b120      	cbz	r0, d4428 <_Z12setParameter6StringS_+0x58>
  {
      powerUp = value.toInt();
   d441e:	4620      	mov	r0, r4
   d4420:	f001 fed8 	bl	d61d4 <_ZNK6String5toIntEv>
   d4424:	4b34      	ldr	r3, [pc, #208]	; (d44f8 <_Z12setParameter6StringS_+0x128>)
   d4426:	e7e9      	b.n	d43fc <_Z12setParameter6StringS_+0x2c>
   d4428:	4934      	ldr	r1, [pc, #208]	; (d44fc <_Z12setParameter6StringS_+0x12c>)
   d442a:	4628      	mov	r0, r5
   d442c:	f001 fe07 	bl	d603e <_ZNK6String6equalsEPKc>
  }
  else if (param == "fd")
   d4430:	b150      	cbz	r0, d4448 <_Z12setParameter6StringS_+0x78>
  {
      floatDelay = value.toInt();
   d4432:	4620      	mov	r0, r4
   d4434:	f001 fece 	bl	d61d4 <_ZNK6String5toIntEv>
   d4438:	ee07 0a90 	vmov	s15, r0
   d443c:	4b30      	ldr	r3, [pc, #192]	; (d4500 <_Z12setParameter6StringS_+0x130>)
   d443e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4442:	edc3 7a00 	vstr	s15, [r3]
   d4446:	e045      	b.n	d44d4 <_Z12setParameter6StringS_+0x104>
   d4448:	492e      	ldr	r1, [pc, #184]	; (d4504 <_Z12setParameter6StringS_+0x134>)
   d444a:	4628      	mov	r0, r5
   d444c:	f001 fdf7 	bl	d603e <_ZNK6String6equalsEPKc>
  }
  else if (param == "ri")
   d4450:	b120      	cbz	r0, d445c <_Z12setParameter6StringS_+0x8c>
  {
      rebootInterval = value.toInt();
   d4452:	4620      	mov	r0, r4
   d4454:	f001 febe 	bl	d61d4 <_ZNK6String5toIntEv>
   d4458:	4b2b      	ldr	r3, [pc, #172]	; (d4508 <_Z12setParameter6StringS_+0x138>)
   d445a:	e7cf      	b.n	d43fc <_Z12setParameter6StringS_+0x2c>
   d445c:	492b      	ldr	r1, [pc, #172]	; (d450c <_Z12setParameter6StringS_+0x13c>)
   d445e:	4628      	mov	r0, r5
   d4460:	f001 fded 	bl	d603e <_ZNK6String6equalsEPKc>
  }
  else if (param == "to")
   d4464:	b158      	cbz	r0, d447e <_Z12setParameter6StringS_+0xae>
  {
      timeout = value.toInt();
   d4466:	4620      	mov	r0, r4
   d4468:	f001 feb4 	bl	d61d4 <_ZNK6String5toIntEv>
      if (timeout < 10000)  // Ensure that an invalid timeout parameter does not disable radio... minimum timeout is 10 seconds
   d446c:	f242 730f 	movw	r3, #9999	; 0x270f
   d4470:	4298      	cmp	r0, r3
   d4472:	4b27      	ldr	r3, [pc, #156]	; (d4510 <_Z12setParameter6StringS_+0x140>)
   d4474:	dcc2      	bgt.n	d43fc <_Z12setParameter6StringS_+0x2c>
        timeout = 10000;
   d4476:	f242 7210 	movw	r2, #10000	; 0x2710
   d447a:	601a      	str	r2, [r3, #0]
   d447c:	e02a      	b.n	d44d4 <_Z12setParameter6StringS_+0x104>
   d447e:	4925      	ldr	r1, [pc, #148]	; (d4514 <_Z12setParameter6StringS_+0x144>)
   d4480:	4628      	mov	r0, r5
   d4482:	f001 fddc 	bl	d603e <_ZNK6String6equalsEPKc>
  }
  else if (param == "db")
   d4486:	b150      	cbz	r0, d449e <_Z12setParameter6StringS_+0xce>
   d4488:	4923      	ldr	r1, [pc, #140]	; (d4518 <_Z12setParameter6StringS_+0x148>)
   d448a:	4620      	mov	r0, r4
   d448c:	f001 fdd7 	bl	d603e <_ZNK6String6equalsEPKc>
   d4490:	4b22      	ldr	r3, [pc, #136]	; (d451c <_Z12setParameter6StringS_+0x14c>)
  {
      if(value == "1")
   d4492:	b110      	cbz	r0, d449a <_Z12setParameter6StringS_+0xca>
        debug = true;
   d4494:	2201      	movs	r2, #1
   d4496:	701a      	strb	r2, [r3, #0]
   d4498:	e01c      	b.n	d44d4 <_Z12setParameter6StringS_+0x104>
      else
        debug = false;
   d449a:	7018      	strb	r0, [r3, #0]
   d449c:	e01a      	b.n	d44d4 <_Z12setParameter6StringS_+0x104>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d449e:	4920      	ldr	r1, [pc, #128]	; (d4520 <_Z12setParameter6StringS_+0x150>)
   d44a0:	a804      	add	r0, sp, #16
   d44a2:	f001 fcb4 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
  }
  else
  {
      sendSerialDebug("Unknown parameter- " + param + ":" + value);
   d44a6:	4629      	mov	r1, r5
   d44a8:	a804      	add	r0, sp, #16
   d44aa:	f001 fdaa 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d44ae:	491d      	ldr	r1, [pc, #116]	; (d4524 <_Z12setParameter6StringS_+0x154>)
   d44b0:	f001 fdb3 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d44b4:	4621      	mov	r1, r4
   d44b6:	f001 fda4 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d44ba:	4601      	mov	r1, r0
   d44bc:	4668      	mov	r0, sp
   d44be:	f001 fce5 	bl	d5e8c <_ZN6StringC1ERKS_>
   d44c2:	4668      	mov	r0, sp
   d44c4:	f000 fd1a 	bl	d4efc <_Z15sendSerialDebug6String>
   d44c8:	4668      	mov	r0, sp
   d44ca:	f001 fc59 	bl	d5d80 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44ce:	a804      	add	r0, sp, #16
   d44d0:	f001 fc56 	bl	d5d80 <_ZN6StringD1Ev>
  }
  
  return true;
}
   d44d4:	2001      	movs	r0, #1
   d44d6:	b009      	add	sp, #36	; 0x24
   d44d8:	bd30      	pop	{r4, r5, pc}
   d44da:	bf00      	nop
   d44dc:	000d9e67 	.word	0x000d9e67
   d44e0:	2003dc8c 	.word	0x2003dc8c
   d44e4:	000d9e6a 	.word	0x000d9e6a
   d44e8:	2003dc80 	.word	0x2003dc80
   d44ec:	000d9e6d 	.word	0x000d9e6d
   d44f0:	2003dc90 	.word	0x2003dc90
   d44f4:	000d9e70 	.word	0x000d9e70
   d44f8:	2003dc7c 	.word	0x2003dc7c
   d44fc:	000d9e73 	.word	0x000d9e73
   d4500:	2003dc54 	.word	0x2003dc54
   d4504:	000da6d4 	.word	0x000da6d4
   d4508:	2003dc88 	.word	0x2003dc88
   d450c:	000d9e76 	.word	0x000d9e76
   d4510:	2003dc78 	.word	0x2003dc78
   d4514:	000d9e79 	.word	0x000d9e79
   d4518:	000da0de 	.word	0x000da0de
   d451c:	2003dd5c 	.word	0x2003dd5c
   d4520:	000d9e7c 	.word	0x000d9e7c
   d4524:	000d9efd 	.word	0x000d9efd

000d4528 <_Z11parseString6String>:

void parseString(String strVars)
{
   d4528:	b570      	push	{r4, r5, r6, lr}
   d452a:	b09c      	sub	sp, #112	; 0x70
   d452c:	4604      	mov	r4, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d452e:	495d      	ldr	r1, [pc, #372]	; (d46a4 <_Z11parseString6String+0x17c>)
   d4530:	a814      	add	r0, sp, #80	; 0x50
   d4532:	f001 fc6c 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
  sendSerialDebug("Parsing Response:" + strVars);
   d4536:	4621      	mov	r1, r4
   d4538:	a814      	add	r0, sp, #80	; 0x50
   d453a:	f001 fd62 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d453e:	4601      	mov	r1, r0
   d4540:	a818      	add	r0, sp, #96	; 0x60
   d4542:	f001 fca3 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4546:	a818      	add	r0, sp, #96	; 0x60
   d4548:	f000 fcd8 	bl	d4efc <_Z15sendSerialDebug6String>
   d454c:	a818      	add	r0, sp, #96	; 0x60
   d454e:	f001 fc17 	bl	d5d80 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4552:	a814      	add	r0, sp, #80	; 0x50
   d4554:	f001 fc14 	bl	d5d80 <_ZN6StringD1Ev>
  strVars = strVars.replace("\"","");
   d4558:	4953      	ldr	r1, [pc, #332]	; (d46a8 <_Z11parseString6String+0x180>)
   d455a:	a814      	add	r0, sp, #80	; 0x50
   d455c:	f001 fc57 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4560:	4952      	ldr	r1, [pc, #328]	; (d46ac <_Z11parseString6String+0x184>)
   d4562:	a818      	add	r0, sp, #96	; 0x60
   d4564:	f001 fc53 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4568:	aa18      	add	r2, sp, #96	; 0x60
   d456a:	a914      	add	r1, sp, #80	; 0x50
   d456c:	4620      	mov	r0, r4
   d456e:	f001 fdaa 	bl	d60c6 <_ZN6String7replaceERKS_S1_>
   d4572:	4601      	mov	r1, r0
   d4574:	4620      	mov	r0, r4
   d4576:	f001 fc7a 	bl	d5e6e <_ZN6StringaSERKS_>
   d457a:	a818      	add	r0, sp, #96	; 0x60
   d457c:	f001 fc00 	bl	d5d80 <_ZN6StringD1Ev>
   d4580:	a814      	add	r0, sp, #80	; 0x50
   d4582:	f001 fbfd 	bl	d5d80 <_ZN6StringD1Ev>
  String parameter = ""; 
   d4586:	4949      	ldr	r1, [pc, #292]	; (d46ac <_Z11parseString6String+0x184>)
   d4588:	4668      	mov	r0, sp
   d458a:	f001 fc40 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
  String value = "";
   d458e:	4947      	ldr	r1, [pc, #284]	; (d46ac <_Z11parseString6String+0x184>)
   d4590:	a804      	add	r0, sp, #16
   d4592:	f001 fc3c 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
  String inChar = "";
   d4596:	4945      	ldr	r1, [pc, #276]	; (d46ac <_Z11parseString6String+0x184>)
   d4598:	a808      	add	r0, sp, #32
   d459a:	f001 fc38 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d459e:	2500      	movs	r5, #0
  int i = 0;
  bool readingParam = true;
   d45a0:	2601      	movs	r6, #1
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d45a2:	4943      	ldr	r1, [pc, #268]	; (d46b0 <_Z11parseString6String+0x188>)
   d45a4:	a808      	add	r0, sp, #32
   d45a6:	f001 fd4a 	bl	d603e <_ZNK6String6equalsEPKc>

  while (inChar != ".")
   d45aa:	b9d8      	cbnz	r0, d45e4 <_Z11parseString6String+0xbc>
  {
  inChar = strVars.charAt(i++);
   d45ac:	4629      	mov	r1, r5
   d45ae:	4620      	mov	r0, r4
   d45b0:	f001 fd60 	bl	d6074 <_ZNK6String6charAtEj>
class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
   d45b4:	4601      	mov	r1, r0
   d45b6:	a818      	add	r0, sp, #96	; 0x60
   d45b8:	f001 fc94 	bl	d5ee4 <_ZN6StringC1Ec>
   d45bc:	a918      	add	r1, sp, #96	; 0x60
   d45be:	a808      	add	r0, sp, #32
   d45c0:	f001 fc77 	bl	d5eb2 <_ZN6StringaSEO15StringSumHelper>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d45c4:	a818      	add	r0, sp, #96	; 0x60
   d45c6:	f001 fbdb 	bl	d5d80 <_ZN6StringD1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d45ca:	493a      	ldr	r1, [pc, #232]	; (d46b4 <_Z11parseString6String+0x18c>)
   d45cc:	a808      	add	r0, sp, #32
   d45ce:	f001 fd36 	bl	d603e <_ZNK6String6equalsEPKc>
  if (inChar != ":" and inChar != ",")
   d45d2:	2800      	cmp	r0, #0
   d45d4:	d140      	bne.n	d4658 <_Z11parseString6String+0x130>
   d45d6:	4938      	ldr	r1, [pc, #224]	; (d46b8 <_Z11parseString6String+0x190>)
   d45d8:	a808      	add	r0, sp, #32
   d45da:	f001 fd30 	bl	d603e <_ZNK6String6equalsEPKc>
   d45de:	2800      	cmp	r0, #0
   d45e0:	d030      	beq.n	d4644 <_Z11parseString6String+0x11c>
   d45e2:	e039      	b.n	d4658 <_Z11parseString6String+0x130>
        value = ""; 
        readingParam = true;
      }
    }
  }
  setParameter(parameter,value.replace(".",""));
   d45e4:	4669      	mov	r1, sp
   d45e6:	a814      	add	r0, sp, #80	; 0x50
   d45e8:	f001 fc50 	bl	d5e8c <_ZN6StringC1ERKS_>
   d45ec:	4930      	ldr	r1, [pc, #192]	; (d46b0 <_Z11parseString6String+0x188>)
   d45ee:	a80c      	add	r0, sp, #48	; 0x30
   d45f0:	f001 fc0d 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d45f4:	492d      	ldr	r1, [pc, #180]	; (d46ac <_Z11parseString6String+0x184>)
   d45f6:	a810      	add	r0, sp, #64	; 0x40
   d45f8:	f001 fc09 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d45fc:	aa10      	add	r2, sp, #64	; 0x40
   d45fe:	a90c      	add	r1, sp, #48	; 0x30
   d4600:	a804      	add	r0, sp, #16
   d4602:	f001 fd60 	bl	d60c6 <_ZN6String7replaceERKS_S1_>
   d4606:	4601      	mov	r1, r0
   d4608:	a818      	add	r0, sp, #96	; 0x60
   d460a:	f001 fc3f 	bl	d5e8c <_ZN6StringC1ERKS_>
   d460e:	a918      	add	r1, sp, #96	; 0x60
   d4610:	a814      	add	r0, sp, #80	; 0x50
   d4612:	f7ff fedd 	bl	d43d0 <_Z12setParameter6StringS_>
   d4616:	a818      	add	r0, sp, #96	; 0x60
   d4618:	f001 fbb2 	bl	d5d80 <_ZN6StringD1Ev>
   d461c:	a810      	add	r0, sp, #64	; 0x40
   d461e:	f001 fbaf 	bl	d5d80 <_ZN6StringD1Ev>
   d4622:	a80c      	add	r0, sp, #48	; 0x30
   d4624:	f001 fbac 	bl	d5d80 <_ZN6StringD1Ev>
   d4628:	a814      	add	r0, sp, #80	; 0x50
   d462a:	f001 fba9 	bl	d5d80 <_ZN6StringD1Ev>
        readingParam = false;
      }
      else
      {
        if (setParameter(parameter, value) == false)
          return;
   d462e:	a808      	add	r0, sp, #32
   d4630:	f001 fba6 	bl	d5d80 <_ZN6StringD1Ev>
   d4634:	a804      	add	r0, sp, #16
   d4636:	f001 fba3 	bl	d5d80 <_ZN6StringD1Ev>
   d463a:	4668      	mov	r0, sp
   d463c:	f001 fba0 	bl	d5d80 <_ZN6StringD1Ev>
        readingParam = true;
      }
    }
  }
  setParameter(parameter,value.replace(".",""));
}
   d4640:	b01c      	add	sp, #112	; 0x70
   d4642:	bd70      	pop	{r4, r5, r6, pc}
  while (inChar != ".")
  {
  inChar = strVars.charAt(i++);
  if (inChar != ":" and inChar != ",")
    {
    if (readingParam)
   d4644:	b116      	cbz	r6, d464c <_Z11parseString6String+0x124>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4646:	a908      	add	r1, sp, #32
   d4648:	4668      	mov	r0, sp
   d464a:	e001      	b.n	d4650 <_Z11parseString6String+0x128>
   d464c:	a908      	add	r1, sp, #32
   d464e:	a804      	add	r0, sp, #16
   d4650:	f001 fcc4 	bl	d5fdc <_ZN6String6concatERKS_>
   d4654:	3501      	adds	r5, #1
   d4656:	e7a4      	b.n	d45a2 <_Z11parseString6String+0x7a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4658:	4916      	ldr	r1, [pc, #88]	; (d46b4 <_Z11parseString6String+0x18c>)
   d465a:	a808      	add	r0, sp, #32
   d465c:	f001 fcef 	bl	d603e <_ZNK6String6equalsEPKc>
    else
      value += inChar;    
    }
  else
    {
      if (inChar == ":")
   d4660:	b108      	cbz	r0, d4666 <_Z11parseString6String+0x13e>
      {
        readingParam = false;
   d4662:	2600      	movs	r6, #0
   d4664:	e7f6      	b.n	d4654 <_Z11parseString6String+0x12c>
      }
      else
      {
        if (setParameter(parameter, value) == false)
   d4666:	4669      	mov	r1, sp
   d4668:	a814      	add	r0, sp, #80	; 0x50
   d466a:	f001 fc0f 	bl	d5e8c <_ZN6StringC1ERKS_>
   d466e:	a904      	add	r1, sp, #16
   d4670:	a818      	add	r0, sp, #96	; 0x60
   d4672:	f001 fc0b 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4676:	a918      	add	r1, sp, #96	; 0x60
   d4678:	a814      	add	r0, sp, #80	; 0x50
   d467a:	f7ff fea9 	bl	d43d0 <_Z12setParameter6StringS_>
   d467e:	4606      	mov	r6, r0
   d4680:	a818      	add	r0, sp, #96	; 0x60
   d4682:	f001 fb7d 	bl	d5d80 <_ZN6StringD1Ev>
   d4686:	a814      	add	r0, sp, #80	; 0x50
   d4688:	f001 fb7a 	bl	d5d80 <_ZN6StringD1Ev>
   d468c:	2e00      	cmp	r6, #0
   d468e:	d0ce      	beq.n	d462e <_Z11parseString6String+0x106>
          return;
        parameter = "";
   d4690:	4906      	ldr	r1, [pc, #24]	; (d46ac <_Z11parseString6String+0x184>)
   d4692:	4668      	mov	r0, sp
   d4694:	f001 fc15 	bl	d5ec2 <_ZN6StringaSEPKc>
        value = ""; 
   d4698:	4904      	ldr	r1, [pc, #16]	; (d46ac <_Z11parseString6String+0x184>)
   d469a:	a804      	add	r0, sp, #16
   d469c:	f001 fc11 	bl	d5ec2 <_ZN6StringaSEPKc>
        readingParam = true;
   d46a0:	2601      	movs	r6, #1
   d46a2:	e7d7      	b.n	d4654 <_Z11parseString6String+0x12c>
   d46a4:	000d9e90 	.word	0x000d9e90
   d46a8:	000d9ea2 	.word	0x000d9ea2
   d46ac:	000d9f75 	.word	0x000d9f75
   d46b0:	000d9ea4 	.word	0x000d9ea4
   d46b4:	000d9efd 	.word	0x000d9efd
   d46b8:	000da03b 	.word	0x000da03b

000d46bc <_Z15responseMessagev>:
  }
  setParameter(parameter,value.replace(".",""));
}
/****  validate response to status by sending back new parameters  ****/
void responseMessage()
{
   d46bc:	b510      	push	{r4, lr}
   d46be:	b0ae      	sub	sp, #184	; 0xb8
  FuelGauge fuel;
   d46c0:	2100      	movs	r1, #0
   d46c2:	4668      	mov	r0, sp
   d46c4:	f001 fff4 	bl	d66b0 <_ZN9FuelGaugeC1Eb>
  if (initConnection())
   d46c8:	f7ff fd5a 	bl	d4180 <_Z14initConnectionv>
   d46cc:	2800      	cmp	r0, #0
   d46ce:	f000 80c4 	beq.w	d485a <_Z15responseMessagev+0x19e>
  {
    String message =  String(Time.now()) + 
    ",Reply" +
   d46d2:	f001 fef2 	bl	d64ba <_ZN9TimeClass3nowEv>
   d46d6:	220a      	movs	r2, #10
   d46d8:	4601      	mov	r1, r0
   d46da:	a806      	add	r0, sp, #24
   d46dc:	f001 fc26 	bl	d5f2c <_ZN6StringC1Elh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d46e0:	a906      	add	r1, sp, #24
   d46e2:	a80a      	add	r0, sp, #40	; 0x28
   d46e4:	f001 fbd2 	bl	d5e8c <_ZN6StringC1ERKS_>
   d46e8:	495e      	ldr	r1, [pc, #376]	; (d4864 <_Z15responseMessagev+0x1a8>)
   d46ea:	a80a      	add	r0, sp, #40	; 0x28
   d46ec:	f001 fc95 	bl	d601a <_ZplRK15StringSumHelperPKc>
    ",li:" + (String)logInterval + 
   d46f0:	495d      	ldr	r1, [pc, #372]	; (d4868 <_Z15responseMessagev+0x1ac>)
   d46f2:	f001 fc92 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d46f6:	4b5d      	ldr	r3, [pc, #372]	; (d486c <_Z15responseMessagev+0x1b0>)
   d46f8:	220a      	movs	r2, #10
   d46fa:	6819      	ldr	r1, [r3, #0]
   d46fc:	4604      	mov	r4, r0
   d46fe:	a80e      	add	r0, sp, #56	; 0x38
   d4700:	f001 fc01 	bl	d5f06 <_ZN6StringC1Eih>
   d4704:	a90e      	add	r1, sp, #56	; 0x38
   d4706:	4620      	mov	r0, r4
   d4708:	f001 fc7b 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
    ",si:" + (String)sendInterval + 
   d470c:	4958      	ldr	r1, [pc, #352]	; (d4870 <_Z15responseMessagev+0x1b4>)
   d470e:	f001 fc84 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4712:	4b58      	ldr	r3, [pc, #352]	; (d4874 <_Z15responseMessagev+0x1b8>)
   d4714:	220a      	movs	r2, #10
   d4716:	6819      	ldr	r1, [r3, #0]
   d4718:	4604      	mov	r4, r0
   d471a:	a812      	add	r0, sp, #72	; 0x48
   d471c:	f001 fbf3 	bl	d5f06 <_ZN6StringC1Eih>
   d4720:	a912      	add	r1, sp, #72	; 0x48
   d4722:	4620      	mov	r0, r4
   d4724:	f001 fc6d 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
    ",sm:" + (String)statusInterval + 
   d4728:	4953      	ldr	r1, [pc, #332]	; (d4878 <_Z15responseMessagev+0x1bc>)
   d472a:	f001 fc76 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d472e:	4b53      	ldr	r3, [pc, #332]	; (d487c <_Z15responseMessagev+0x1c0>)
   d4730:	220a      	movs	r2, #10
   d4732:	6819      	ldr	r1, [r3, #0]
   d4734:	4604      	mov	r4, r0
   d4736:	a816      	add	r0, sp, #88	; 0x58
   d4738:	f001 fbe5 	bl	d5f06 <_ZN6StringC1Eih>
   d473c:	a916      	add	r1, sp, #88	; 0x58
   d473e:	4620      	mov	r0, r4
   d4740:	f001 fc5f 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
    ",to:" + (String)timeout + 
   d4744:	494e      	ldr	r1, [pc, #312]	; (d4880 <_Z15responseMessagev+0x1c4>)
   d4746:	f001 fc68 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d474a:	4b4e      	ldr	r3, [pc, #312]	; (d4884 <_Z15responseMessagev+0x1c8>)
   d474c:	220a      	movs	r2, #10
   d474e:	6819      	ldr	r1, [r3, #0]
   d4750:	4604      	mov	r4, r0
   d4752:	a81a      	add	r0, sp, #104	; 0x68
   d4754:	f001 fbd7 	bl	d5f06 <_ZN6StringC1Eih>
   d4758:	a91a      	add	r1, sp, #104	; 0x68
   d475a:	4620      	mov	r0, r4
   d475c:	f001 fc51 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
    ",pu:" + (String)powerUp + 
   d4760:	4949      	ldr	r1, [pc, #292]	; (d4888 <_Z15responseMessagev+0x1cc>)
   d4762:	f001 fc5a 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4766:	4b49      	ldr	r3, [pc, #292]	; (d488c <_Z15responseMessagev+0x1d0>)
   d4768:	220a      	movs	r2, #10
   d476a:	6819      	ldr	r1, [r3, #0]
   d476c:	4604      	mov	r4, r0
   d476e:	a81e      	add	r0, sp, #120	; 0x78
   d4770:	f001 fbc9 	bl	d5f06 <_ZN6StringC1Eih>
   d4774:	a91e      	add	r1, sp, #120	; 0x78
   d4776:	4620      	mov	r0, r4
   d4778:	f001 fc43 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
    ",fd:" + (String)floatDelay +
   d477c:	4944      	ldr	r1, [pc, #272]	; (d4890 <_Z15responseMessagev+0x1d4>)
   d477e:	f001 fc4c 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4782:	4b44      	ldr	r3, [pc, #272]	; (d4894 <_Z15responseMessagev+0x1d8>)
   d4784:	4604      	mov	r4, r0
   d4786:	ed93 0a00 	vldr	s0, [r3]
   d478a:	2106      	movs	r1, #6
   d478c:	a822      	add	r0, sp, #136	; 0x88
   d478e:	f001 fbf4 	bl	d5f7a <_ZN6StringC1Efi>
   d4792:	a922      	add	r1, sp, #136	; 0x88
   d4794:	4620      	mov	r0, r4
   d4796:	f001 fc34 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
    ",ri:" + (String)rebootInterval +
   d479a:	493f      	ldr	r1, [pc, #252]	; (d4898 <_Z15responseMessagev+0x1dc>)
   d479c:	f001 fc3d 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d47a0:	4b3e      	ldr	r3, [pc, #248]	; (d489c <_Z15responseMessagev+0x1e0>)
   d47a2:	220a      	movs	r2, #10
   d47a4:	6819      	ldr	r1, [r3, #0]
   d47a6:	4604      	mov	r4, r0
   d47a8:	a826      	add	r0, sp, #152	; 0x98
   d47aa:	f001 fbac 	bl	d5f06 <_ZN6StringC1Eih>
   d47ae:	a926      	add	r1, sp, #152	; 0x98
   d47b0:	4620      	mov	r0, r4
   d47b2:	f001 fc26 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
    ",Bat:" + (String)fuel.getVCell();
   d47b6:	493a      	ldr	r1, [pc, #232]	; (d48a0 <_Z15responseMessagev+0x1e4>)
   d47b8:	f001 fc2f 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d47bc:	4604      	mov	r4, r0
   d47be:	4668      	mov	r0, sp
   d47c0:	f001 ffb6 	bl	d6730 <_ZN9FuelGauge8getVCellEv>
   d47c4:	2106      	movs	r1, #6
   d47c6:	a82a      	add	r0, sp, #168	; 0xa8
   d47c8:	f001 fbd7 	bl	d5f7a <_ZN6StringC1Efi>
   d47cc:	a92a      	add	r1, sp, #168	; 0xa8
   d47ce:	4620      	mov	r0, r4
   d47d0:	f001 fc17 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d47d4:	4601      	mov	r1, r0
   d47d6:	a802      	add	r0, sp, #8
   d47d8:	f001 fb58 	bl	d5e8c <_ZN6StringC1ERKS_>
   d47dc:	a82a      	add	r0, sp, #168	; 0xa8
   d47de:	f001 facf 	bl	d5d80 <_ZN6StringD1Ev>
   d47e2:	a826      	add	r0, sp, #152	; 0x98
   d47e4:	f001 facc 	bl	d5d80 <_ZN6StringD1Ev>
   d47e8:	a822      	add	r0, sp, #136	; 0x88
   d47ea:	f001 fac9 	bl	d5d80 <_ZN6StringD1Ev>
   d47ee:	a81e      	add	r0, sp, #120	; 0x78
   d47f0:	f001 fac6 	bl	d5d80 <_ZN6StringD1Ev>
   d47f4:	a81a      	add	r0, sp, #104	; 0x68
   d47f6:	f001 fac3 	bl	d5d80 <_ZN6StringD1Ev>
   d47fa:	a816      	add	r0, sp, #88	; 0x58
   d47fc:	f001 fac0 	bl	d5d80 <_ZN6StringD1Ev>
   d4800:	a812      	add	r0, sp, #72	; 0x48
   d4802:	f001 fabd 	bl	d5d80 <_ZN6StringD1Ev>
   d4806:	a80e      	add	r0, sp, #56	; 0x38
   d4808:	f001 faba 	bl	d5d80 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d480c:	a80a      	add	r0, sp, #40	; 0x28
   d480e:	f001 fab7 	bl	d5d80 <_ZN6StringD1Ev>
   d4812:	a806      	add	r0, sp, #24
   d4814:	f001 fab4 	bl	d5d80 <_ZN6StringD1Ev>
    sendSerialDebug(message);
   d4818:	a902      	add	r1, sp, #8
   d481a:	a82a      	add	r0, sp, #168	; 0xa8
   d481c:	f001 fb36 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4820:	a82a      	add	r0, sp, #168	; 0xa8
   d4822:	f000 fb6b 	bl	d4efc <_Z15sendSerialDebug6String>
   d4826:	a82a      	add	r0, sp, #168	; 0xa8
   d4828:	f001 faaa 	bl	d5d80 <_ZN6StringD1Ev>
    sendHttpRequest(message);
   d482c:	a902      	add	r1, sp, #8
   d482e:	a82a      	add	r0, sp, #168	; 0xa8
   d4830:	f001 fb2c 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4834:	a82a      	add	r0, sp, #168	; 0xa8
   d4836:	f7ff fd01 	bl	d423c <_Z15sendHttpRequest6String>
   d483a:	a82a      	add	r0, sp, #168	; 0xa8
   d483c:	f001 faa0 	bl	d5d80 <_ZN6StringD1Ev>
    sendSerialDebug("After send response");
   d4840:	4918      	ldr	r1, [pc, #96]	; (d48a4 <_Z15responseMessagev+0x1e8>)
   d4842:	a82a      	add	r0, sp, #168	; 0xa8
   d4844:	f001 fae3 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4848:	a82a      	add	r0, sp, #168	; 0xa8
   d484a:	f000 fb57 	bl	d4efc <_Z15sendSerialDebug6String>
   d484e:	a82a      	add	r0, sp, #168	; 0xa8
   d4850:	f001 fa96 	bl	d5d80 <_ZN6StringD1Ev>
    ",sm:" + (String)statusInterval + 
    ",to:" + (String)timeout + 
    ",pu:" + (String)powerUp + 
    ",fd:" + (String)floatDelay +
    ",ri:" + (String)rebootInterval +
    ",Bat:" + (String)fuel.getVCell();
   d4854:	a802      	add	r0, sp, #8
   d4856:	f001 fa93 	bl	d5d80 <_ZN6StringD1Ev>
  setParameter(parameter,value.replace(".",""));
}
/****  validate response to status by sending back new parameters  ****/
void responseMessage()
{
  FuelGauge fuel;
   d485a:	4668      	mov	r0, sp
   d485c:	f001 ff37 	bl	d66ce <_ZN9FuelGaugeD1Ev>
    sendSerialDebug(message);
    sendHttpRequest(message);
    sendSerialDebug("After send response");

  }
}
   d4860:	b02e      	add	sp, #184	; 0xb8
   d4862:	bd10      	pop	{r4, pc}
   d4864:	000d9ea6 	.word	0x000d9ea6
   d4868:	000d9ead 	.word	0x000d9ead
   d486c:	2003dc80 	.word	0x2003dc80
   d4870:	000d9eb2 	.word	0x000d9eb2
   d4874:	2003dc8c 	.word	0x2003dc8c
   d4878:	000d9eb7 	.word	0x000d9eb7
   d487c:	2003dc90 	.word	0x2003dc90
   d4880:	000d9ebc 	.word	0x000d9ebc
   d4884:	2003dc78 	.word	0x2003dc78
   d4888:	000d9ec1 	.word	0x000d9ec1
   d488c:	2003dc7c 	.word	0x2003dc7c
   d4890:	000d9ec6 	.word	0x000d9ec6
   d4894:	2003dc54 	.word	0x2003dc54
   d4898:	000d9ecb 	.word	0x000d9ecb
   d489c:	2003dc88 	.word	0x2003dc88
   d48a0:	000d9ed0 	.word	0x000d9ed0
   d48a4:	000d9ed6 	.word	0x000d9ed6

000d48a8 <_Z13statusMessage6String>:
/****  Every version of code should contain a daily status message  ****/
long int statusMessage(String Version)
{
   d48a8:	b570      	push	{r4, r5, r6, lr}
   d48aa:	b0ba      	sub	sp, #232	; 0xe8
   d48ac:	4604      	mov	r4, r0
  FuelGauge fuel;
   d48ae:	2100      	movs	r1, #0
   d48b0:	a802      	add	r0, sp, #8
   d48b2:	f001 fefd 	bl	d66b0 <_ZN9FuelGaugeC1Eb>
  if (initConnection())
   d48b6:	f7ff fc63 	bl	d4180 <_Z14initConnectionv>
   d48ba:	2800      	cmp	r0, #0
   d48bc:	f000 80e9 	beq.w	d4a92 <_Z13statusMessage6String+0x1ea>
  {
    Particle.syncTime();
   d48c0:	f7ff fc0c 	bl	d40dc <_ZN10CloudClass8syncTimeEv.isra.9>
    delay(2000);
   d48c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d48c8:	f001 fe08 	bl	d64dc <delay>
    CellularSignal sig = Cellular.RSSI();
   d48cc:	4976      	ldr	r1, [pc, #472]	; (d4aa8 <_Z13statusMessage6String+0x200>)
   d48ce:	a830      	add	r0, sp, #192	; 0xc0
   d48d0:	f002 f908 	bl	d6ae4 <_ZN5spark13CellularClass4RSSIEv>
    int rssi = sig.rssi;
    String id = spark_deviceID();
   d48d4:	a804      	add	r0, sp, #16
  if (initConnection())
  {
    Particle.syncTime();
    delay(2000);
    CellularSignal sig = Cellular.RSSI();
    int rssi = sig.rssi;
   d48d6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    String id = spark_deviceID();
   d48d8:	f000 fff4 	bl	d58c4 <spark_deviceID>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d48dc:	a904      	add	r1, sp, #16
   d48de:	a80c      	add	r0, sp, #48	; 0x30
   d48e0:	f001 fad4 	bl	d5e8c <_ZN6StringC1ERKS_>

    String message =  id + ";" + String(Time.now()) + 
   d48e4:	4971      	ldr	r1, [pc, #452]	; (d4aac <_Z13statusMessage6String+0x204>)
   d48e6:	a80c      	add	r0, sp, #48	; 0x30
   d48e8:	f001 fb97 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d48ec:	4606      	mov	r6, r0
   d48ee:	f001 fde4 	bl	d64ba <_ZN9TimeClass3nowEv>
   d48f2:	220a      	movs	r2, #10
   d48f4:	4601      	mov	r1, r0
   d48f6:	a810      	add	r0, sp, #64	; 0x40
   d48f8:	f001 fb18 	bl	d5f2c <_ZN6StringC1Elh>
   d48fc:	a910      	add	r1, sp, #64	; 0x40
   d48fe:	4630      	mov	r0, r6
   d4900:	f001 fb7f 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",Status" +
   d4904:	496a      	ldr	r1, [pc, #424]	; (d4ab0 <_Z13statusMessage6String+0x208>)
   d4906:	f001 fb88 	bl	d601a <_ZplRK15StringSumHelperPKc>
       ",li:" + (String)logInterval + 
   d490a:	496a      	ldr	r1, [pc, #424]	; (d4ab4 <_Z13statusMessage6String+0x20c>)
   d490c:	f001 fb85 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4910:	4b69      	ldr	r3, [pc, #420]	; (d4ab8 <_Z13statusMessage6String+0x210>)
   d4912:	220a      	movs	r2, #10
   d4914:	6819      	ldr	r1, [r3, #0]
   d4916:	4606      	mov	r6, r0
   d4918:	a814      	add	r0, sp, #80	; 0x50
   d491a:	f001 faf4 	bl	d5f06 <_ZN6StringC1Eih>
   d491e:	a914      	add	r1, sp, #80	; 0x50
   d4920:	4630      	mov	r0, r6
   d4922:	f001 fb6e 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",si:" + (String)sendInterval + 
   d4926:	4965      	ldr	r1, [pc, #404]	; (d4abc <_Z13statusMessage6String+0x214>)
   d4928:	f001 fb77 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d492c:	4b64      	ldr	r3, [pc, #400]	; (d4ac0 <_Z13statusMessage6String+0x218>)
   d492e:	220a      	movs	r2, #10
   d4930:	6819      	ldr	r1, [r3, #0]
   d4932:	4606      	mov	r6, r0
   d4934:	a818      	add	r0, sp, #96	; 0x60
   d4936:	f001 fae6 	bl	d5f06 <_ZN6StringC1Eih>
   d493a:	a918      	add	r1, sp, #96	; 0x60
   d493c:	4630      	mov	r0, r6
   d493e:	f001 fb60 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",sm:" + (String)statusInterval + 
   d4942:	4960      	ldr	r1, [pc, #384]	; (d4ac4 <_Z13statusMessage6String+0x21c>)
   d4944:	f001 fb69 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4948:	4b5f      	ldr	r3, [pc, #380]	; (d4ac8 <_Z13statusMessage6String+0x220>)
   d494a:	220a      	movs	r2, #10
   d494c:	6819      	ldr	r1, [r3, #0]
   d494e:	4606      	mov	r6, r0
   d4950:	a81c      	add	r0, sp, #112	; 0x70
   d4952:	f001 fad8 	bl	d5f06 <_ZN6StringC1Eih>
   d4956:	a91c      	add	r1, sp, #112	; 0x70
   d4958:	4630      	mov	r0, r6
   d495a:	f001 fb52 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",to:" + (String)timeout +
   d495e:	495b      	ldr	r1, [pc, #364]	; (d4acc <_Z13statusMessage6String+0x224>)
   d4960:	f001 fb5b 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4964:	4b5a      	ldr	r3, [pc, #360]	; (d4ad0 <_Z13statusMessage6String+0x228>)
   d4966:	220a      	movs	r2, #10
   d4968:	6819      	ldr	r1, [r3, #0]
   d496a:	4606      	mov	r6, r0
   d496c:	a820      	add	r0, sp, #128	; 0x80
   d496e:	f001 faca 	bl	d5f06 <_ZN6StringC1Eih>
   d4972:	a920      	add	r1, sp, #128	; 0x80
   d4974:	4630      	mov	r0, r6
   d4976:	f001 fb44 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",pu:" + (String)powerUp + 
   d497a:	4956      	ldr	r1, [pc, #344]	; (d4ad4 <_Z13statusMessage6String+0x22c>)
   d497c:	f001 fb4d 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4980:	4b55      	ldr	r3, [pc, #340]	; (d4ad8 <_Z13statusMessage6String+0x230>)
   d4982:	220a      	movs	r2, #10
   d4984:	6819      	ldr	r1, [r3, #0]
   d4986:	4606      	mov	r6, r0
   d4988:	a824      	add	r0, sp, #144	; 0x90
   d498a:	f001 fabc 	bl	d5f06 <_ZN6StringC1Eih>
   d498e:	a924      	add	r1, sp, #144	; 0x90
   d4990:	4630      	mov	r0, r6
   d4992:	f001 fb36 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",ver:" + Version +
   d4996:	4951      	ldr	r1, [pc, #324]	; (d4adc <_Z13statusMessage6String+0x234>)
   d4998:	f001 fb3f 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d499c:	4621      	mov	r1, r4
   d499e:	f001 fb30 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",RSSI:" + (String)rssi+
   d49a2:	494f      	ldr	r1, [pc, #316]	; (d4ae0 <_Z13statusMessage6String+0x238>)
   d49a4:	f001 fb39 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d49a8:	220a      	movs	r2, #10
   d49aa:	4604      	mov	r4, r0
   d49ac:	4629      	mov	r1, r5
   d49ae:	a828      	add	r0, sp, #160	; 0xa0
   d49b0:	f001 faa9 	bl	d5f06 <_ZN6StringC1Eih>
   d49b4:	a928      	add	r1, sp, #160	; 0xa0
   d49b6:	4620      	mov	r0, r4
   d49b8:	f001 fb23 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
       ",Bat:" + (String)fuel.getVCell(); 
   d49bc:	4949      	ldr	r1, [pc, #292]	; (d4ae4 <_Z13statusMessage6String+0x23c>)
   d49be:	f001 fb2c 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d49c2:	4604      	mov	r4, r0
   d49c4:	a802      	add	r0, sp, #8
   d49c6:	f001 feb3 	bl	d6730 <_ZN9FuelGauge8getVCellEv>
   d49ca:	2106      	movs	r1, #6
   d49cc:	a82c      	add	r0, sp, #176	; 0xb0
   d49ce:	f001 fad4 	bl	d5f7a <_ZN6StringC1Efi>
   d49d2:	a92c      	add	r1, sp, #176	; 0xb0
   d49d4:	4620      	mov	r0, r4
   d49d6:	f001 fb14 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d49da:	4601      	mov	r1, r0
   d49dc:	a808      	add	r0, sp, #32
   d49de:	f001 fa55 	bl	d5e8c <_ZN6StringC1ERKS_>
   d49e2:	a82c      	add	r0, sp, #176	; 0xb0
   d49e4:	f001 f9cc 	bl	d5d80 <_ZN6StringD1Ev>
   d49e8:	a828      	add	r0, sp, #160	; 0xa0
   d49ea:	f001 f9c9 	bl	d5d80 <_ZN6StringD1Ev>
   d49ee:	a824      	add	r0, sp, #144	; 0x90
   d49f0:	f001 f9c6 	bl	d5d80 <_ZN6StringD1Ev>
   d49f4:	a820      	add	r0, sp, #128	; 0x80
   d49f6:	f001 f9c3 	bl	d5d80 <_ZN6StringD1Ev>
   d49fa:	a81c      	add	r0, sp, #112	; 0x70
   d49fc:	f001 f9c0 	bl	d5d80 <_ZN6StringD1Ev>
   d4a00:	a818      	add	r0, sp, #96	; 0x60
   d4a02:	f001 f9bd 	bl	d5d80 <_ZN6StringD1Ev>
   d4a06:	a814      	add	r0, sp, #80	; 0x50
   d4a08:	f001 f9ba 	bl	d5d80 <_ZN6StringD1Ev>

    request.hostname = hostname;
   d4a0c:	4c36      	ldr	r4, [pc, #216]	; (d4ae8 <_Z13statusMessage6String+0x240>)
   d4a0e:	a810      	add	r0, sp, #64	; 0x40
   d4a10:	f001 f9b6 	bl	d5d80 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4a14:	a80c      	add	r0, sp, #48	; 0x30
   d4a16:	f001 f9b3 	bl	d5d80 <_ZN6StringD1Ev>
   d4a1a:	4934      	ldr	r1, [pc, #208]	; (d4aec <_Z13statusMessage6String+0x244>)
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	f001 fa26 	bl	d5e6e <_ZN6StringaSERKS_>
    request.port = hostport;
   d4a22:	4b33      	ldr	r3, [pc, #204]	; (d4af0 <_Z13statusMessage6String+0x248>)
    request.path = hostpath;
   d4a24:	4933      	ldr	r1, [pc, #204]	; (d4af4 <_Z13statusMessage6String+0x24c>)
       ",ver:" + Version +
       ",RSSI:" + (String)rssi+
       ",Bat:" + (String)fuel.getVCell(); 

    request.hostname = hostname;
    request.port = hostport;
   d4a26:	681b      	ldr	r3, [r3, #0]
   d4a28:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = hostpath;
   d4a2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4a2e:	f001 fa1e 	bl	d5e6e <_ZN6StringaSERKS_>
    request.body = message;
   d4a32:	a908      	add	r1, sp, #32
   d4a34:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4a38:	f001 fa19 	bl	d5e6e <_ZN6StringaSERKS_>
    sendSerialDebug(message);
   d4a3c:	a908      	add	r1, sp, #32
   d4a3e:	a82c      	add	r0, sp, #176	; 0xb0
   d4a40:	f001 fa24 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4a44:	a82c      	add	r0, sp, #176	; 0xb0
   d4a46:	f000 fa59 	bl	d4efc <_Z15sendSerialDebug6String>
   d4a4a:	a82c      	add	r0, sp, #176	; 0xb0
   d4a4c:	f001 f998 	bl	d5d80 <_ZN6StringD1Ev>
   d4a50:	4b29      	ldr	r3, [pc, #164]	; (d4af8 <_Z13statusMessage6String+0x250>)
   d4a52:	4a2a      	ldr	r2, [pc, #168]	; (d4afc <_Z13statusMessage6String+0x254>)
   d4a54:	9300      	str	r3, [sp, #0]
   d4a56:	4621      	mov	r1, r4
   d4a58:	4b29      	ldr	r3, [pc, #164]	; (d4b00 <_Z13statusMessage6String+0x258>)
   d4a5a:	482a      	ldr	r0, [pc, #168]	; (d4b04 <_Z13statusMessage6String+0x25c>)
   d4a5c:	f000 f8f8 	bl	d4c50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
    http.get(request, response, headers);
    String resp = response.body;
   d4a60:	4929      	ldr	r1, [pc, #164]	; (d4b08 <_Z13statusMessage6String+0x260>)
   d4a62:	a828      	add	r0, sp, #160	; 0xa0
   d4a64:	f001 fa12 	bl	d5e8c <_ZN6StringC1ERKS_>
    parseString(resp);
   d4a68:	a928      	add	r1, sp, #160	; 0xa0
   d4a6a:	a82c      	add	r0, sp, #176	; 0xb0
   d4a6c:	f001 fa0e 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4a70:	a82c      	add	r0, sp, #176	; 0xb0
   d4a72:	f7ff fd59 	bl	d4528 <_Z11parseString6String>
   d4a76:	a82c      	add	r0, sp, #176	; 0xb0
   d4a78:	f001 f982 	bl	d5d80 <_ZN6StringD1Ev>
    responseMessage();
   d4a7c:	f7ff fe1e 	bl	d46bc <_Z15responseMessagev>
    request.port = hostport;
    request.path = hostpath;
    request.body = message;
    sendSerialDebug(message);
    http.get(request, response, headers);
    String resp = response.body;
   d4a80:	a828      	add	r0, sp, #160	; 0xa0
   d4a82:	f001 f97d 	bl	d5d80 <_ZN6StringD1Ev>
       ",sm:" + (String)statusInterval + 
       ",to:" + (String)timeout +
       ",pu:" + (String)powerUp + 
       ",ver:" + Version +
       ",RSSI:" + (String)rssi+
       ",Bat:" + (String)fuel.getVCell(); 
   d4a86:	a808      	add	r0, sp, #32
   d4a88:	f001 f97a 	bl	d5d80 <_ZN6StringD1Ev>
  {
    Particle.syncTime();
    delay(2000);
    CellularSignal sig = Cellular.RSSI();
    int rssi = sig.rssi;
    String id = spark_deviceID();
   d4a8c:	a804      	add	r0, sp, #16
   d4a8e:	f001 f977 	bl	d5d80 <_ZN6StringD1Ev>
    http.get(request, response, headers);
    String resp = response.body;
    parseString(resp);
    responseMessage();
  }
  long int lastStatusMessage = Time.now() + 60;
   d4a92:	f001 fd12 	bl	d64ba <_ZN9TimeClass3nowEv>
   d4a96:	4604      	mov	r4, r0
  }
}
/****  Every version of code should contain a daily status message  ****/
long int statusMessage(String Version)
{
  FuelGauge fuel;
   d4a98:	a802      	add	r0, sp, #8
   d4a9a:	f001 fe18 	bl	d66ce <_ZN9FuelGaugeD1Ev>
    parseString(resp);
    responseMessage();
  }
  long int lastStatusMessage = Time.now() + 60;
  return lastStatusMessage;
}
   d4a9e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4aa2:	b03a      	add	sp, #232	; 0xe8
   d4aa4:	bd70      	pop	{r4, r5, r6, pc}
   d4aa6:	bf00      	nop
   d4aa8:	2003e2b8 	.word	0x2003e2b8
   d4aac:	000d9de0 	.word	0x000d9de0
   d4ab0:	000d9eea 	.word	0x000d9eea
   d4ab4:	000d9ead 	.word	0x000d9ead
   d4ab8:	2003dc80 	.word	0x2003dc80
   d4abc:	000d9eb2 	.word	0x000d9eb2
   d4ac0:	2003dc8c 	.word	0x2003dc8c
   d4ac4:	000d9eb7 	.word	0x000d9eb7
   d4ac8:	2003dc90 	.word	0x2003dc90
   d4acc:	000d9ebc 	.word	0x000d9ebc
   d4ad0:	2003dc78 	.word	0x2003dc78
   d4ad4:	000d9ec1 	.word	0x000d9ec1
   d4ad8:	2003dc7c 	.word	0x2003dc7c
   d4adc:	000d9ef2 	.word	0x000d9ef2
   d4ae0:	000d9ef8 	.word	0x000d9ef8
   d4ae4:	000d9ed0 	.word	0x000d9ed0
   d4ae8:	2003dd94 	.word	0x2003dd94
   d4aec:	2003dd84 	.word	0x2003dd84
   d4af0:	2003dc84 	.word	0x2003dc84
   d4af4:	2003dd60 	.word	0x2003dd60
   d4af8:	000d9de2 	.word	0x000d9de2
   d4afc:	2003dd70 	.word	0x2003dd70
   d4b00:	2003dc58 	.word	0x2003dc58
   d4b04:	2003dde4 	.word	0x2003dde4
   d4b08:	2003dd74 	.word	0x2003dd74

000d4b0c <_Z12initSyncTimev>:


void initSyncTime()
{
   d4b0c:	b508      	push	{r3, lr}
  initConnection();
   d4b0e:	f7ff fb37 	bl	d4180 <_Z14initConnectionv>
  Particle.syncTime();
}
   d4b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


void initSyncTime()
{
  initConnection();
  Particle.syncTime();
   d4b16:	f7ff bae1 	b.w	d40dc <_ZN10CloudClass8syncTimeEv.isra.9>
	...

000d4b1c <_GLOBAL__sub_I_powerUp>:
}
   d4b1c:	b570      	push	{r4, r5, r6, lr}
    { "Content-Type", "application/json" },
    { "Authorization" , "Token yWNjZXNzM" },
    { "Accept" , "*/*"},
    { NULL, NULL } 
};
HttpClient http;
   d4b1e:	4d23      	ldr	r5, [pc, #140]	; (d4bac <_GLOBAL__sub_I_powerUp+0x90>)
   d4b20:	4c23      	ldr	r4, [pc, #140]	; (d4bb0 <_GLOBAL__sub_I_powerUp+0x94>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d4b22:	4e24      	ldr	r6, [pc, #144]	; (d4bb4 <_GLOBAL__sub_I_powerUp+0x98>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4b24:	f000 fc60 	bl	d53e8 <HAL_Pin_Map>
   d4b28:	4628      	mov	r0, r5
   d4b2a:	f000 f859 	bl	d4be0 <_ZN10HttpClientC1Ev>
   d4b2e:	4628      	mov	r0, r5
   d4b30:	4d21      	ldr	r5, [pc, #132]	; (d4bb8 <_GLOBAL__sub_I_powerUp+0x9c>)
   d4b32:	4922      	ldr	r1, [pc, #136]	; (d4bbc <_GLOBAL__sub_I_powerUp+0xa0>)
   d4b34:	4622      	mov	r2, r4
   d4b36:	f002 fe57 	bl	d77e8 <__aeabi_atexit>
   d4b3a:	4631      	mov	r1, r6
   d4b3c:	4628      	mov	r0, r5
   d4b3e:	f001 f966 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4b42:	f105 0010 	add.w	r0, r5, #16
   d4b46:	f001 fecb 	bl	d68e0 <_ZN9IPAddressC1Ev>
   d4b4a:	4631      	mov	r1, r6
   d4b4c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   d4b50:	f001 f95d 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4b54:	4631      	mov	r1, r6
   d4b56:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   d4b5a:	f001 f958 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t request;
   d4b5e:	4628      	mov	r0, r5
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4b60:	4d17      	ldr	r5, [pc, #92]	; (d4bc0 <_GLOBAL__sub_I_powerUp+0xa4>)
   d4b62:	4918      	ldr	r1, [pc, #96]	; (d4bc4 <_GLOBAL__sub_I_powerUp+0xa8>)
   d4b64:	4622      	mov	r2, r4
   d4b66:	f002 fe3f 	bl	d77e8 <__aeabi_atexit>
   d4b6a:	4631      	mov	r1, r6
   d4b6c:	1d28      	adds	r0, r5, #4
   d4b6e:	f001 f94e 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d4b72:	4628      	mov	r0, r5

String hostname = "ws.uscubed.com";
   d4b74:	4d14      	ldr	r5, [pc, #80]	; (d4bc8 <_GLOBAL__sub_I_powerUp+0xac>)
    { "Accept" , "*/*"},
    { NULL, NULL } 
};
HttpClient http;
http_request_t request;
http_response_t response;
   d4b76:	4915      	ldr	r1, [pc, #84]	; (d4bcc <_GLOBAL__sub_I_powerUp+0xb0>)

String hostname = "ws.uscubed.com";
   d4b78:	4e15      	ldr	r6, [pc, #84]	; (d4bd0 <_GLOBAL__sub_I_powerUp+0xb4>)
    { "Accept" , "*/*"},
    { NULL, NULL } 
};
HttpClient http;
http_request_t request;
http_response_t response;
   d4b7a:	4622      	mov	r2, r4
   d4b7c:	f002 fe34 	bl	d77e8 <__aeabi_atexit>

String hostname = "ws.uscubed.com";
   d4b80:	4914      	ldr	r1, [pc, #80]	; (d4bd4 <_GLOBAL__sub_I_powerUp+0xb8>)
   d4b82:	4628      	mov	r0, r5
   d4b84:	f001 f943 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4b88:	4628      	mov	r0, r5
int hostport = 80;
String hostpath = "/ParticleDirect.aspx";
   d4b8a:	4d13      	ldr	r5, [pc, #76]	; (d4bd8 <_GLOBAL__sub_I_powerUp+0xbc>)
};
HttpClient http;
http_request_t request;
http_response_t response;

String hostname = "ws.uscubed.com";
   d4b8c:	4622      	mov	r2, r4
   d4b8e:	4631      	mov	r1, r6
   d4b90:	f002 fe2a 	bl	d77e8 <__aeabi_atexit>
int hostport = 80;
String hostpath = "/ParticleDirect.aspx";
   d4b94:	4911      	ldr	r1, [pc, #68]	; (d4bdc <_GLOBAL__sub_I_powerUp+0xc0>)
   d4b96:	4628      	mov	r0, r5
   d4b98:	f001 f939 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4b9c:	4622      	mov	r2, r4
   d4b9e:	4631      	mov	r1, r6
   d4ba0:	4628      	mov	r0, r5

void initSyncTime()
{
  initConnection();
  Particle.syncTime();
}
   d4ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
http_request_t request;
http_response_t response;

String hostname = "ws.uscubed.com";
int hostport = 80;
String hostpath = "/ParticleDirect.aspx";
   d4ba6:	f002 be1f 	b.w	d77e8 <__aeabi_atexit>
   d4baa:	bf00      	nop
   d4bac:	2003dde4 	.word	0x2003dde4
   d4bb0:	2003dd58 	.word	0x2003dd58
   d4bb4:	000d9f75 	.word	0x000d9f75
   d4bb8:	2003dd94 	.word	0x2003dd94
   d4bbc:	000d4131 	.word	0x000d4131
   d4bc0:	2003dd70 	.word	0x2003dd70
   d4bc4:	000d40c1 	.word	0x000d40c1
   d4bc8:	2003dd84 	.word	0x2003dd84
   d4bcc:	000d40b3 	.word	0x000d40b3
   d4bd0:	000d5d81 	.word	0x000d5d81
   d4bd4:	000d9eff 	.word	0x000d9eff
   d4bd8:	2003dd60 	.word	0x2003dd60
   d4bdc:	000d9f0e 	.word	0x000d9f0e

000d4be0 <_ZN10HttpClientC1Ev>:
static const uint16_t DEFAULT_TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4be0:	b510      	push	{r4, lr}
   d4be2:	4604      	mov	r4, r0
   d4be4:	f002 fc46 	bl	d7474 <_ZN9TCPClientC1Ev>
{

}
   d4be8:	4620      	mov	r0, r4
   d4bea:	bd10      	pop	{r4, pc}

000d4bec <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4bec:	b538      	push	{r3, r4, r5, lr}
   d4bee:	4604      	mov	r4, r0
   d4bf0:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d4bf2:	f001 fb37 	bl	d6264 <_ZN5Print5printEPKc>
    client.print(": ");
   d4bf6:	4905      	ldr	r1, [pc, #20]	; (d4c0c <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	f001 fb33 	bl	d6264 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4bfe:	4629      	mov	r1, r5
   d4c00:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d4c06:	f001 bb40 	b.w	d628a <_ZN5Print7printlnEPKc>
   d4c0a:	bf00      	nop
   d4c0c:	000da152 	.word	0x000da152

000d4c10 <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d4c10:	b538      	push	{r3, r4, r5, lr}
   d4c12:	4605      	mov	r5, r0
   d4c14:	4614      	mov	r4, r2
    client.print(aHeaderName);
   d4c16:	f001 fb25 	bl	d6264 <_ZN5Print5printEPKc>
    client.print(": ");
   d4c1a:	490b      	ldr	r1, [pc, #44]	; (d4c48 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   d4c1c:	4628      	mov	r0, r5
   d4c1e:	f001 fb21 	bl	d6264 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4c22:	2c00      	cmp	r4, #0
   d4c24:	da05      	bge.n	d4c32 <_ZN10HttpClient10sendHeaderEPKci+0x22>
            t = print('-');
   d4c26:	212d      	movs	r1, #45	; 0x2d
   d4c28:	4628      	mov	r0, r5
   d4c2a:	f001 fb1f 	bl	d626c <_ZN5Print5printEc>
            val = -n;
   d4c2e:	4261      	negs	r1, r4
   d4c30:	e000      	b.n	d4c34 <_ZN10HttpClient10sendHeaderEPKci+0x24>
        } else {
            val = n;
   d4c32:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4c34:	4628      	mov	r0, r5
   d4c36:	220a      	movs	r2, #10
   d4c38:	f001 fb31 	bl	d629e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4c3c:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c42:	f001 bb16 	b.w	d6272 <_ZN5Print7printlnEv>
   d4c46:	bf00      	nop
   d4c48:	000da152 	.word	0x000da152

000d4c4c <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
   d4c4c:	f000 bbcc 	b.w	d53e8 <HAL_Pin_Map>

000d4c50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c54:	460d      	mov	r5, r1
   d4c56:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4c58:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4c5c:	b089      	sub	sp, #36	; 0x24
   d4c5e:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4c60:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4c62:	2100      	movs	r1, #0
   d4c64:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4c66:	4692      	mov	sl, r2
   d4c68:	f001 f9e9 	bl	d603e <_ZNK6String6equalsEPKc>
   d4c6c:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4c70:	b960      	cbnz	r0, d4c8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d4c72:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4c74:	f1bc 0f00 	cmp.w	ip, #0
   d4c78:	d002      	beq.n	d4c80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d4c7a:	fa1f f28c 	uxth.w	r2, ip
   d4c7e:	e000      	b.n	d4c82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d4c80:	2250      	movs	r2, #80	; 0x50
   d4c82:	2300      	movs	r3, #0
   d4c84:	4620      	mov	r0, r4
   d4c86:	f002 fa45 	bl	d7114 <_ZN9TCPClient7connectEPKctm>
   d4c8a:	e011      	b.n	d4cb0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x60>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4c8c:	4b6f      	ldr	r3, [pc, #444]	; (d4e4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>)
   d4c8e:	9302      	str	r3, [sp, #8]
   d4c90:	f105 0e14 	add.w	lr, r5, #20
   d4c94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   d4c98:	af03      	add	r7, sp, #12
   d4c9a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   d4c9c:	f8de 3000 	ldr.w	r3, [lr]
   d4ca0:	703b      	strb	r3, [r7, #0]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4ca2:	fa1f f28c 	uxth.w	r2, ip
   d4ca6:	2300      	movs	r3, #0
   d4ca8:	a902      	add	r1, sp, #8
   d4caa:	4620      	mov	r0, r4
   d4cac:	f002 fab4 	bl	d7218 <_ZN9TCPClient7connectE9IPAddresstm>
   d4cb0:	3000      	adds	r0, #0
   d4cb2:	bf18      	it	ne
   d4cb4:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d4cb6:	b918      	cbnz	r0, d4cc0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x70>
        client.stop();
   d4cb8:	4620      	mov	r0, r4
   d4cba:	f002 fb27 	bl	d730c <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d4cbe:	e0c1      	b.n	d4e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f4>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d4cc0:	9912      	ldr	r1, [sp, #72]	; 0x48
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	f001 face 	bl	d6264 <_ZN5Print5printEPKc>
    client.print(" ");
   d4cc8:	4961      	ldr	r1, [pc, #388]	; (d4e50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x200>)
   d4cca:	4620      	mov	r0, r4
   d4ccc:	f001 faca 	bl	d6264 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4cd0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	f001 fac6 	bl	d6264 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4cd8:	495e      	ldr	r1, [pc, #376]	; (d4e54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x204>)
   d4cda:	4620      	mov	r0, r4
   d4cdc:	f001 fac2 	bl	d6264 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4ce0:	495d      	ldr	r1, [pc, #372]	; (d4e58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>)
   d4ce2:	4a5e      	ldr	r2, [pc, #376]	; (d4e5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>)
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	f7ff ff81 	bl	d4bec <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4cea:	2100      	movs	r1, #0
   d4cec:	4628      	mov	r0, r5
   d4cee:	f001 f9a6 	bl	d603e <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d4cf2:	b920      	cbnz	r0, d4cfe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xae>
        sendHeader("HOST", aRequest.hostname.c_str());
   d4cf4:	682a      	ldr	r2, [r5, #0]
   d4cf6:	495a      	ldr	r1, [pc, #360]	; (d4e60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	f7ff ff77 	bl	d4bec <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d4cfe:	f105 073c 	add.w	r7, r5, #60	; 0x3c
   d4d02:	2100      	movs	r1, #0
   d4d04:	4638      	mov	r0, r7
   d4d06:	f001 f99a 	bl	d603e <_ZNK6String6equalsEPKc>
   d4d0a:	b908      	cbnz	r0, d4d10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc0>
        sendHeader("Content-Length", (aRequest.body).length());
   d4d0c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d4d0e:	e005      	b.n	d4d1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xcc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4d10:	4954      	ldr	r1, [pc, #336]	; (d4e64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d4d12:	9812      	ldr	r0, [sp, #72]	; 0x48
   d4d14:	f003 fea8 	bl	d8a68 <strcmp>
   d4d18:	4602      	mov	r2, r0
   d4d1a:	b918      	cbnz	r0, d4d24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd4>
        sendHeader("Content-Length", 0);
   d4d1c:	4952      	ldr	r1, [pc, #328]	; (d4e68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d4d1e:	4620      	mov	r0, r4
   d4d20:	f7ff ff76 	bl	d4c10 <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d4d24:	b15e      	cbz	r6, d4d3e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d4d26:	6831      	ldr	r1, [r6, #0]
   d4d28:	b149      	cbz	r1, d4d3e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        {
            if (headers[i].value != NULL) {
   d4d2a:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4d2c:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d4d2e:	b112      	cbz	r2, d4d36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe6>
                sendHeader(headers[i].header, headers[i].value);
   d4d30:	f7ff ff5c 	bl	d4bec <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4d34:	e001      	b.n	d4d3a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xea>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d4d36:	f001 faa8 	bl	d628a <_ZN5Print7printlnEPKc>
   d4d3a:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d4d3c:	e7f3      	b.n	d4d26 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd6>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d4d3e:	4620      	mov	r0, r4
   d4d40:	f001 fa97 	bl	d6272 <_ZN5Print7printlnEv>
    client.flush();
   d4d44:	4620      	mov	r0, r4
   d4d46:	f002 f90d 	bl	d6f64 <_ZN9TCPClient5flushEv>
   d4d4a:	2100      	movs	r1, #0
   d4d4c:	4638      	mov	r0, r7
   d4d4e:	f001 f976 	bl	d603e <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d4d52:	b918      	cbnz	r0, d4d5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x10c>
        client.println(aRequest.body);
   d4d54:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d4d56:	4620      	mov	r0, r4
   d4d58:	f001 fa97 	bl	d628a <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d4d5c:	f104 0b1c 	add.w	fp, r4, #28
   d4d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4d64:	2100      	movs	r1, #0
   d4d66:	4658      	mov	r0, fp
   d4d68:	f003 fe4e 	bl	d8a08 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d6c:	f000 fb7c 	bl	d5468 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
//    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d4d70:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
   d4d74:	9000      	str	r0, [sp, #0]
   d4d76:	f241 3388 	movw	r3, #5000	; 0x1388
    char lastChar = 0;
   d4d7a:	2600      	movs	r6, #0
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
//    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d4d7c:	f1b8 0f00 	cmp.w	r8, #0
   d4d80:	bf08      	it	eq
   d4d82:	4698      	moveq	r8, r3
    char lastChar = 0;
    bool inHeaders = true;
   d4d84:	f04f 0901 	mov.w	r9, #1
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d4d88:	4635      	mov	r5, r6
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d4d8a:	4620      	mov	r0, r4
   d4d8c:	f002 fad6 	bl	d733c <_ZN9TCPClient9availableEv>
   d4d90:	b3c0      	cbz	r0, d4e04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b4>
            char c = client.read();
   d4d92:	4620      	mov	r0, r4
   d4d94:	f002 f97b 	bl	d708e <_ZN9TCPClient4readEv>
   d4d98:	b2c7      	uxtb	r7, r0
   d4d9a:	f000 fb65 	bl	d5468 <HAL_Timer_Get_Milli_Seconds>
   d4d9e:	9000      	str	r0, [sp, #0]
                #endif

                break;
            }

            if (inHeaders) {
   d4da0:	f1b9 0f00 	cmp.w	r9, #0
   d4da4:	d018      	beq.n	d4dd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
                if ((c == '\n') && (lastChar == '\n')) {
   d4da6:	2f0a      	cmp	r7, #10
   d4da8:	d111      	bne.n	d4dce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
   d4daa:	2e0a      	cmp	r6, #10
   d4dac:	d113      	bne.n	d4dd6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d4dae:	f104 0025 	add.w	r0, r4, #37	; 0x25
   d4db2:	f003 fce1 	bl	d8778 <atoi>

                    memset(&buffer[0], 0, sizeof(buffer));
                    bufferPosition = 0;
                    inHeaders = false;
   d4db6:	f04f 0900 	mov.w	r9, #0
            }

            if (inHeaders) {
                if ((c == '\n') && (lastChar == '\n')) {
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d4dba:	f8ca 0000 	str.w	r0, [sl]

                    memset(&buffer[0], 0, sizeof(buffer));
   d4dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4dc2:	2100      	movs	r1, #0
   d4dc4:	4658      	mov	r0, fp
   d4dc6:	f003 fe1f 	bl	d8a08 <memset>
                    bufferPosition = 0;
   d4dca:	464d      	mov	r5, r9
                    #ifdef LOGGING
                    Serial.print("\r\nHttpClient>\tEnd of HTTP Headers (");
                    Serial.print(aResponse.status);
                    Serial.println(")");
                    #endif
                    continue;
   d4dcc:	e7dd      	b.n	d4d8a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13a>
                } else if (c != '\r') {
   d4dce:	2f0d      	cmp	r7, #13
   d4dd0:	bf18      	it	ne
   d4dd2:	463e      	movne	r6, r7
   d4dd4:	e000      	b.n	d4dd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
   d4dd6:	463e      	mov	r6, r7
                    lastChar = c;
                }
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d4dd8:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d4ddc:	429d      	cmp	r5, r3
   d4dde:	d802      	bhi.n	d4de6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x196>
                buffer[bufferPosition] = c;
   d4de0:	1963      	adds	r3, r4, r5
   d4de2:	771f      	strb	r7, [r3, #28]
   d4de4:	e00c      	b.n	d4e00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4de6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d4dea:	429d      	cmp	r5, r3
   d4dec:	d108      	bne.n	d4e00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4dee:	f04f 0300 	mov.w	r3, #0
   d4df2:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d4df6:	4620      	mov	r0, r4
   d4df8:	f002 fa88 	bl	d730c <_ZN9TCPClient4stopEv>
                error = true;
   d4dfc:	2701      	movs	r7, #1

                #ifdef LOGGING
                Serial.println("\r\nHttpClient>\tError: Response body larger than buffer.");
                #endif
                break;
   d4dfe:	e002      	b.n	d4e06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
            }
            bufferPosition++;
   d4e00:	3501      	adds	r5, #1
   d4e02:	e7c2      	b.n	d4d8a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13a>
   d4e04:	4607      	mov	r7, r0
   d4e06:	f000 fb2f 	bl	d5468 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > actualTimeout;
   d4e0a:	9b00      	ldr	r3, [sp, #0]
   d4e0c:	1ac3      	subs	r3, r0, r3
   d4e0e:	9301      	str	r3, [sp, #4]

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d4e10:	b927      	cbnz	r7, d4e1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1cc>
   d4e12:	4543      	cmp	r3, r8
   d4e14:	d802      	bhi.n	d4e1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1cc>
            delay(200);
   d4e16:	20c8      	movs	r0, #200	; 0xc8
   d4e18:	f001 fb60 	bl	d64dc <delay>
        }
    } while (client.connected() && !timeout && !error);
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	f002 f8a2 	bl	d6f66 <_ZN9TCPClient9connectedEv>
   d4e22:	b120      	cbz	r0, d4e2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1de>
   d4e24:	9b01      	ldr	r3, [sp, #4]
   d4e26:	4543      	cmp	r3, r8
   d4e28:	d801      	bhi.n	d4e2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1de>
   d4e2a:	2f00      	cmp	r7, #0
   d4e2c:	d0ad      	beq.n	d4d8a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13a>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d4e2e:	4620      	mov	r0, r4
   d4e30:	f002 fa6c 	bl	d730c <_ZN9TCPClient4stopEv>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(aResponse.status);
    #endif

    if (inHeaders) {
   d4e34:	f1b9 0f00 	cmp.w	r9, #0
   d4e38:	d104      	bne.n	d4e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f4>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = buffer;
   d4e3a:	4659      	mov	r1, fp
   d4e3c:	f10a 0004 	add.w	r0, sl, #4
   d4e40:	f001 f83f 	bl	d5ec2 <_ZN6StringaSEPKc>
}
   d4e44:	b009      	add	sp, #36	; 0x24
   d4e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e4a:	bf00      	nop
   d4e4c:	000da20c 	.word	0x000da20c
   d4e50:	000da14e 	.word	0x000da14e
   d4e54:	000d9f6a 	.word	0x000d9f6a
   d4e58:	000d9f7c 	.word	0x000d9f7c
   d4e5c:	000d9f76 	.word	0x000d9f76
   d4e60:	000d9f87 	.word	0x000d9f87
   d4e64:	000d9f9b 	.word	0x000d9f9b
   d4e68:	000d9f8c 	.word	0x000d9f8c

000d4e6c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e6c:	b510      	push	{r4, lr}
   d4e6e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4e70:	6800      	ldr	r0, [r0, #0]
   d4e72:	b108      	cbz	r0, d4e78 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4e74:	f000 fd4e 	bl	d5914 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e78:	4620      	mov	r0, r4
   d4e7a:	bd10      	pop	{r4, pc}

000d4e7c <_ZN11SystemClass11sleepResultEv>:
    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    // FIXME: SystemSleepResult
    SleepResult sleepResult() {
   d4e7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d4e7e:	4b1e      	ldr	r3, [pc, #120]	; (d4ef8 <_ZN11SystemClass11sleepResultEv+0x7c>)
   d4e80:	781d      	ldrb	r5, [r3, #0]
    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    // FIXME: SystemSleepResult
    SleepResult sleepResult() {
   d4e82:	4606      	mov	r6, r0
   d4e84:	460c      	mov	r4, r1
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d4e86:	b9b5      	cbnz	r5, d4eb6 <_ZN11SystemClass11sleepResultEv+0x3a>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d4e88:	a802      	add	r0, sp, #8
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
   d4e8a:	2201      	movs	r2, #1
   d4e8c:	701a      	strb	r2, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d4e8e:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4e92:	462a      	mov	r2, r5
   d4e94:	4629      	mov	r1, r5
   d4e96:	f000 fb0f 	bl	d54b8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4e9a:	9b01      	ldr	r3, [sp, #4]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d4e9c:	2b1e      	cmp	r3, #30
   d4e9e:	d10a      	bne.n	d4eb6 <_ZN11SystemClass11sleepResultEv+0x3a>
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d4ea0:	2303      	movs	r3, #3
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4ea2:	6820      	ldr	r0, [r4, #0]
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d4ea4:	71a3      	strb	r3, [r4, #6]
   d4ea6:	2308      	movs	r3, #8
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
   d4ea8:	80a5      	strh	r5, [r4, #4]
        compatResult_ = result.compatResult_;
   d4eaa:	8125      	strh	r5, [r4, #8]
   d4eac:	8163      	strh	r3, [r4, #10]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4eae:	b110      	cbz	r0, d4eb6 <_ZN11SystemClass11sleepResultEv+0x3a>
            free(wakeupSource_);
   d4eb0:	f000 fd30 	bl	d5914 <free>
            wakeupSource_ = nullptr;
   d4eb4:	6025      	str	r5, [r4, #0]
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d4eb6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   d4eba:	b90b      	cbnz	r3, d4ec0 <_ZN11SystemClass11sleepResultEv+0x44>
   d4ebc:	6822      	ldr	r2, [r4, #0]
   d4ebe:	b19a      	cbz	r2, d4ee8 <_ZN11SystemClass11sleepResultEv+0x6c>
   d4ec0:	6821      	ldr	r1, [r4, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d4ec2:	b159      	cbz	r1, d4edc <_ZN11SystemClass11sleepResultEv+0x60>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d4ec4:	888a      	ldrh	r2, [r1, #4]
   d4ec6:	2a01      	cmp	r2, #1
   d4ec8:	d003      	beq.n	d4ed2 <_ZN11SystemClass11sleepResultEv+0x56>
   d4eca:	2a04      	cmp	r2, #4
   d4ecc:	d106      	bne.n	d4edc <_ZN11SystemClass11sleepResultEv+0x60>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d4ece:	2202      	movs	r2, #2
   d4ed0:	e005      	b.n	d4ede <_ZN11SystemClass11sleepResultEv+0x62>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d4ed2:	8989      	ldrh	r1, [r1, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d4ed4:	8161      	strh	r1, [r4, #10]
   d4ed6:	71a2      	strb	r2, [r4, #6]
   d4ed8:	8123      	strh	r3, [r4, #8]
   d4eda:	e005      	b.n	d4ee8 <_ZN11SystemClass11sleepResultEv+0x6c>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d4edc:	2204      	movs	r2, #4
   d4ede:	8123      	strh	r3, [r4, #8]
   d4ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4ee4:	71a2      	strb	r2, [r4, #6]
   d4ee6:	8163      	strh	r3, [r4, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d4ee8:	f854 3f06 	ldr.w	r3, [r4, #6]!
   d4eec:	6033      	str	r3, [r6, #0]
   d4eee:	88a3      	ldrh	r3, [r4, #4]
   d4ef0:	80b3      	strh	r3, [r6, #4]
                // Woken up from standby mode
                systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP));
            }
        }
        return systemSleepResult_;
    }
   d4ef2:	4630      	mov	r0, r6
   d4ef4:	b002      	add	sp, #8
   d4ef6:	bd70      	pop	{r4, r5, r6, pc}
   d4ef8:	2003e200 	.word	0x2003e200

000d4efc <_Z15sendSerialDebug6String>:

}


void sendSerialDebug(String message)
{
   d4efc:	b570      	push	{r4, r5, r6, lr}
  if (serialDebug)
  {
  message.replace(",","-");
   d4efe:	4c30      	ldr	r4, [pc, #192]	; (d4fc0 <_Z15sendSerialDebug6String+0xc4>)

}


void sendSerialDebug(String message)
{
   d4f00:	b090      	sub	sp, #64	; 0x40
   d4f02:	4605      	mov	r5, r0
  if (serialDebug)
  {
  message.replace(",","-");
   d4f04:	4621      	mov	r1, r4
   d4f06:	a808      	add	r0, sp, #32
   d4f08:	f000 ff81 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f0c:	492d      	ldr	r1, [pc, #180]	; (d4fc4 <_Z15sendSerialDebug6String+0xc8>)
   d4f0e:	a80c      	add	r0, sp, #48	; 0x30
   d4f10:	f000 ff7d 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f14:	aa0c      	add	r2, sp, #48	; 0x30
   d4f16:	a908      	add	r1, sp, #32
   d4f18:	4628      	mov	r0, r5
   d4f1a:	f001 f8d4 	bl	d60c6 <_ZN6String7replaceERKS_S1_>
   d4f1e:	a80c      	add	r0, sp, #48	; 0x30
   d4f20:	f000 ff2e 	bl	d5d80 <_ZN6StringD1Ev>
   d4f24:	a808      	add	r0, sp, #32
   d4f26:	f000 ff2b 	bl	d5d80 <_ZN6StringD1Ev>
  String sparkID = spark_deviceID() + ",";
   d4f2a:	a808      	add	r0, sp, #32
   d4f2c:	f000 fcca 	bl	d58c4 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4f30:	a908      	add	r1, sp, #32
   d4f32:	a80c      	add	r0, sp, #48	; 0x30
   d4f34:	f000 ffaa 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4f38:	4621      	mov	r1, r4
   d4f3a:	a80c      	add	r0, sp, #48	; 0x30
   d4f3c:	f001 f86d 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4f40:	4601      	mov	r1, r0
   d4f42:	4668      	mov	r0, sp
   d4f44:	f000 ffa2 	bl	d5e8c <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4f48:	a80c      	add	r0, sp, #48	; 0x30
   d4f4a:	f000 ff19 	bl	d5d80 <_ZN6StringD1Ev>
   d4f4e:	a808      	add	r0, sp, #32
   d4f50:	f000 ff16 	bl	d5d80 <_ZN6StringD1Ev>
  String time = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S,");
   d4f54:	f001 fab1 	bl	d64ba <_ZN9TimeClass3nowEv>
   d4f58:	4b1b      	ldr	r3, [pc, #108]	; (d4fc8 <_Z15sendSerialDebug6String+0xcc>)
   d4f5a:	491c      	ldr	r1, [pc, #112]	; (d4fcc <_Z15sendSerialDebug6String+0xd0>)
   d4f5c:	4602      	mov	r2, r0
   d4f5e:	a804      	add	r0, sp, #16
   d4f60:	f001 fa58 	bl	d6414 <_ZN9TimeClass6formatElPKc>
  Serial.println(time + String(millis()) + "," + sparkID + message);
   d4f64:	f001 fd68 	bl	d6a38 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4f68:	a904      	add	r1, sp, #16
   d4f6a:	4606      	mov	r6, r0
   d4f6c:	a80c      	add	r0, sp, #48	; 0x30
   d4f6e:	f000 ff8d 	bl	d5e8c <_ZN6StringC1ERKS_>
   d4f72:	f000 fa79 	bl	d5468 <HAL_Timer_Get_Milli_Seconds>
   d4f76:	220a      	movs	r2, #10
   d4f78:	4601      	mov	r1, r0
   d4f7a:	a808      	add	r0, sp, #32
   d4f7c:	f000 ffe9 	bl	d5f52 <_ZN6StringC1Emh>
   d4f80:	a908      	add	r1, sp, #32
   d4f82:	a80c      	add	r0, sp, #48	; 0x30
   d4f84:	f001 f83d 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d4f88:	4621      	mov	r1, r4
   d4f8a:	f001 f846 	bl	d601a <_ZplRK15StringSumHelperPKc>
   d4f8e:	4669      	mov	r1, sp
   d4f90:	f001 f837 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d4f94:	4629      	mov	r1, r5
   d4f96:	f001 f834 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
   d4f9a:	6801      	ldr	r1, [r0, #0]
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	f001 f974 	bl	d628a <_ZN5Print7printlnEPKc>
   d4fa2:	a808      	add	r0, sp, #32
   d4fa4:	f000 feec 	bl	d5d80 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4fa8:	a80c      	add	r0, sp, #48	; 0x30
   d4faa:	f000 fee9 	bl	d5d80 <_ZN6StringD1Ev>
{
  if (serialDebug)
  {
  message.replace(",","-");
  String sparkID = spark_deviceID() + ",";
  String time = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S,");
   d4fae:	a804      	add	r0, sp, #16
   d4fb0:	f000 fee6 	bl	d5d80 <_ZN6StringD1Ev>
void sendSerialDebug(String message)
{
  if (serialDebug)
  {
  message.replace(",","-");
  String sparkID = spark_deviceID() + ",";
   d4fb4:	4668      	mov	r0, sp
   d4fb6:	f000 fee3 	bl	d5d80 <_ZN6StringD1Ev>
  String time = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S,");
  Serial.println(time + String(millis()) + "," + sparkID + message);
  }
}
   d4fba:	b010      	add	sp, #64	; 0x40
   d4fbc:	bd70      	pop	{r4, r5, r6, pc}
   d4fbe:	bf00      	nop
   d4fc0:	000da03b 	.word	0x000da03b
   d4fc4:	000d9fef 	.word	0x000d9fef
   d4fc8:	000d9fa0 	.word	0x000d9fa0
   d4fcc:	2003e284 	.word	0x2003e284

000d4fd0 <setup>:

PRODUCT_ID(10618);
PRODUCT_VERSION(1);
SYSTEM_MODE (MANUAL);

void setup() {
   d4fd0:	b530      	push	{r4, r5, lr}

  
  //delay(10000);

  pinMode(buttonPin, INPUT);
  pinMode(led1, OUTPUT);
   d4fd2:	4d21      	ldr	r5, [pc, #132]	; (d5058 <setup+0x88>)
  pinMode(led2, OUTPUT);
   d4fd4:	4c21      	ldr	r4, [pc, #132]	; (d505c <setup+0x8c>)

PRODUCT_ID(10618);
PRODUCT_VERSION(1);
SYSTEM_MODE (MANUAL);

void setup() {
   d4fd6:	b085      	sub	sp, #20

  
  //delay(10000);

  pinMode(buttonPin, INPUT);
   d4fd8:	2100      	movs	r1, #0
   d4fda:	2004      	movs	r0, #4
   d4fdc:	f002 fb5a 	bl	d7694 <pinMode>
  pinMode(led1, OUTPUT);
   d4fe0:	8828      	ldrh	r0, [r5, #0]
   d4fe2:	2101      	movs	r1, #1
   d4fe4:	f002 fb56 	bl	d7694 <pinMode>
  pinMode(led2, OUTPUT);
   d4fe8:	8820      	ldrh	r0, [r4, #0]
   d4fea:	2101      	movs	r1, #1
   d4fec:	f002 fb52 	bl	d7694 <pinMode>
  digitalWrite(led1, LOW);
   d4ff0:	8828      	ldrh	r0, [r5, #0]
   d4ff2:	2100      	movs	r1, #0
   d4ff4:	f002 fb5f 	bl	d76b6 <digitalWrite>
  digitalWrite(led2, LOW);
   d4ff8:	2100      	movs	r1, #0
   d4ffa:	8820      	ldrh	r0, [r4, #0]
   d4ffc:	f002 fb5b 	bl	d76b6 <digitalWrite>

  initSyncTime();
   d5000:	f7ff fd84 	bl	d4b0c <_Z12initSyncTimev>
  prevTime = Time.now();       
   d5004:	f001 fa59 	bl	d64ba <_ZN9TimeClass3nowEv>
   d5008:	4b15      	ldr	r3, [pc, #84]	; (d5060 <setup+0x90>)
   d500a:	6018      	str	r0, [r3, #0]
  delay(1000);
   d500c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5010:	f001 fa64 	bl	d64dc <delay>
  sendSerialDebug("-------------Program boot------------------------------------");    
   d5014:	4913      	ldr	r1, [pc, #76]	; (d5064 <setup+0x94>)
   d5016:	4668      	mov	r0, sp
   d5018:	f000 fef9 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d501c:	4668      	mov	r0, sp
   d501e:	f7ff ff6d 	bl	d4efc <_Z15sendSerialDebug6String>
   d5022:	4668      	mov	r0, sp
   d5024:	f000 feac 	bl	d5d80 <_ZN6StringD1Ev>
  sendHttpRequest("Starting");
   d5028:	490f      	ldr	r1, [pc, #60]	; (d5068 <setup+0x98>)
   d502a:	4668      	mov	r0, sp
   d502c:	f000 feef 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d5030:	4668      	mov	r0, sp
   d5032:	f7ff f903 	bl	d423c <_Z15sendHttpRequest6String>
   d5036:	4668      	mov	r0, sp
   d5038:	f000 fea2 	bl	d5d80 <_ZN6StringD1Ev>
  //digitalWrite(pinRelay,HIGH);
  //delay(3000);
  //digitalWrite(pinRelay,LOW);
  //**********************   End Test Block ******************************

  lastStatusMessage = statusMessage(Version);
   d503c:	490b      	ldr	r1, [pc, #44]	; (d506c <setup+0x9c>)
   d503e:	4668      	mov	r0, sp
   d5040:	f000 ff24 	bl	d5e8c <_ZN6StringC1ERKS_>
   d5044:	4668      	mov	r0, sp
   d5046:	f7ff fc2f 	bl	d48a8 <_Z13statusMessage6String>
   d504a:	4b09      	ldr	r3, [pc, #36]	; (d5070 <setup+0xa0>)
   d504c:	6018      	str	r0, [r3, #0]
   d504e:	4668      	mov	r0, sp
   d5050:	f000 fe96 	bl	d5d80 <_ZN6StringD1Ev>
}
   d5054:	b005      	add	sp, #20
   d5056:	bd30      	pop	{r4, r5, pc}
   d5058:	2003e244 	.word	0x2003e244
   d505c:	2003dc94 	.word	0x2003dc94
   d5060:	2003e22c 	.word	0x2003e22c
   d5064:	000d9fb3 	.word	0x000d9fb3
   d5068:	000d9ff1 	.word	0x000d9ff1
   d506c:	2003e234 	.word	0x2003e234
   d5070:	2003e204 	.word	0x2003e204

000d5074 <loop>:

void loop() {
   d5074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5078:	b090      	sub	sp, #64	; 0x40
  SleepResult result = System.sleepResult();
   d507a:	498f      	ldr	r1, [pc, #572]	; (d52b8 <loop+0x244>)
  currentTime = Time.now(); 
   d507c:	4c8f      	ldr	r4, [pc, #572]	; (d52bc <loop+0x248>)
   d507e:	4d90      	ldr	r5, [pc, #576]	; (d52c0 <loop+0x24c>)

  lastStatusMessage = statusMessage(Version);
}

void loop() {
  SleepResult result = System.sleepResult();
   d5080:	a806      	add	r0, sp, #24
   d5082:	f7ff fefb 	bl	d4e7c <_ZN11SystemClass11sleepResultEv>
  currentTime = Time.now(); 
   d5086:	f001 fa18 	bl	d64ba <_ZN9TimeClass3nowEv>
   d508a:	6020      	str	r0, [r4, #0]
  delay(1000);
   d508c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5090:	f001 fa24 	bl	d64dc <delay>
  sendSerialDebug("*************Begin loop()**********************************");
   d5094:	498b      	ldr	r1, [pc, #556]	; (d52c4 <loop+0x250>)
   d5096:	a80c      	add	r0, sp, #48	; 0x30
   d5098:	f000 feb9 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d509c:	a80c      	add	r0, sp, #48	; 0x30
   d509e:	f7ff ff2d 	bl	d4efc <_Z15sendSerialDebug6String>
   d50a2:	a80c      	add	r0, sp, #48	; 0x30
   d50a4:	f000 fe6c 	bl	d5d80 <_ZN6StringD1Ev>


  currentTime = Time.now();
   d50a8:	f001 fa07 	bl	d64ba <_ZN9TimeClass3nowEv>
   d50ac:	6020      	str	r0, [r4, #0]

   // *******  Check if wakeup pin has tripped ******
  if (!result.wokenUpByRtc() && !booting) {
   d50ae:	a806      	add	r0, sp, #24
   d50b0:	f000 fd52 	bl	d5b58 <_ZNK11SleepResult12wokenUpByRtcEv>
   d50b4:	4626      	mov	r6, r4
   d50b6:	b918      	cbnz	r0, d50c0 <loop+0x4c>
   d50b8:	782b      	ldrb	r3, [r5, #0]
   d50ba:	2b00      	cmp	r3, #0
   d50bc:	f000 80dc 	beq.w	d5278 <loop+0x204>
    sendSerialDebug(String(tripCount));
    
  } 
  
  boolean sendingStatus = false;
  booting = false;
   d50c0:	2400      	movs	r4, #0


  // ******* Check if status message is due  *****
  if (lastStatusMessage + (60 * getStatusInterval()) < Time.now() )
   d50c2:	4f81      	ldr	r7, [pc, #516]	; (d52c8 <loop+0x254>)
    sendSerialDebug(String(tripCount));
    
  } 
  
  boolean sendingStatus = false;
  booting = false;
   d50c4:	702c      	strb	r4, [r5, #0]


  // ******* Check if status message is due  *****
  if (lastStatusMessage + (60 * getStatusInterval()) < Time.now() )
   d50c6:	f7ff f84f 	bl	d4168 <_Z17getStatusIntervalv>
   d50ca:	683d      	ldr	r5, [r7, #0]
   d50cc:	233c      	movs	r3, #60	; 0x3c
   d50ce:	fb03 5500 	mla	r5, r3, r0, r5
   d50d2:	f001 f9f2 	bl	d64ba <_ZN9TimeClass3nowEv>
   d50d6:	4285      	cmp	r5, r0
   d50d8:	da0b      	bge.n	d50f2 <loop+0x7e>
  {
    lastStatusMessage = statusMessage(Version);
   d50da:	497c      	ldr	r1, [pc, #496]	; (d52cc <loop+0x258>)
   d50dc:	a80c      	add	r0, sp, #48	; 0x30
   d50de:	f000 fed5 	bl	d5e8c <_ZN6StringC1ERKS_>
   d50e2:	a80c      	add	r0, sp, #48	; 0x30
   d50e4:	f7ff fbe0 	bl	d48a8 <_Z13statusMessage6String>
   d50e8:	6038      	str	r0, [r7, #0]
   d50ea:	a80c      	add	r0, sp, #48	; 0x30
   d50ec:	f000 fe48 	bl	d5d80 <_ZN6StringD1Ev>
    sendingStatus = true;
   d50f0:	2401      	movs	r4, #1
  }

  // *********   Take sample *************
  if (currentTime - prevTime >= (getLogInterval() * 60 )) 
   d50f2:	f8df 8210 	ldr.w	r8, [pc, #528]	; d5304 <loop+0x290>
   d50f6:	6833      	ldr	r3, [r6, #0]
   d50f8:	f8d8 5000 	ldr.w	r5, [r8]
   d50fc:	1b5d      	subs	r5, r3, r5
   d50fe:	f7ff f82d 	bl	d415c <_Z14getLogIntervalv>
   d5102:	263c      	movs	r6, #60	; 0x3c
   d5104:	4370      	muls	r0, r6
   d5106:	4285      	cmp	r5, r0
   d5108:	db6e      	blt.n	d51e8 <loop+0x174>
  {

    payload += "," + (String)tripCount;
   d510a:	4f71      	ldr	r7, [pc, #452]	; (d52d0 <loop+0x25c>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d510c:	4971      	ldr	r1, [pc, #452]	; (d52d4 <loop+0x260>)
    samplesLogged++;
   d510e:	4d72      	ldr	r5, [pc, #456]	; (d52d8 <loop+0x264>)
   d5110:	a80c      	add	r0, sp, #48	; 0x30
   d5112:	f000 fe7c 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>

  // *********   Take sample *************
  if (currentTime - prevTime >= (getLogInterval() * 60 )) 
  {

    payload += "," + (String)tripCount;
   d5116:	220a      	movs	r2, #10
   d5118:	6839      	ldr	r1, [r7, #0]
   d511a:	a808      	add	r0, sp, #32
   d511c:	f000 fef3 	bl	d5f06 <_ZN6StringC1Eih>
   d5120:	a908      	add	r1, sp, #32
   d5122:	a80c      	add	r0, sp, #48	; 0x30
   d5124:	f000 ff6d 	bl	d6002 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d5128:	4601      	mov	r1, r0
   d512a:	486c      	ldr	r0, [pc, #432]	; (d52dc <loop+0x268>)
   d512c:	f000 ff56 	bl	d5fdc <_ZN6String6concatERKS_>
   d5130:	a808      	add	r0, sp, #32
   d5132:	f000 fe25 	bl	d5d80 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5136:	a80c      	add	r0, sp, #48	; 0x30
   d5138:	f000 fe22 	bl	d5d80 <_ZN6StringD1Ev>
    samplesLogged++;
   d513c:	682b      	ldr	r3, [r5, #0]
   d513e:	3301      	adds	r3, #1
   d5140:	602b      	str	r3, [r5, #0]
    prevTime = currentTime;
   d5142:	4b5e      	ldr	r3, [pc, #376]	; (d52bc <loop+0x248>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	f8c8 3000 	str.w	r3, [r8]
    
    if (((samplesLogged >= (getSendInterval() * sendAttempts)) && !sendingStatus))
   d514a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; d5308 <loop+0x294>
   d514e:	f7fe ffff 	bl	d4150 <_Z15getSendIntervalv>
   d5152:	f8d8 3000 	ldr.w	r3, [r8]
   d5156:	4358      	muls	r0, r3
   d5158:	682b      	ldr	r3, [r5, #0]
   d515a:	4298      	cmp	r0, r3
   d515c:	dc42      	bgt.n	d51e4 <loop+0x170>
   d515e:	2c00      	cmp	r4, #0
   d5160:	d140      	bne.n	d51e4 <loop+0x170>
    {
      if (initConnection())
   d5162:	f7ff f80d 	bl	d4180 <_Z14initConnectionv>
   d5166:	2800      	cmp	r0, #0
   d5168:	f000 80a0 	beq.w	d52ac <loop+0x238>
      {
        totalPayload = String(Time.now()-(60*getLogInterval()*(samplesLogged-1)));
   d516c:	f001 f9a5 	bl	d64ba <_ZN9TimeClass3nowEv>
   d5170:	4680      	mov	r8, r0
   d5172:	f7fe fff3 	bl	d415c <_Z14getLogIntervalv>
   d5176:	682b      	ldr	r3, [r5, #0]
   d5178:	4370      	muls	r0, r6
   d517a:	1e59      	subs	r1, r3, #1
   d517c:	220a      	movs	r2, #10
   d517e:	fb00 8111 	mls	r1, r0, r1, r8
   d5182:	a80c      	add	r0, sp, #48	; 0x30
   d5184:	f000 fed2 	bl	d5f2c <_ZN6StringC1Elh>
   d5188:	a90c      	add	r1, sp, #48	; 0x30
   d518a:	4855      	ldr	r0, [pc, #340]	; (d52e0 <loop+0x26c>)
   d518c:	f000 fe89 	bl	d5ea2 <_ZN6StringaSEOS_>
   d5190:	a80c      	add	r0, sp, #48	; 0x30
   d5192:	f000 fdf5 	bl	d5d80 <_ZN6StringD1Ev>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d5196:	4953      	ldr	r1, [pc, #332]	; (d52e4 <loop+0x270>)
   d5198:	4851      	ldr	r0, [pc, #324]	; (d52e0 <loop+0x26c>)
   d519a:	f000 ff23 	bl	d5fe4 <_ZN6String6concatEPKc>
        totalPayload += ",1043,";
        totalPayload += String(getLogInterval());
   d519e:	f7fe ffdd 	bl	d415c <_Z14getLogIntervalv>
   d51a2:	220a      	movs	r2, #10
   d51a4:	4601      	mov	r1, r0
   d51a6:	a80c      	add	r0, sp, #48	; 0x30
   d51a8:	f000 fead 	bl	d5f06 <_ZN6StringC1Eih>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d51ac:	a90c      	add	r1, sp, #48	; 0x30
   d51ae:	484c      	ldr	r0, [pc, #304]	; (d52e0 <loop+0x26c>)
   d51b0:	f000 ff14 	bl	d5fdc <_ZN6String6concatERKS_>
   d51b4:	a80c      	add	r0, sp, #48	; 0x30
   d51b6:	f000 fde3 	bl	d5d80 <_ZN6StringD1Ev>
   d51ba:	4948      	ldr	r1, [pc, #288]	; (d52dc <loop+0x268>)
   d51bc:	4848      	ldr	r0, [pc, #288]	; (d52e0 <loop+0x26c>)
   d51be:	f000 ff0d 	bl	d5fdc <_ZN6String6concatERKS_>
        totalPayload += payload;
        if (sendHttpRequest(totalPayload))   
   d51c2:	4947      	ldr	r1, [pc, #284]	; (d52e0 <loop+0x26c>)
   d51c4:	a80c      	add	r0, sp, #48	; 0x30
   d51c6:	f000 fe61 	bl	d5e8c <_ZN6StringC1ERKS_>
   d51ca:	a80c      	add	r0, sp, #48	; 0x30
   d51cc:	f7ff f836 	bl	d423c <_Z15sendHttpRequest6String>
   d51d0:	4606      	mov	r6, r0
   d51d2:	a80c      	add	r0, sp, #48	; 0x30
   d51d4:	f000 fdd4 	bl	d5d80 <_ZN6StringD1Ev>
   d51d8:	b126      	cbz	r6, d51e4 <loop+0x170>
        {
          payload = "";
   d51da:	4943      	ldr	r1, [pc, #268]	; (d52e8 <loop+0x274>)
   d51dc:	483f      	ldr	r0, [pc, #252]	; (d52dc <loop+0x268>)
   d51de:	f000 fe70 	bl	d5ec2 <_ZN6StringaSEPKc>
          samplesLogged = 0;
   d51e2:	602c      	str	r4, [r5, #0]
      else
      {
        sendAttempts++;
      }
    }    
    tripCount = 0;
   d51e4:	2300      	movs	r3, #0
   d51e6:	603b      	str	r3, [r7, #0]
   d51e8:	f000 f93e 	bl	d5468 <HAL_Timer_Get_Milli_Seconds>
   d51ec:	4604      	mov	r4, r0
  }



  // ******** Reboot if due *************
  if ((long int)millis() > (getRebootInterval() * 1440 * 60 * 1000))
   d51ee:	f7fe ffc1 	bl	d4174 <_Z17getRebootIntervalv>
   d51f2:	4b3e      	ldr	r3, [pc, #248]	; (d52ec <loop+0x278>)
   d51f4:	4358      	muls	r0, r3
   d51f6:	4284      	cmp	r4, r0
   d51f8:	dd03      	ble.n	d5202 <loop+0x18e>
  {
    disconnectConnection();
   d51fa:	f7ff f8a5 	bl	d4348 <_Z20disconnectConnectionv>
    System.reset();  
   d51fe:	f000 fc58 	bl	d5ab2 <_ZN11SystemClass5resetEv>
  }

  debugMessage("Good Night!");
   d5202:	493b      	ldr	r1, [pc, #236]	; (d52f0 <loop+0x27c>)
   d5204:	a80c      	add	r0, sp, #48	; 0x30
   d5206:	f000 fe02 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d520a:	a80c      	add	r0, sp, #48	; 0x30
   d520c:	f7ff f8cc 	bl	d43a8 <_Z12debugMessage6String>
   d5210:	a80c      	add	r0, sp, #48	; 0x30
   d5212:	f000 fdb5 	bl	d5d80 <_ZN6StringD1Ev>
  sendSerialDebug("before disconnectConnection()");
   d5216:	4937      	ldr	r1, [pc, #220]	; (d52f4 <loop+0x280>)
   d5218:	a80c      	add	r0, sp, #48	; 0x30
   d521a:	f000 fdf8 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d521e:	a80c      	add	r0, sp, #48	; 0x30
   d5220:	f7ff fe6c 	bl	d4efc <_Z15sendSerialDebug6String>
   d5224:	a80c      	add	r0, sp, #48	; 0x30
   d5226:	f000 fdab 	bl	d5d80 <_ZN6StringD1Ev>
  disconnectConnection();
   d522a:	f7ff f88d 	bl	d4348 <_Z20disconnectConnectionv>
  sendSerialDebug("after disconnectConnection()");
   d522e:	4932      	ldr	r1, [pc, #200]	; (d52f8 <loop+0x284>)
   d5230:	a80c      	add	r0, sp, #48	; 0x30
   d5232:	f000 fdec 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d5236:	a80c      	add	r0, sp, #48	; 0x30
   d5238:	f7ff fe60 	bl	d4efc <_Z15sendSerialDebug6String>
   d523c:	a80c      	add	r0, sp, #48	; 0x30
   d523e:	f000 fd9f 	bl	d5d80 <_ZN6StringD1Ev>
  delay(1000);
   d5242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5246:	f001 f949 	bl	d64dc <delay>
  System.sleep(buttonPin, RISING , getLogInterval() * 60 );
   d524a:	f7fe ff87 	bl	d415c <_Z14getLogIntervalv>
   d524e:	4b2b      	ldr	r3, [pc, #172]	; (d52fc <loop+0x288>)
   d5250:	6819      	ldr	r1, [r3, #0]
   d5252:	2304      	movs	r3, #4
   d5254:	f8ad 3020 	strh.w	r3, [sp, #32]
   d5258:	ab10      	add	r3, sp, #64	; 0x40
   d525a:	2201      	movs	r2, #1
   d525c:	f803 2d29 	strb.w	r2, [r3, #-41]!
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d5260:	9102      	str	r1, [sp, #8]
   d5262:	213c      	movs	r1, #60	; 0x3c
   d5264:	4348      	muls	r0, r1
   d5266:	9001      	str	r0, [sp, #4]
   d5268:	9200      	str	r2, [sp, #0]
   d526a:	a908      	add	r1, sp, #32
   d526c:	a80c      	add	r0, sp, #48	; 0x30
   d526e:	f000 fc3b 	bl	d5ae8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>

}
   d5272:	b010      	add	sp, #64	; 0x40
   d5274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  currentTime = Time.now();

   // *******  Check if wakeup pin has tripped ******
  if (!result.wokenUpByRtc() && !booting) {
    tripCount++;
   d5278:	4c15      	ldr	r4, [pc, #84]	; (d52d0 <loop+0x25c>)
    sendSerialDebug("Trip Count:");
   d527a:	4921      	ldr	r1, [pc, #132]	; (d5300 <loop+0x28c>)

  currentTime = Time.now();

   // *******  Check if wakeup pin has tripped ******
  if (!result.wokenUpByRtc() && !booting) {
    tripCount++;
   d527c:	6823      	ldr	r3, [r4, #0]
    sendSerialDebug("Trip Count:");
   d527e:	a80c      	add	r0, sp, #48	; 0x30

  currentTime = Time.now();

   // *******  Check if wakeup pin has tripped ******
  if (!result.wokenUpByRtc() && !booting) {
    tripCount++;
   d5280:	3301      	adds	r3, #1
   d5282:	6023      	str	r3, [r4, #0]
    sendSerialDebug("Trip Count:");
   d5284:	f000 fdc3 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d5288:	a80c      	add	r0, sp, #48	; 0x30
   d528a:	f7ff fe37 	bl	d4efc <_Z15sendSerialDebug6String>
   d528e:	a80c      	add	r0, sp, #48	; 0x30
   d5290:	f000 fd76 	bl	d5d80 <_ZN6StringD1Ev>
    sendSerialDebug(String(tripCount));
   d5294:	220a      	movs	r2, #10
   d5296:	6821      	ldr	r1, [r4, #0]
   d5298:	a80c      	add	r0, sp, #48	; 0x30
   d529a:	f000 fe34 	bl	d5f06 <_ZN6StringC1Eih>
   d529e:	a80c      	add	r0, sp, #48	; 0x30
   d52a0:	f7ff fe2c 	bl	d4efc <_Z15sendSerialDebug6String>
   d52a4:	a80c      	add	r0, sp, #48	; 0x30
   d52a6:	f000 fd6b 	bl	d5d80 <_ZN6StringD1Ev>
   d52aa:	e709      	b.n	d50c0 <loop+0x4c>
          
        }
      }
      else
      {
        sendAttempts++;
   d52ac:	f8d8 3000 	ldr.w	r3, [r8]
   d52b0:	3301      	adds	r3, #1
   d52b2:	f8c8 3000 	str.w	r3, [r8]
   d52b6:	e795      	b.n	d51e4 <loop+0x170>
   d52b8:	2003e264 	.word	0x2003e264
   d52bc:	2003e248 	.word	0x2003e248
   d52c0:	2003dc98 	.word	0x2003dc98
   d52c4:	000d9ffa 	.word	0x000d9ffa
   d52c8:	2003e204 	.word	0x2003e204
   d52cc:	2003e234 	.word	0x2003e234
   d52d0:	2003e228 	.word	0x2003e228
   d52d4:	000da03b 	.word	0x000da03b
   d52d8:	2003e224 	.word	0x2003e224
   d52dc:	2003e24c 	.word	0x2003e24c
   d52e0:	2003e214 	.word	0x2003e214
   d52e4:	000da036 	.word	0x000da036
   d52e8:	000d9f75 	.word	0x000d9f75
   d52ec:	05265c00 	.word	0x05265c00
   d52f0:	000da03d 	.word	0x000da03d
   d52f4:	000da049 	.word	0x000da049
   d52f8:	000da067 	.word	0x000da067
   d52fc:	2003e230 	.word	0x2003e230
   d5300:	000da084 	.word	0x000da084
   d5304:	2003e22c 	.word	0x2003e22c
   d5308:	2003dc9c 	.word	0x2003dc9c

000d530c <_GLOBAL__sub_I_Version>:
  message.replace(",","-");
  String sparkID = spark_deviceID() + ",";
  String time = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S,");
  Serial.println(time + String(millis()) + "," + sparkID + message);
  }
}
   d530c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5310:	4b23      	ldr	r3, [pc, #140]	; (d53a0 <_GLOBAL__sub_I_Version+0x94>)
1.3.3- Added Serial debug code
*/

#include "US3lib.h"

String Version = "1.1.3";
   d5312:	4f24      	ldr	r7, [pc, #144]	; (d53a4 <_GLOBAL__sub_I_Version+0x98>)
   d5314:	4e24      	ldr	r6, [pc, #144]	; (d53a8 <_GLOBAL__sub_I_Version+0x9c>)
   d5316:	4d25      	ldr	r5, [pc, #148]	; (d53ac <_GLOBAL__sub_I_Version+0xa0>)
long int sleepTime;


int tripCount = 0;  
int samplesLogged = 0;
String payload;
   d5318:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d53c4 <_GLOBAL__sub_I_Version+0xb8>
   d531c:	2400      	movs	r4, #0
   d531e:	601c      	str	r4, [r3, #0]
   d5320:	f000 f862 	bl	d53e8 <HAL_Pin_Map>
1.3.3- Added Serial debug code
*/

#include "US3lib.h"

String Version = "1.1.3";
   d5324:	4922      	ldr	r1, [pc, #136]	; (d53b0 <_GLOBAL__sub_I_Version+0xa4>)
   d5326:	4638      	mov	r0, r7
   d5328:	f000 fd71 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d532c:	4638      	mov	r0, r7
long int sleepTime;


int tripCount = 0;  
int samplesLogged = 0;
String payload;
   d532e:	4f21      	ldr	r7, [pc, #132]	; (d53b4 <_GLOBAL__sub_I_Version+0xa8>)
1.3.3- Added Serial debug code
*/

#include "US3lib.h"

String Version = "1.1.3";
   d5330:	4632      	mov	r2, r6
   d5332:	4629      	mov	r1, r5
   d5334:	f002 fa58 	bl	d77e8 <__aeabi_atexit>
long int sleepTime;


int tripCount = 0;  
int samplesLogged = 0;
String payload;
   d5338:	4641      	mov	r1, r8
   d533a:	4638      	mov	r0, r7
   d533c:	f000 fd67 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d5340:	4638      	mov	r0, r7
String totalPayload;
   d5342:	4f1d      	ldr	r7, [pc, #116]	; (d53b8 <_GLOBAL__sub_I_Version+0xac>)
long int sleepTime;


int tripCount = 0;  
int samplesLogged = 0;
String payload;
   d5344:	4632      	mov	r2, r6
   d5346:	4629      	mov	r1, r5
   d5348:	f002 fa4e 	bl	d77e8 <__aeabi_atexit>
String totalPayload;
   d534c:	4641      	mov	r1, r8
   d534e:	4638      	mov	r0, r7
   d5350:	f000 fd5d 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
   d5354:	4632      	mov	r2, r6
   d5356:	4629      	mov	r1, r5
   d5358:	4638      	mov	r0, r7
   d535a:	f002 fa45 	bl	d77e8 <__aeabi_atexit>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d535e:	f002 f94b 	bl	d75f8 <spark_protocol_instance>
   d5362:	4623      	mov	r3, r4
   d5364:	4622      	mov	r2, r4
   d5366:	f642 117a 	movw	r1, #10618	; 0x297a

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d536a:	4d14      	ldr	r5, [pc, #80]	; (d53bc <_GLOBAL__sub_I_Version+0xb0>)
   d536c:	f002 f94c 	bl	d7608 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5370:	f002 f942 	bl	d75f8 <spark_protocol_instance>
   d5374:	4622      	mov	r2, r4
   d5376:	4623      	mov	r3, r4
   d5378:	2101      	movs	r1, #1
   d537a:	f002 f94d 	bl	d7618 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d537e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5382:	602c      	str	r4, [r5, #0]
   d5384:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5386:	71ac      	strb	r4, [r5, #6]
   d5388:	812c      	strh	r4, [r5, #8]
   d538a:	816b      	strh	r3, [r5, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d538c:	2003      	movs	r0, #3
   d538e:	f000 f9f3 	bl	d5778 <set_system_mode>

//The setup function is called once at startup of the sketch

PRODUCT_ID(10618);
PRODUCT_VERSION(1);
SYSTEM_MODE (MANUAL);
   d5392:	4632      	mov	r2, r6
   d5394:	4628      	mov	r0, r5
   d5396:	490a      	ldr	r1, [pc, #40]	; (d53c0 <_GLOBAL__sub_I_Version+0xb4>)
  message.replace(",","-");
  String sparkID = spark_deviceID() + ",";
  String time = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S,");
  Serial.println(time + String(millis()) + "," + sparkID + message);
  }
}
   d5398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

//The setup function is called once at startup of the sketch

PRODUCT_ID(10618);
PRODUCT_VERSION(1);
SYSTEM_MODE (MANUAL);
   d539c:	f002 ba24 	b.w	d77e8 <__aeabi_atexit>
   d53a0:	2003e230 	.word	0x2003e230
   d53a4:	2003e234 	.word	0x2003e234
   d53a8:	2003dd58 	.word	0x2003dd58
   d53ac:	000d5d81 	.word	0x000d5d81
   d53b0:	000da090 	.word	0x000da090
   d53b4:	2003e24c 	.word	0x2003e24c
   d53b8:	2003e214 	.word	0x2003e214
   d53bc:	2003e208 	.word	0x2003e208
   d53c0:	000d4e6d 	.word	0x000d4e6d
   d53c4:	000d9f75 	.word	0x000d9f75

000d53c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <netdb_freeaddrinfo+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	689b      	ldr	r3, [r3, #8]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030268 	.word	0x00030268

000d53d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <netdb_getaddrinfo+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	68db      	ldr	r3, [r3, #12]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030268 	.word	0x00030268

000d53e8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_Pin_Map+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	681b      	ldr	r3, [r3, #0]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003022c 	.word	0x0003022c

000d53f8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <HAL_Pin_Mode+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	689b      	ldr	r3, [r3, #8]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003022c 	.word	0x0003022c

000d5408 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <HAL_Get_Pin_Mode+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	68db      	ldr	r3, [r3, #12]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	0003022c 	.word	0x0003022c

000d5418 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <HAL_GPIO_Write+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	691b      	ldr	r3, [r3, #16]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	0003022c 	.word	0x0003022c

000d5428 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <HAL_SPI_Init+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	69db      	ldr	r3, [r3, #28]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030230 	.word	0x00030230

000d5438 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <HAL_SPI_Is_Enabled+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	6a1b      	ldr	r3, [r3, #32]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030230 	.word	0x00030230

000d5448 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <if_index_to_name+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	695b      	ldr	r3, [r3, #20]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	0003026c 	.word	0x0003026c

000d5458 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_RNG_GetRandomNumber+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	685b      	ldr	r3, [r3, #4]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030218 	.word	0x00030218

000d5468 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	695b      	ldr	r3, [r3, #20]
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030218 	.word	0x00030218

000d5478 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <HAL_RTC_Get_UnixTime+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	69db      	ldr	r3, [r3, #28]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030218 	.word	0x00030218

000d5488 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <HAL_RTC_Time_Is_Valid+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030218 	.word	0x00030218

000d5498 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <hal_timer_millis+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030218 	.word	0x00030218

000d54a8 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <HAL_Core_System_Reset_Ex+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030234 	.word	0x00030234

000d54b8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030234 	.word	0x00030234

000d54c8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <os_thread_is_current+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	689b      	ldr	r3, [r3, #8]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030248 	.word	0x00030248

000d54d8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <os_thread_join+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	691b      	ldr	r3, [r3, #16]
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030248 	.word	0x00030248

000d54e8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <os_thread_cleanup+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	695b      	ldr	r3, [r3, #20]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030248 	.word	0x00030248

000d54f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <os_mutex_recursive_create+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030248 	.word	0x00030248

000d5508 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <os_mutex_recursive_destroy+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030248 	.word	0x00030248

000d5518 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <inet_inet_ntop+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	695b      	ldr	r3, [r3, #20]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030264 	.word	0x00030264

000d5528 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <inet_htonl+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6a1b      	ldr	r3, [r3, #32]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030264 	.word	0x00030264

000d5538 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <inet_htons+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030264 	.word	0x00030264

000d5548 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <HAL_USART_Init+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	681b      	ldr	r3, [r3, #0]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003023c 	.word	0x0003023c

000d5558 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <HAL_USART_Write_Data+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	68db      	ldr	r3, [r3, #12]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003023c 	.word	0x0003023c

000d5568 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <HAL_USART_Available_Data+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	691b      	ldr	r3, [r3, #16]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	0003023c 	.word	0x0003023c

000d5578 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <HAL_USART_Read_Data+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	695b      	ldr	r3, [r3, #20]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	0003023c 	.word	0x0003023c

000d5588 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <HAL_USART_Peek_Data+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	699b      	ldr	r3, [r3, #24]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	0003023c 	.word	0x0003023c

000d5598 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <HAL_USART_Flush_Data+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	69db      	ldr	r3, [r3, #28]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	0003023c 	.word	0x0003023c

000d55a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <HAL_USART_Is_Enabled+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6a1b      	ldr	r3, [r3, #32]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	0003023c 	.word	0x0003023c

000d55b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <HAL_USART_Available_Data_For_Write+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	0003023c 	.word	0x0003023c

000d55c8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <HAL_I2C_Begin_Transmission+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	699b      	ldr	r3, [r3, #24]
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030228 	.word	0x00030228

000d55d8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <HAL_I2C_End_Transmission+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	69db      	ldr	r3, [r3, #28]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030228 	.word	0x00030228

000d55e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <HAL_I2C_Write_Data+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	6a1b      	ldr	r3, [r3, #32]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030228 	.word	0x00030228

000d55f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <HAL_I2C_Available_Data+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030228 	.word	0x00030228

000d5608 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <HAL_I2C_Read_Data+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030228 	.word	0x00030228

000d5618 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <HAL_I2C_Peek_Data+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030228 	.word	0x00030228

000d5628 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <HAL_I2C_Flush_Data+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030228 	.word	0x00030228

000d5638 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <HAL_I2C_Is_Enabled+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030228 	.word	0x00030228

000d5648 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <HAL_I2C_Init+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030228 	.word	0x00030228

000d5658 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <HAL_I2C_Acquire+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030228 	.word	0x00030228

000d5668 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <HAL_I2C_Release+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030228 	.word	0x00030228

000d5678 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <HAL_I2C_Request_Data_Ex+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030228 	.word	0x00030228

000d5688 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <sock_setsockopt+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	699b      	ldr	r3, [r3, #24]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030238 	.word	0x00030238

000d5698 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <sock_close+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	69db      	ldr	r3, [r3, #28]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030238 	.word	0x00030238

000d56a8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <sock_connect+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	6a1b      	ldr	r3, [r3, #32]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030238 	.word	0x00030238

000d56b8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <sock_recv+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030238 	.word	0x00030238

000d56c8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <sock_send+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030238 	.word	0x00030238

000d56d8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <sock_socket+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030238 	.word	0x00030238

000d56e8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <cellular_signal+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030274 	.word	0x00030274

000d56f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <HAL_USB_USART_Init+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	681b      	ldr	r3, [r3, #0]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	0003024c 	.word	0x0003024c

000d5708 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <HAL_USB_USART_Available_Data+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	691b      	ldr	r3, [r3, #16]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	0003024c 	.word	0x0003024c

000d5718 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	695b      	ldr	r3, [r3, #20]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	0003024c 	.word	0x0003024c

000d5728 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_USB_USART_Receive_Data+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	699b      	ldr	r3, [r3, #24]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	0003024c 	.word	0x0003024c

000d5738 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <HAL_USB_USART_Send_Data+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	69db      	ldr	r3, [r3, #28]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	0003024c 	.word	0x0003024c

000d5748 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <HAL_USB_USART_Flush_Data+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6a1b      	ldr	r3, [r3, #32]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	0003024c 	.word	0x0003024c

000d5758 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <log_message+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030260 	.word	0x00030260

000d5768 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <system_mode+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	681b      	ldr	r3, [r3, #0]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030220 	.word	0x00030220

000d5778 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <set_system_mode+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	685b      	ldr	r3, [r3, #4]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030220 	.word	0x00030220

000d5788 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <system_delay_ms+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	695b      	ldr	r3, [r3, #20]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030220 	.word	0x00030220

000d5798 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <system_thread_get_state+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030220 	.word	0x00030220

000d57a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b03      	ldr	r3, [pc, #12]	; (d57b8 <system_ctrl_set_app_request_handler+0x10>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d57b2:	9301      	str	r3, [sp, #4]
   d57b4:	bd08      	pop	{r3, pc}
   d57b6:	0000      	.short	0x0000
   d57b8:	00030220 	.word	0x00030220

000d57bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b03      	ldr	r3, [pc, #12]	; (d57cc <system_ctrl_set_result+0x10>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d57c6:	9301      	str	r3, [sp, #4]
   d57c8:	bd08      	pop	{r3, pc}
   d57ca:	0000      	.short	0x0000
   d57cc:	00030220 	.word	0x00030220

000d57d0 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b03      	ldr	r3, [pc, #12]	; (d57e0 <system_sleep_pins+0x10>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d57da:	9301      	str	r3, [sp, #4]
   d57dc:	bd08      	pop	{r3, pc}
   d57de:	0000      	.short	0x0000
   d57e0:	00030220 	.word	0x00030220

000d57e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <network_connect+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	685b      	ldr	r3, [r3, #4]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030240 	.word	0x00030240

000d57f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <network_connecting+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	689b      	ldr	r3, [r3, #8]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030240 	.word	0x00030240

000d5804 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <network_disconnect+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	68db      	ldr	r3, [r3, #12]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030240 	.word	0x00030240

000d5814 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <network_ready+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	691b      	ldr	r3, [r3, #16]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030240 	.word	0x00030240

000d5824 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <network_on+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	695b      	ldr	r3, [r3, #20]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030240 	.word	0x00030240

000d5834 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <network_off+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	699b      	ldr	r3, [r3, #24]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030240 	.word	0x00030240

000d5844 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <network_listen+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	69db      	ldr	r3, [r3, #28]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030240 	.word	0x00030240

000d5854 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <network_listening+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	6a1b      	ldr	r3, [r3, #32]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030240 	.word	0x00030240

000d5864 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <network_set_listen_timeout+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	00030240 	.word	0x00030240

000d5874 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <network_get_listen_timeout+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	00030240 	.word	0x00030240

000d5884 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <spark_process+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	689b      	ldr	r3, [r3, #8]
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	00030244 	.word	0x00030244

000d5894 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <spark_cloud_flag_connect+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	68db      	ldr	r3, [r3, #12]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	00030244 	.word	0x00030244

000d58a4 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <spark_cloud_flag_disconnect+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	691b      	ldr	r3, [r3, #16]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	00030244 	.word	0x00030244

000d58b4 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <spark_cloud_flag_connected+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	695b      	ldr	r3, [r3, #20]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	00030244 	.word	0x00030244

000d58c4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <spark_deviceID+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	69db      	ldr	r3, [r3, #28]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	00030244 	.word	0x00030244

000d58d4 <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <spark_sync_time+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	00030244 	.word	0x00030244

000d58e4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <spark_sync_time_pending+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030244 	.word	0x00030244

000d58f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <spark_set_random_seed_from_cloud_handler+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030244 	.word	0x00030244

000d5904 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <malloc+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	681b      	ldr	r3, [r3, #0]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	0003021c 	.word	0x0003021c

000d5914 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <free+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	685b      	ldr	r3, [r3, #4]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	0003021c 	.word	0x0003021c

000d5924 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <realloc+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	689b      	ldr	r3, [r3, #8]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	0003021c 	.word	0x0003021c

000d5934 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <siprintf+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	691b      	ldr	r3, [r3, #16]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	0003021c 	.word	0x0003021c

000d5944 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <siscanf+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	699b      	ldr	r3, [r3, #24]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	0003021c 	.word	0x0003021c

000d5954 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <snprintf+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	69db      	ldr	r3, [r3, #28]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	0003021c 	.word	0x0003021c

000d5964 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <sniprintf+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6a1b      	ldr	r3, [r3, #32]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	0003021c 	.word	0x0003021c

000d5974 <_malloc_r>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <_malloc_r+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	0003021c 	.word	0x0003021c

000d5984 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <__errno+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	0003021c 	.word	0x0003021c

000d5994 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5994:	2200      	movs	r2, #0
   d5996:	4611      	mov	r1, r2
   d5998:	6840      	ldr	r0, [r0, #4]
   d599a:	f7ff bf5b 	b.w	d5854 <network_listening>

000d599e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d599e:	2200      	movs	r2, #0
   d59a0:	4611      	mov	r1, r2
   d59a2:	6840      	ldr	r0, [r0, #4]
   d59a4:	f7ff bf66 	b.w	d5874 <network_get_listen_timeout>

000d59a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d59a8:	2200      	movs	r2, #0
   d59aa:	6840      	ldr	r0, [r0, #4]
   d59ac:	f7ff bf5a 	b.w	d5864 <network_set_listen_timeout>

000d59b0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d59b0:	2200      	movs	r2, #0
   d59b2:	f081 0101 	eor.w	r1, r1, #1
   d59b6:	6840      	ldr	r0, [r0, #4]
   d59b8:	f7ff bf44 	b.w	d5844 <network_listen>

000d59bc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d59bc:	2300      	movs	r3, #0
   d59be:	461a      	mov	r2, r3
   d59c0:	4619      	mov	r1, r3
   d59c2:	6840      	ldr	r0, [r0, #4]
   d59c4:	f7ff bf36 	b.w	d5834 <network_off>

000d59c8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d59c8:	2300      	movs	r3, #0
   d59ca:	461a      	mov	r2, r3
   d59cc:	4619      	mov	r1, r3
   d59ce:	6840      	ldr	r0, [r0, #4]
   d59d0:	f7ff bf28 	b.w	d5824 <network_on>

000d59d4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59d4:	2200      	movs	r2, #0
   d59d6:	4611      	mov	r1, r2
   d59d8:	6840      	ldr	r0, [r0, #4]
   d59da:	f7ff bf1b 	b.w	d5814 <network_ready>

000d59de <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59de:	2200      	movs	r2, #0
   d59e0:	4611      	mov	r1, r2
   d59e2:	6840      	ldr	r0, [r0, #4]
   d59e4:	f7ff bf06 	b.w	d57f4 <network_connecting>

000d59e8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59e8:	2200      	movs	r2, #0
   d59ea:	2102      	movs	r1, #2
   d59ec:	6840      	ldr	r0, [r0, #4]
   d59ee:	f7ff bf09 	b.w	d5804 <network_disconnect>

000d59f2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59f2:	2300      	movs	r3, #0
   d59f4:	461a      	mov	r2, r3
   d59f6:	6840      	ldr	r0, [r0, #4]
   d59f8:	f7ff bef4 	b.w	d57e4 <network_connect>

000d59fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d59fc:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d59fe:	2203      	movs	r2, #3
   d5a00:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a02:	4a02      	ldr	r2, [pc, #8]	; (d5a0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a04:	601a      	str	r2, [r3, #0]
   d5a06:	4770      	bx	lr
   d5a08:	2003e25c 	.word	0x2003e25c
   d5a0c:	000da0a0 	.word	0x000da0a0

000d5a10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5a10:	b510      	push	{r4, lr}
   d5a12:	4604      	mov	r4, r0
{
    _spi = spi;
   d5a14:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5a16:	4608      	mov	r0, r1
   d5a18:	f7ff fd06 	bl	d5428 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a1c:	2300      	movs	r3, #0
   d5a1e:	6063      	str	r3, [r4, #4]
}
   d5a20:	4620      	mov	r0, r4
   d5a22:	bd10      	pop	{r4, pc}

000d5a24 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5a24:	7800      	ldrb	r0, [r0, #0]
   d5a26:	f7ff bd07 	b.w	d5438 <HAL_SPI_Is_Enabled>

000d5a2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5a2a:	b510      	push	{r4, lr}
   d5a2c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5a2e:	6800      	ldr	r0, [r0, #0]
   d5a30:	b118      	cbz	r0, d5a3a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5a32:	f7ff ff6f 	bl	d5914 <free>
            wakeupSource_ = nullptr;
   d5a36:	2300      	movs	r3, #0
   d5a38:	6023      	str	r3, [r4, #0]
   d5a3a:	bd10      	pop	{r4, pc}

000d5a3c <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a3c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5a3e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d5a42:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d5a44:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a46:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5a48:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5a4c:	f8c0 2006 	str.w	r2, [r0, #6]
   d5a50:	889b      	ldrh	r3, [r3, #4]
   d5a52:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a54:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d5a56:	f7ff ffe8 	bl	d5a2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d5a5a:	682b      	ldr	r3, [r5, #0]
   d5a5c:	b113      	cbz	r3, d5a64 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5a5e:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5a60:	2300      	movs	r3, #0
   d5a62:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d5a64:	4620      	mov	r0, r4
   d5a66:	bd38      	pop	{r3, r4, r5, pc}

000d5a68 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d5a68:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d5a6c:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d5a6e:	b90b      	cbnz	r3, d5a74 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d5a70:	680a      	ldr	r2, [r1, #0]
   d5a72:	b19a      	cbz	r2, d5a9c <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d5a74:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d5a76:	b15c      	cbz	r4, d5a90 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d5a78:	88a2      	ldrh	r2, [r4, #4]
   d5a7a:	2a01      	cmp	r2, #1
   d5a7c:	d003      	beq.n	d5a86 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d5a7e:	2a04      	cmp	r2, #4
   d5a80:	d106      	bne.n	d5a90 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d5a82:	2202      	movs	r2, #2
   d5a84:	e005      	b.n	d5a92 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d5a86:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d5a88:	814c      	strh	r4, [r1, #10]
   d5a8a:	718a      	strb	r2, [r1, #6]
   d5a8c:	810b      	strh	r3, [r1, #8]
                    break;
   d5a8e:	e005      	b.n	d5a9c <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d5a90:	2204      	movs	r2, #4
   d5a92:	810b      	strh	r3, [r1, #8]
   d5a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5a98:	718a      	strb	r2, [r1, #6]
   d5a9a:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d5a9c:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d5aa0:	6003      	str	r3, [r0, #0]
   d5aa2:	888b      	ldrh	r3, [r1, #4]
   d5aa4:	8083      	strh	r3, [r0, #4]
    }
   d5aa6:	bd10      	pop	{r4, pc}

000d5aa8 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d5aa8:	4601      	mov	r1, r0
   d5aaa:	2200      	movs	r2, #0
   d5aac:	208c      	movs	r0, #140	; 0x8c
   d5aae:	f7ff bcfb 	b.w	d54a8 <HAL_Core_System_Reset_Ex>

000d5ab2 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d5ab2:	2000      	movs	r0, #0
   d5ab4:	f7ff bff8 	b.w	d5aa8 <_ZN11SystemClass5resetEm>

000d5ab8 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5ab8:	b510      	push	{r4, lr}
   d5aba:	2400      	movs	r4, #0
   d5abc:	7004      	strb	r4, [r0, #0]
   d5abe:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d5ac0:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5ac2:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d5ac6:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d5ac8:	dd07      	ble.n	d5ada <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d5aca:	3901      	subs	r1, #1
   d5acc:	4299      	cmp	r1, r3
   d5ace:	d209      	bcs.n	d5ae4 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d5ad0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d5ad4:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d5ad6:	2301      	movs	r3, #1
   d5ad8:	e001      	b.n	d5ade <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d5ada:	d102      	bne.n	d5ae2 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d5adc:	2302      	movs	r3, #2
   d5ade:	7003      	strb	r3, [r0, #0]
   d5ae0:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d5ae2:	8041      	strh	r1, [r0, #2]
    }
}
   d5ae4:	bd10      	pop	{r4, pc}
	...

000d5ae8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5aea:	b08b      	sub	sp, #44	; 0x2c
   d5aec:	4617      	mov	r7, r2
   d5aee:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d5af2:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5af4:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5af6:	2400      	movs	r4, #0
   d5af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d5afa:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5afc:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5afe:	9300      	str	r3, [sp, #0]
   d5b00:	4639      	mov	r1, r7
   d5b02:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5b04:	4630      	mov	r0, r6
   d5b06:	f7ff fe63 	bl	d57d0 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d5b0a:	463b      	mov	r3, r7
   d5b0c:	4632      	mov	r2, r6
   d5b0e:	4601      	mov	r1, r0
   d5b10:	a805      	add	r0, sp, #20
   d5b12:	f7ff ffd1 	bl	d5ab8 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d5b16:	9407      	str	r4, [sp, #28]
   d5b18:	f8ad 4020 	strh.w	r4, [sp, #32]
   d5b1c:	4c0d      	ldr	r4, [pc, #52]	; (d5b54 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d5b1e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d5b22:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d5b26:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d5b2a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d5b2e:	4620      	mov	r0, r4
   d5b30:	a907      	add	r1, sp, #28
   d5b32:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d5b36:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d5b3a:	f7ff ff7f 	bl	d5a3c <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5b3e:	a807      	add	r0, sp, #28
   d5b40:	f7ff ff73 	bl	d5a2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d5b44:	4628      	mov	r0, r5
   d5b46:	4621      	mov	r1, r4
   d5b48:	f7ff ff8e 	bl	d5a68 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d5b4c:	4628      	mov	r0, r5
   d5b4e:	b00b      	add	sp, #44	; 0x2c
   d5b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b52:	bf00      	nop
   d5b54:	2003e264 	.word	0x2003e264

000d5b58 <_ZNK11SleepResult12wokenUpByRtcEv>:
   d5b58:	7800      	ldrb	r0, [r0, #0]
   d5b5a:	3802      	subs	r0, #2
   d5b5c:	2801      	cmp	r0, #1
   d5b5e:	bf8c      	ite	hi
   d5b60:	2000      	movhi	r0, #0
   d5b62:	2001      	movls	r0, #1
   d5b64:	4770      	bx	lr
	...

000d5b68 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b68:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b6a:	4c09      	ldr	r4, [pc, #36]	; (d5b90 <_GLOBAL__sub_I_System+0x28>)
   d5b6c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b72:	6020      	str	r0, [r4, #0]
   d5b74:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b76:	71a0      	strb	r0, [r4, #6]
   d5b78:	8120      	strh	r0, [r4, #8]
   d5b7a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b7c:	f7ff fdfc 	bl	d5778 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b80:	4620      	mov	r0, r4
   d5b82:	4a04      	ldr	r2, [pc, #16]	; (d5b94 <_GLOBAL__sub_I_System+0x2c>)
   d5b84:	4904      	ldr	r1, [pc, #16]	; (d5b98 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b8a:	f001 be2d 	b.w	d77e8 <__aeabi_atexit>
   d5b8e:	bf00      	nop
   d5b90:	2003e264 	.word	0x2003e264
   d5b94:	2003dd58 	.word	0x2003dd58
   d5b98:	000d4e6d 	.word	0x000d4e6d

000d5b9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5b9c:	b510      	push	{r4, lr}
   d5b9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5ba0:	f003 fc88 	bl	d94b4 <strlen>
   d5ba4:	3801      	subs	r0, #1
   d5ba6:	1823      	adds	r3, r4, r0
   d5ba8:	4620      	mov	r0, r4
	while(i<j){
   d5baa:	4298      	cmp	r0, r3
   d5bac:	d206      	bcs.n	d5bbc <_Z11str_reversePc+0x20>
		c = *i;
   d5bae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5bb0:	7819      	ldrb	r1, [r3, #0]
   d5bb2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5bb6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5bba:	e7f6      	b.n	d5baa <_Z11str_reversePc+0xe>
   d5bbc:	bd10      	pop	{r4, pc}

000d5bbe <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d5bc2:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d5bc4:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5bc6:	4615      	mov	r5, r2
   d5bc8:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d5bca:	bf34      	ite	cc
   d5bcc:	4615      	movcc	r5, r2
   d5bce:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5bd0:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d5bd2:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5bd4:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5bd6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d5bda:	d107      	bne.n	d5bec <ltoa+0x2e>
   d5bdc:	4298      	cmp	r0, r3
   d5bde:	da05      	bge.n	d5bec <ltoa+0x2e>
      {
            *head++ = '-';
   d5be0:	232d      	movs	r3, #45	; 0x2d
   d5be2:	f101 0801 	add.w	r8, r1, #1
   d5be6:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d5be8:	4240      	negs	r0, r0
   d5bea:	e001      	b.n	d5bf0 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d5bec:	b1b0      	cbz	r0, d5c1c <ltoa+0x5e>
   d5bee:	46a0      	mov	r8, r4
   d5bf0:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d5bf4:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d5bf6:	462a      	mov	r2, r5
   d5bf8:	4601      	mov	r1, r0
   d5bfa:	a801      	add	r0, sp, #4
   d5bfc:	f002 feca 	bl	d8994 <ldiv>
   d5c00:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d5c02:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d5c04:	2b09      	cmp	r3, #9
   d5c06:	bfcc      	ite	gt
   d5c08:	2237      	movgt	r2, #55	; 0x37
   d5c0a:	2230      	movle	r2, #48	; 0x30
   d5c0c:	fa52 f383 	uxtab	r3, r2, r3
   d5c10:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5c14:	3701      	adds	r7, #1
   d5c16:	2800      	cmp	r0, #0
   d5c18:	d1ed      	bne.n	d5bf6 <ltoa+0x38>
   d5c1a:	e006      	b.n	d5c2a <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d5c1c:	2330      	movs	r3, #48	; 0x30
   d5c1e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5c22:	46a0      	mov	r8, r4
   d5c24:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d5c28:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5c2a:	463a      	mov	r2, r7
   d5c2c:	1c71      	adds	r1, r6, #1
   d5c2e:	4640      	mov	r0, r8
   d5c30:	f002 fec4 	bl	d89bc <memcpy>
      return str;
}
   d5c34:	4620      	mov	r0, r4
   d5c36:	b00c      	add	sp, #48	; 0x30
   d5c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c3c <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5c3c:	b570      	push	{r4, r5, r6, lr}
   d5c3e:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5c40:	1e91      	subs	r1, r2, #2
   d5c42:	2922      	cmp	r1, #34	; 0x22
   d5c44:	d820      	bhi.n	d5c88 <ultoa+0x4c>
   d5c46:	4625      	mov	r5, r4
   d5c48:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5c4a:	b910      	cbnz	r0, d5c52 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c4c:	4423      	add	r3, r4
            *ptr++ = '0';
   d5c4e:	2230      	movs	r2, #48	; 0x30
   d5c50:	e00e      	b.n	d5c70 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5c52:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5c56:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5c5a:	b2c1      	uxtb	r1, r0
   d5c5c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5c60:	2809      	cmp	r0, #9
                *ptr += '0';
   d5c62:	bf94      	ite	ls
   d5c64:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5c66:	3157      	addhi	r1, #87	; 0x57
   d5c68:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5c6c:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5c6e:	e7eb      	b.n	d5c48 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c70:	4299      	cmp	r1, r3
   d5c72:	d202      	bcs.n	d5c7a <ultoa+0x3e>
            *ptr++ = '0';
   d5c74:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c78:	e7fa      	b.n	d5c70 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5c7a:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5c7c:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5c7e:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5c80:	f7ff ff8c 	bl	d5b9c <_Z11str_reversePc>
	return buffer;
   d5c84:	4620      	mov	r0, r4
   d5c86:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5c88:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5c8a:	bd70      	pop	{r4, r5, r6, pc}

000d5c8c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5c8c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5c8e:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5c90:	460c      	mov	r4, r1
   d5c92:	4615      	mov	r5, r2
	if(a<0){
   d5c94:	da0b      	bge.n	d5cae <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5c9a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5c9e:	bf14      	ite	ne
   d5ca0:	4258      	negne	r0, r3
   d5ca2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5ca4:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5ca6:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5ca8:	462a      	mov	r2, r5
   d5caa:	4419      	add	r1, r3
   d5cac:	e000      	b.n	d5cb0 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5cae:	2301      	movs	r3, #1
   d5cb0:	f7ff ffc4 	bl	d5c3c <ultoa>
	}
	return buffer;
}
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	bd38      	pop	{r3, r4, r5, pc}

000d5cb8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5cb8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cbc:	ec59 8b10 	vmov	r8, r9, d0
   d5cc0:	4607      	mov	r7, r0
   d5cc2:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d5cc4:	2200      	movs	r2, #0
   d5cc6:	2300      	movs	r3, #0
   d5cc8:	ee10 0a10 	vmov	r0, s0
   d5ccc:	4649      	mov	r1, r9
   d5cce:	f002 fb1f 	bl	d8310 <__aeabi_dcmplt>
   d5cd2:	b128      	cbz	r0, d5ce0 <_Z4dtoadhPc+0x28>
        val = -val;
   d5cd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d5cd8:	4699      	mov	r9, r3
        *sout++ = '-';
   d5cda:	232d      	movs	r3, #45	; 0x2d
   d5cdc:	7033      	strb	r3, [r6, #0]
   d5cde:	3601      	adds	r6, #1
   d5ce0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5ce2:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5ce4:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5ce6:	b2d9      	uxtb	r1, r3
   d5ce8:	428f      	cmp	r7, r1
   d5cea:	d902      	bls.n	d5cf2 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5cec:	4354      	muls	r4, r2
   d5cee:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5cf0:	e7f9      	b.n	d5ce6 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d5cf2:	4620      	mov	r0, r4
   d5cf4:	f002 f834 	bl	d7d60 <__aeabi_i2d>
   d5cf8:	4642      	mov	r2, r8
   d5cfa:	464b      	mov	r3, r9
   d5cfc:	f002 f896 	bl	d7e2c <__aeabi_dmul>
   d5d00:	4682      	mov	sl, r0
   d5d02:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d5d04:	f002 fb64 	bl	d83d0 <__aeabi_d2ulz>
   d5d08:	4680      	mov	r8, r0
   d5d0a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5d0c:	f002 f858 	bl	d7dc0 <__aeabi_ul2d>
   d5d10:	4602      	mov	r2, r0
   d5d12:	460b      	mov	r3, r1
   d5d14:	4650      	mov	r0, sl
   d5d16:	4659      	mov	r1, fp
   d5d18:	f001 fed4 	bl	d7ac4 <__aeabi_dsub>
   d5d1c:	2200      	movs	r2, #0
   d5d1e:	4b17      	ldr	r3, [pc, #92]	; (d5d7c <_Z4dtoadhPc+0xc4>)
   d5d20:	f002 fb0a 	bl	d8338 <__aeabi_dcmpge>
   d5d24:	b118      	cbz	r0, d5d2e <_Z4dtoadhPc+0x76>
        fixed++;
   d5d26:	f118 0801 	adds.w	r8, r8, #1
   d5d2a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5d2e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5d30:	4622      	mov	r2, r4
   d5d32:	462b      	mov	r3, r5
   d5d34:	4640      	mov	r0, r8
   d5d36:	4649      	mov	r1, r9
   d5d38:	f002 fb32 	bl	d83a0 <__aeabi_uldivmod>
   d5d3c:	2301      	movs	r3, #1
   d5d3e:	220a      	movs	r2, #10
   d5d40:	4631      	mov	r1, r6
   d5d42:	f7ff ff7b 	bl	d5c3c <ultoa>
    if (prec) {
   d5d46:	b1af      	cbz	r7, d5d74 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d5d48:	4630      	mov	r0, r6
   d5d4a:	f003 fbb3 	bl	d94b4 <strlen>
        *sout++ = '.';
   d5d4e:	232e      	movs	r3, #46	; 0x2e
   d5d50:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d5d52:	3001      	adds	r0, #1
   d5d54:	4406      	add	r6, r0
   d5d56:	4622      	mov	r2, r4
   d5d58:	462b      	mov	r3, r5
   d5d5a:	4640      	mov	r0, r8
   d5d5c:	4649      	mov	r1, r9
   d5d5e:	f002 fb1f 	bl	d83a0 <__aeabi_uldivmod>
   d5d62:	463b      	mov	r3, r7
   d5d64:	4610      	mov	r0, r2
   d5d66:	4631      	mov	r1, r6
   d5d68:	220a      	movs	r2, #10
    }
}
   d5d6a:	b001      	add	sp, #4
   d5d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5d70:	f7ff bf64 	b.w	d5c3c <ultoa>
    }
}
   d5d74:	b001      	add	sp, #4
   d5d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d7a:	bf00      	nop
   d5d7c:	3fe00000 	.word	0x3fe00000

000d5d80 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5d80:	b510      	push	{r4, lr}
   d5d82:	4604      	mov	r4, r0
{
	free(buffer);
   d5d84:	6800      	ldr	r0, [r0, #0]
   d5d86:	f7ff fdc5 	bl	d5914 <free>
}
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	bd10      	pop	{r4, pc}

000d5d8e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5d8e:	b510      	push	{r4, lr}
   d5d90:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5d92:	6800      	ldr	r0, [r0, #0]
   d5d94:	b108      	cbz	r0, d5d9a <_ZN6String10invalidateEv+0xc>
   d5d96:	f7ff fdbd 	bl	d5914 <free>
	buffer = NULL;
   d5d9a:	2300      	movs	r3, #0
   d5d9c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5d9e:	60a3      	str	r3, [r4, #8]
   d5da0:	6063      	str	r3, [r4, #4]
   d5da2:	bd10      	pop	{r4, pc}

000d5da4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5da4:	b538      	push	{r3, r4, r5, lr}
   d5da6:	4604      	mov	r4, r0
   d5da8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5daa:	6800      	ldr	r0, [r0, #0]
   d5dac:	3101      	adds	r1, #1
   d5dae:	f7ff fdb9 	bl	d5924 <realloc>
	if (newbuffer) {
   d5db2:	b110      	cbz	r0, d5dba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5db4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5db8:	2001      	movs	r0, #1
	}
	return 0;
}
   d5dba:	bd38      	pop	{r3, r4, r5, pc}

000d5dbc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5dbc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5dbe:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5dc0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5dc2:	b113      	cbz	r3, d5dca <_ZN6String7reserveEj+0xe>
   d5dc4:	6843      	ldr	r3, [r0, #4]
   d5dc6:	428b      	cmp	r3, r1
   d5dc8:	d207      	bcs.n	d5dda <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5dca:	4620      	mov	r0, r4
   d5dcc:	f7ff ffea 	bl	d5da4 <_ZN6String12changeBufferEj>
   d5dd0:	b120      	cbz	r0, d5ddc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5dd2:	68a3      	ldr	r3, [r4, #8]
   d5dd4:	b90b      	cbnz	r3, d5dda <_ZN6String7reserveEj+0x1e>
   d5dd6:	6822      	ldr	r2, [r4, #0]
   d5dd8:	7013      	strb	r3, [r2, #0]
   d5dda:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5ddc:	bd10      	pop	{r4, pc}

000d5dde <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5dde:	b570      	push	{r4, r5, r6, lr}
   d5de0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5de2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5de4:	4604      	mov	r4, r0
   d5de6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5de8:	f7ff ffe8 	bl	d5dbc <_ZN6String7reserveEj>
   d5dec:	b918      	cbnz	r0, d5df6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5dee:	4620      	mov	r0, r4
   d5df0:	f7ff ffcd 	bl	d5d8e <_ZN6String10invalidateEv>
		return *this;
   d5df4:	e009      	b.n	d5e0a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5df6:	462a      	mov	r2, r5
   d5df8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5dfa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5dfc:	6820      	ldr	r0, [r4, #0]
   d5dfe:	f002 fddd 	bl	d89bc <memcpy>
	buffer[len] = 0;
   d5e02:	6822      	ldr	r2, [r4, #0]
   d5e04:	68a3      	ldr	r3, [r4, #8]
   d5e06:	2100      	movs	r1, #0
   d5e08:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	bd70      	pop	{r4, r5, r6, pc}

000d5e0e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5e0e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e10:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5e12:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e14:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e16:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e18:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e1a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5e1c:	460d      	mov	r5, r1
   d5e1e:	b139      	cbz	r1, d5e30 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5e20:	4608      	mov	r0, r1
   d5e22:	f003 fb47 	bl	d94b4 <strlen>
   d5e26:	4629      	mov	r1, r5
   d5e28:	4602      	mov	r2, r0
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f7ff ffd7 	bl	d5dde <_ZN6String4copyEPKcj>
}
   d5e30:	4620      	mov	r0, r4
   d5e32:	bd38      	pop	{r3, r4, r5, pc}

000d5e34 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5e34:	b538      	push	{r3, r4, r5, lr}
   d5e36:	4605      	mov	r5, r0
	if (buffer) {
   d5e38:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5e3a:	460c      	mov	r4, r1
	if (buffer) {
   d5e3c:	b160      	cbz	r0, d5e58 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5e3e:	686a      	ldr	r2, [r5, #4]
   d5e40:	688b      	ldr	r3, [r1, #8]
   d5e42:	429a      	cmp	r2, r3
   d5e44:	d306      	bcc.n	d5e54 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5e46:	6809      	ldr	r1, [r1, #0]
   d5e48:	f002 fe18 	bl	d8a7c <strcpy>
			len = rhs.len;
   d5e4c:	68a3      	ldr	r3, [r4, #8]
   d5e4e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5e50:	2300      	movs	r3, #0
   d5e52:	e00a      	b.n	d5e6a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5e54:	f7ff fd5e 	bl	d5914 <free>
		}
	}
	buffer = rhs.buffer;
   d5e58:	6823      	ldr	r3, [r4, #0]
   d5e5a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5e5c:	6863      	ldr	r3, [r4, #4]
   d5e5e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5e60:	68a3      	ldr	r3, [r4, #8]
   d5e62:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5e64:	2300      	movs	r3, #0
   d5e66:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5e68:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5e6a:	60a3      	str	r3, [r4, #8]
   d5e6c:	bd38      	pop	{r3, r4, r5, pc}

000d5e6e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5e6e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5e70:	b510      	push	{r4, lr}
   d5e72:	460b      	mov	r3, r1
   d5e74:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5e76:	d007      	beq.n	d5e88 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5e78:	6809      	ldr	r1, [r1, #0]
   d5e7a:	b119      	cbz	r1, d5e84 <_ZN6StringaSERKS_+0x16>
   d5e7c:	689a      	ldr	r2, [r3, #8]
   d5e7e:	f7ff ffae 	bl	d5dde <_ZN6String4copyEPKcj>
   d5e82:	e001      	b.n	d5e88 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5e84:	f7ff ff83 	bl	d5d8e <_ZN6String10invalidateEv>

	return *this;
}
   d5e88:	4620      	mov	r0, r4
   d5e8a:	bd10      	pop	{r4, pc}

000d5e8c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e8c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e8e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e90:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e92:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e94:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e96:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e98:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5e9a:	f7ff ffe8 	bl	d5e6e <_ZN6StringaSERKS_>
}
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	bd10      	pop	{r4, pc}

000d5ea2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5ea2:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5ea4:	b510      	push	{r4, lr}
   d5ea6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5ea8:	d001      	beq.n	d5eae <_ZN6StringaSEOS_+0xc>
   d5eaa:	f7ff ffc3 	bl	d5e34 <_ZN6String4moveERS_>
	return *this;
}
   d5eae:	4620      	mov	r0, r4
   d5eb0:	bd10      	pop	{r4, pc}

000d5eb2 <_ZN6StringaSEO15StringSumHelper>:

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d5eb2:	4288      	cmp	r0, r1
	if (this != &rval) move(rval);
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
   d5eb4:	b510      	push	{r4, lr}
   d5eb6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5eb8:	d001      	beq.n	d5ebe <_ZN6StringaSEO15StringSumHelper+0xc>
   d5eba:	f7ff ffbb 	bl	d5e34 <_ZN6String4moveERS_>
	return *this;
}
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	bd10      	pop	{r4, pc}

000d5ec2 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d5ec2:	b538      	push	{r3, r4, r5, lr}
   d5ec4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5ec6:	460c      	mov	r4, r1
   d5ec8:	b141      	cbz	r1, d5edc <_ZN6StringaSEPKc+0x1a>
   d5eca:	4608      	mov	r0, r1
   d5ecc:	f003 faf2 	bl	d94b4 <strlen>
   d5ed0:	4621      	mov	r1, r4
   d5ed2:	4602      	mov	r2, r0
   d5ed4:	4628      	mov	r0, r5
   d5ed6:	f7ff ff82 	bl	d5dde <_ZN6String4copyEPKcj>
   d5eda:	e001      	b.n	d5ee0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5edc:	f7ff ff57 	bl	d5d8e <_ZN6String10invalidateEv>

	return *this;
}
   d5ee0:	4628      	mov	r0, r5
   d5ee2:	bd38      	pop	{r3, r4, r5, pc}

000d5ee4 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   d5ee4:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ee6:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   d5ee8:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5eec:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5eee:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ef0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ef2:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   d5ef4:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   d5ef6:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5ef8:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d5efc:	f7ff ffe1 	bl	d5ec2 <_ZN6StringaSEPKc>
}
   d5f00:	4620      	mov	r0, r4
   d5f02:	b002      	add	sp, #8
   d5f04:	bd10      	pop	{r4, pc}

000d5f06 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5f06:	b510      	push	{r4, lr}
   d5f08:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f0a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5f0c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f0e:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5f10:	6063      	str	r3, [r4, #4]
	len = 0;
   d5f12:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5f14:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5f16:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5f18:	a901      	add	r1, sp, #4
   d5f1a:	f7ff feb7 	bl	d5c8c <itoa>
	*this = buf;
   d5f1e:	a901      	add	r1, sp, #4
   d5f20:	4620      	mov	r0, r4
   d5f22:	f7ff ffce 	bl	d5ec2 <_ZN6StringaSEPKc>
}
   d5f26:	4620      	mov	r0, r4
   d5f28:	b00a      	add	sp, #40	; 0x28
   d5f2a:	bd10      	pop	{r4, pc}

000d5f2c <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5f2c:	b510      	push	{r4, lr}
   d5f2e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f30:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5f32:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f34:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5f36:	6063      	str	r3, [r4, #4]
	len = 0;
   d5f38:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5f3a:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5f3c:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d5f3e:	a901      	add	r1, sp, #4
   d5f40:	f7ff fe3d 	bl	d5bbe <ltoa>
	*this = buf;
   d5f44:	a901      	add	r1, sp, #4
   d5f46:	4620      	mov	r0, r4
   d5f48:	f7ff ffbb 	bl	d5ec2 <_ZN6StringaSEPKc>
}
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	b00a      	add	sp, #40	; 0x28
   d5f50:	bd10      	pop	{r4, pc}

000d5f52 <_ZN6StringC1Emh>:

String::String(unsigned long value, unsigned char base)
   d5f52:	b510      	push	{r4, lr}
   d5f54:	4604      	mov	r4, r0
   d5f56:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f58:	2300      	movs	r3, #0
   d5f5a:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5f5c:	6063      	str	r3, [r4, #4]
	len = 0;
   d5f5e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5f60:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d5f62:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   d5f64:	2301      	movs	r3, #1
   d5f66:	a901      	add	r1, sp, #4
   d5f68:	f7ff fe68 	bl	d5c3c <ultoa>
	*this = buf;
   d5f6c:	a901      	add	r1, sp, #4
   d5f6e:	4620      	mov	r0, r4
   d5f70:	f7ff ffa7 	bl	d5ec2 <_ZN6StringaSEPKc>
}
   d5f74:	4620      	mov	r0, r4
   d5f76:	b00a      	add	sp, #40	; 0x28
   d5f78:	bd10      	pop	{r4, pc}

000d5f7a <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
   d5f7a:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f7c:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5f7e:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f80:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5f82:	6043      	str	r3, [r0, #4]
	len = 0;
   d5f84:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f86:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5f88:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d5f8a:	ee10 0a10 	vmov	r0, s0
   d5f8e:	b2cd      	uxtb	r5, r1
   d5f90:	f001 fef8 	bl	d7d84 <__aeabi_f2d>
   d5f94:	ec41 0b10 	vmov	d0, r0, r1
   d5f98:	a901      	add	r1, sp, #4
   d5f9a:	4628      	mov	r0, r5
   d5f9c:	f7ff fe8c 	bl	d5cb8 <_Z4dtoadhPc>
        *this = buf;
   d5fa0:	a901      	add	r1, sp, #4
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f7ff ff8d 	bl	d5ec2 <_ZN6StringaSEPKc>
}
   d5fa8:	4620      	mov	r0, r4
   d5faa:	b00b      	add	sp, #44	; 0x2c
   d5fac:	bd30      	pop	{r4, r5, pc}

000d5fae <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5fae:	b570      	push	{r4, r5, r6, lr}
   d5fb0:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5fb2:	460e      	mov	r6, r1
   d5fb4:	b909      	cbnz	r1, d5fba <_ZN6String6concatEPKcj+0xc>
   d5fb6:	2000      	movs	r0, #0
   d5fb8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5fba:	b16a      	cbz	r2, d5fd8 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5fbc:	6883      	ldr	r3, [r0, #8]
   d5fbe:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5fc0:	4629      	mov	r1, r5
   d5fc2:	f7ff fefb 	bl	d5dbc <_ZN6String7reserveEj>
   d5fc6:	2800      	cmp	r0, #0
   d5fc8:	d0f5      	beq.n	d5fb6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5fca:	6820      	ldr	r0, [r4, #0]
   d5fcc:	68a3      	ldr	r3, [r4, #8]
   d5fce:	4631      	mov	r1, r6
   d5fd0:	4418      	add	r0, r3
   d5fd2:	f002 fd53 	bl	d8a7c <strcpy>
	len = newlen;
   d5fd6:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5fd8:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5fda:	bd70      	pop	{r4, r5, r6, pc}

000d5fdc <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d5fdc:	688a      	ldr	r2, [r1, #8]
   d5fde:	6809      	ldr	r1, [r1, #0]
   d5fe0:	f7ff bfe5 	b.w	d5fae <_ZN6String6concatEPKcj>

000d5fe4 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   d5fe4:	b538      	push	{r3, r4, r5, lr}
   d5fe6:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d5fe8:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d5fea:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d5fec:	b141      	cbz	r1, d6000 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d5fee:	f003 fa61 	bl	d94b4 <strlen>
   d5ff2:	4621      	mov	r1, r4
   d5ff4:	4602      	mov	r2, r0
   d5ff6:	4628      	mov	r0, r5
}
   d5ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d5ffc:	f7ff bfd7 	b.w	d5fae <_ZN6String6concatEPKcj>
}
   d6000:	bd38      	pop	{r3, r4, r5, pc}

000d6002 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6002:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6004:	688a      	ldr	r2, [r1, #8]
   d6006:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6008:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d600a:	f7ff ffd0 	bl	d5fae <_ZN6String6concatEPKcj>
   d600e:	b910      	cbnz	r0, d6016 <_ZplRK15StringSumHelperRK6String+0x14>
   d6010:	4620      	mov	r0, r4
   d6012:	f7ff febc 	bl	d5d8e <_ZN6String10invalidateEv>
	return a;
}
   d6016:	4620      	mov	r0, r4
   d6018:	bd10      	pop	{r4, pc}

000d601a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d601a:	b538      	push	{r3, r4, r5, lr}
   d601c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d601e:	460d      	mov	r5, r1
   d6020:	b141      	cbz	r1, d6034 <_ZplRK15StringSumHelperPKc+0x1a>
   d6022:	4608      	mov	r0, r1
   d6024:	f003 fa46 	bl	d94b4 <strlen>
   d6028:	4629      	mov	r1, r5
   d602a:	4602      	mov	r2, r0
   d602c:	4620      	mov	r0, r4
   d602e:	f7ff ffbe 	bl	d5fae <_ZN6String6concatEPKcj>
   d6032:	b910      	cbnz	r0, d603a <_ZplRK15StringSumHelperPKc+0x20>
   d6034:	4620      	mov	r0, r4
   d6036:	f7ff feaa 	bl	d5d8e <_ZN6String10invalidateEv>
	return a;
}
   d603a:	4620      	mov	r0, r4
   d603c:	bd38      	pop	{r3, r4, r5, pc}

000d603e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d603e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6040:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6042:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6044:	b912      	cbnz	r2, d604c <_ZNK6String6equalsEPKc+0xe>
   d6046:	b919      	cbnz	r1, d6050 <_ZNK6String6equalsEPKc+0x12>
   d6048:	2001      	movs	r0, #1
   d604a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d604c:	b911      	cbnz	r1, d6054 <_ZNK6String6equalsEPKc+0x16>
   d604e:	6803      	ldr	r3, [r0, #0]
   d6050:	7818      	ldrb	r0, [r3, #0]
   d6052:	e002      	b.n	d605a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6054:	6800      	ldr	r0, [r0, #0]
   d6056:	f002 fd07 	bl	d8a68 <strcmp>
   d605a:	fab0 f080 	clz	r0, r0
   d605e:	0940      	lsrs	r0, r0, #5
}
   d6060:	bd08      	pop	{r3, pc}

000d6062 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d6062:	6883      	ldr	r3, [r0, #8]
   d6064:	428b      	cmp	r3, r1
   d6066:	d903      	bls.n	d6070 <_ZNK6StringixEj+0xe>
   d6068:	6800      	ldr	r0, [r0, #0]
   d606a:	b110      	cbz	r0, d6072 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d606c:	5c40      	ldrb	r0, [r0, r1]
   d606e:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d6070:	2000      	movs	r0, #0
	return buffer[index];
}
   d6072:	4770      	bx	lr

000d6074 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d6074:	f7ff bff5 	b.w	d6062 <_ZNK6StringixEj>

000d6078 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d6078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d607c:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d607e:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d6080:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d6082:	b1ca      	cbz	r2, d60b8 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d6084:	6883      	ldr	r3, [r0, #8]
   d6086:	b1bb      	cbz	r3, d60b8 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d6088:	429a      	cmp	r2, r3
   d608a:	d815      	bhi.n	d60b8 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d608c:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
   d608e:	42ab      	cmp	r3, r5
   d6090:	bf98      	it	ls
   d6092:	f103 35ff 	addls.w	r5, r3, #4294967295
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d6096:	4630      	mov	r0, r6

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
   d6098:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d609c:	eb06 0805 	add.w	r8, r6, r5
   d60a0:	4540      	cmp	r0, r8
   d60a2:	d80d      	bhi.n	d60c0 <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
   d60a4:	6839      	ldr	r1, [r7, #0]
   d60a6:	f003 fa35 	bl	d9514 <strstr>
		if (!p) break;
   d60aa:	b148      	cbz	r0, d60c0 <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d60ac:	1b83      	subs	r3, r0, r6
   d60ae:	429d      	cmp	r5, r3
   d60b0:	bf28      	it	cs
   d60b2:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d60b4:	3001      	adds	r0, #1
   d60b6:	e7f3      	b.n	d60a0 <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d60b8:	f04f 30ff 	mov.w	r0, #4294967295
   d60bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d60c0:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
   d60c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60c6 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
   d60c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
   d60ca:	f8d0 a008 	ldr.w	sl, [r0, #8]
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
   d60ce:	4605      	mov	r5, r0
   d60d0:	4688      	mov	r8, r1
   d60d2:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
   d60d4:	f1ba 0f00 	cmp.w	sl, #0
   d60d8:	d078      	beq.n	d61cc <_ZN6String7replaceERKS_S1_+0x106>
   d60da:	f8d1 b008 	ldr.w	fp, [r1, #8]
   d60de:	f1bb 0f00 	cmp.w	fp, #0
   d60e2:	d073      	beq.n	d61cc <_ZN6String7replaceERKS_S1_+0x106>
	int diff = replace.len - find.len;
   d60e4:	6897      	ldr	r7, [r2, #8]
	char *readFrom = buffer;
   d60e6:	6804      	ldr	r4, [r0, #0]
}

String& String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
   d60e8:	ebcb 0707 	rsb	r7, fp, r7
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
   d60ec:	2f00      	cmp	r7, #0
   d60ee:	d10e      	bne.n	d610e <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d60f0:	4620      	mov	r0, r4
   d60f2:	f8d8 1000 	ldr.w	r1, [r8]
   d60f6:	f003 fa0d 	bl	d9514 <strstr>
   d60fa:	4604      	mov	r4, r0
   d60fc:	2800      	cmp	r0, #0
   d60fe:	d065      	beq.n	d61cc <_ZN6String7replaceERKS_S1_+0x106>
			memcpy(foundAt, replace.buffer, replace.len);
   d6100:	68b2      	ldr	r2, [r6, #8]
   d6102:	6831      	ldr	r1, [r6, #0]
   d6104:	f002 fc5a 	bl	d89bc <memcpy>
			readFrom = foundAt + replace.len;
   d6108:	68b0      	ldr	r0, [r6, #8]
   d610a:	4404      	add	r4, r0
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d610c:	e7f0      	b.n	d60f0 <_ZN6String7replaceERKS_S1_+0x2a>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
   d610e:	da22      	bge.n	d6156 <_ZN6String7replaceERKS_S1_+0x90>
   d6110:	46a1      	mov	r9, r4
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d6112:	f8d8 1000 	ldr.w	r1, [r8]
   d6116:	4620      	mov	r0, r4
   d6118:	f003 f9fc 	bl	d9514 <strstr>
   d611c:	4683      	mov	fp, r0
   d611e:	b1a8      	cbz	r0, d614c <_ZN6String7replaceERKS_S1_+0x86>
			unsigned int n = foundAt - readFrom;
   d6120:	ebc4 0a00 	rsb	sl, r4, r0
			memcpy(writeTo, readFrom, n);
   d6124:	4621      	mov	r1, r4
   d6126:	4652      	mov	r2, sl
   d6128:	4648      	mov	r0, r9
			writeTo += n;
   d612a:	44d1      	add	r9, sl
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
   d612c:	f002 fc46 	bl	d89bc <memcpy>
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
   d6130:	4648      	mov	r0, r9
   d6132:	68b2      	ldr	r2, [r6, #8]
   d6134:	6831      	ldr	r1, [r6, #0]
   d6136:	f002 fc41 	bl	d89bc <memcpy>
			writeTo += replace.len;
   d613a:	68b3      	ldr	r3, [r6, #8]
			readFrom = foundAt + find.len;
   d613c:	f8d8 4008 	ldr.w	r4, [r8, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
   d6140:	4499      	add	r9, r3
			readFrom = foundAt + find.len;
			len += diff;
   d6142:	68ab      	ldr	r3, [r5, #8]
   d6144:	443b      	add	r3, r7
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
   d6146:	445c      	add	r4, fp
			len += diff;
   d6148:	60ab      	str	r3, [r5, #8]
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d614a:	e7e2      	b.n	d6112 <_ZN6String7replaceERKS_S1_+0x4c>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
   d614c:	4621      	mov	r1, r4
   d614e:	4648      	mov	r0, r9
   d6150:	f002 fc94 	bl	d8a7c <strcpy>
   d6154:	e03a      	b.n	d61cc <_ZN6String7replaceERKS_S1_+0x106>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d6156:	680b      	ldr	r3, [r1, #0]
   d6158:	46d1      	mov	r9, sl
   d615a:	4619      	mov	r1, r3
   d615c:	4620      	mov	r0, r4
   d615e:	9301      	str	r3, [sp, #4]
   d6160:	f003 f9d8 	bl	d9514 <strstr>
   d6164:	b120      	cbz	r0, d6170 <_ZN6String7replaceERKS_S1_+0xaa>
			readFrom = foundAt + find.len;
   d6166:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
   d616a:	44b9      	add	r9, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d616c:	9b01      	ldr	r3, [sp, #4]
   d616e:	e7f4      	b.n	d615a <_ZN6String7replaceERKS_S1_+0x94>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
   d6170:	45d1      	cmp	r9, sl
   d6172:	d02b      	beq.n	d61cc <_ZN6String7replaceERKS_S1_+0x106>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
   d6174:	686b      	ldr	r3, [r5, #4]
   d6176:	4599      	cmp	r9, r3
   d6178:	d904      	bls.n	d6184 <_ZN6String7replaceERKS_S1_+0xbe>
   d617a:	4649      	mov	r1, r9
   d617c:	4628      	mov	r0, r5
   d617e:	f7ff fe11 	bl	d5da4 <_ZN6String12changeBufferEj>
   d6182:	b318      	cbz	r0, d61cc <_ZN6String7replaceERKS_S1_+0x106>
		int index = len - 1;
   d6184:	68aa      	ldr	r2, [r5, #8]
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
   d6186:	f04f 0900 	mov.w	r9, #0
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
   d618a:	3a01      	subs	r2, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
   d618c:	2a00      	cmp	r2, #0
   d618e:	db1d      	blt.n	d61cc <_ZN6String7replaceERKS_S1_+0x106>
   d6190:	4641      	mov	r1, r8
   d6192:	4628      	mov	r0, r5
   d6194:	f7ff ff70 	bl	d6078 <_ZNK6String11lastIndexOfERKS_j>
   d6198:	1e04      	subs	r4, r0, #0
   d619a:	db17      	blt.n	d61cc <_ZN6String7replaceERKS_S1_+0x106>
			readFrom = buffer + index + find.len;
   d619c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d61a0:	6829      	ldr	r1, [r5, #0]
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   d61a2:	68aa      	ldr	r2, [r5, #8]
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
   d61a4:	4423      	add	r3, r4
   d61a6:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   d61a8:	1ad2      	subs	r2, r2, r3
   d61aa:	19c8      	adds	r0, r1, r7
   d61ac:	f002 fc11 	bl	d89d2 <memmove>
			len += diff;
   d61b0:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
   d61b2:	682a      	ldr	r2, [r5, #0]
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
   d61b4:	443b      	add	r3, r7
   d61b6:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
   d61b8:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
   d61bc:	6828      	ldr	r0, [r5, #0]
   d61be:	68b2      	ldr	r2, [r6, #8]
   d61c0:	6831      	ldr	r1, [r6, #0]
   d61c2:	4420      	add	r0, r4
   d61c4:	f002 fbfa 	bl	d89bc <memcpy>
			index--;
   d61c8:	1e62      	subs	r2, r4, #1
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
   d61ca:	e7df      	b.n	d618c <_ZN6String7replaceERKS_S1_+0xc6>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
   d61cc:	4628      	mov	r0, r5
   d61ce:	b003      	add	sp, #12
   d61d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d61d4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d61d4:	6800      	ldr	r0, [r0, #0]
   d61d6:	b108      	cbz	r0, d61dc <_ZNK6String5toIntEv+0x8>
   d61d8:	f002 bad2 	b.w	d8780 <atol>
	return 0;
}
   d61dc:	4770      	bx	lr

000d61de <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d61de:	b510      	push	{r4, lr}
   d61e0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d61e2:	6800      	ldr	r0, [r0, #0]
   d61e4:	b108      	cbz	r0, d61ea <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d61e6:	f7ff f98f 	bl	d5508 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d61ea:	4620      	mov	r0, r4
   d61ec:	bd10      	pop	{r4, pc}
	...

000d61f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d61f0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d61f2:	4c06      	ldr	r4, [pc, #24]	; (d620c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d61f4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d61f6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d61f8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d61fa:	f7ff f97d 	bl	d54f8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d61fe:	4620      	mov	r0, r4
   d6200:	4a03      	ldr	r2, [pc, #12]	; (d6210 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6202:	4904      	ldr	r1, [pc, #16]	; (d6214 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6208:	f001 baee 	b.w	d77e8 <__aeabi_atexit>
   d620c:	2003e270 	.word	0x2003e270
   d6210:	2003dd58 	.word	0x2003dd58
   d6214:	000d61df 	.word	0x000d61df

000d6218 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d621a:	4606      	mov	r6, r0
   d621c:	460d      	mov	r5, r1
   d621e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6220:	2400      	movs	r4, #0
  while (size--) {
   d6222:	42bd      	cmp	r5, r7
   d6224:	d00c      	beq.n	d6240 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6226:	6833      	ldr	r3, [r6, #0]
   d6228:	f815 1b01 	ldrb.w	r1, [r5], #1
   d622c:	689b      	ldr	r3, [r3, #8]
   d622e:	4630      	mov	r0, r6
   d6230:	4798      	blx	r3
     if (chunk>=0)
   d6232:	2800      	cmp	r0, #0
   d6234:	db01      	blt.n	d623a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6236:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6238:	e7f3      	b.n	d6222 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d623a:	2c00      	cmp	r4, #0
   d623c:	bf08      	it	eq
   d623e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6240:	4620      	mov	r0, r4
   d6242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6244 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6244:	b570      	push	{r4, r5, r6, lr}
   d6246:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6248:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d624a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d624c:	b149      	cbz	r1, d6262 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d624e:	f003 f931 	bl	d94b4 <strlen>
   d6252:	682b      	ldr	r3, [r5, #0]
   d6254:	4602      	mov	r2, r0
   d6256:	4621      	mov	r1, r4
   d6258:	4628      	mov	r0, r5
   d625a:	68db      	ldr	r3, [r3, #12]
    }
   d625c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6260:	4718      	bx	r3
    }
   d6262:	bd70      	pop	{r4, r5, r6, pc}

000d6264 <_ZN5Print5printEPKc>:
   d6264:	b508      	push	{r3, lr}
   d6266:	f7ff ffed 	bl	d6244 <_ZN5Print5writeEPKc>
   d626a:	bd08      	pop	{r3, pc}

000d626c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d626c:	6803      	ldr	r3, [r0, #0]
   d626e:	689b      	ldr	r3, [r3, #8]
   d6270:	4718      	bx	r3

000d6272 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6272:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6274:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6276:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6278:	f7ff fff8 	bl	d626c <_ZN5Print5printEc>
  n += print('\n');
   d627c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d627e:	4604      	mov	r4, r0
  n += print('\n');
   d6280:	4628      	mov	r0, r5
   d6282:	f7ff fff3 	bl	d626c <_ZN5Print5printEc>
  return n;
}
   d6286:	4420      	add	r0, r4
   d6288:	bd38      	pop	{r3, r4, r5, pc}

000d628a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d628a:	b538      	push	{r3, r4, r5, lr}
   d628c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d628e:	f7ff ffd9 	bl	d6244 <_ZN5Print5writeEPKc>
   d6292:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6294:	4628      	mov	r0, r5
   d6296:	f7ff ffec 	bl	d6272 <_ZN5Print7printlnEv>
  return n;
}
   d629a:	4420      	add	r0, r4
   d629c:	bd38      	pop	{r3, r4, r5, pc}

000d629e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d629e:	b530      	push	{r4, r5, lr}
   d62a0:	b08b      	sub	sp, #44	; 0x2c
   d62a2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d62a4:	2100      	movs	r1, #0
   d62a6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d62aa:	2a01      	cmp	r2, #1
   d62ac:	bf98      	it	ls
   d62ae:	220a      	movls	r2, #10
   d62b0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d62b4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d62b8:	fb05 3312 	mls	r3, r5, r2, r3
   d62bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d62c0:	2b09      	cmp	r3, #9
   d62c2:	bf94      	ite	ls
   d62c4:	3330      	addls	r3, #48	; 0x30
   d62c6:	3337      	addhi	r3, #55	; 0x37
   d62c8:	b2db      	uxtb	r3, r3
   d62ca:	4621      	mov	r1, r4
   d62cc:	f804 3901 	strb.w	r3, [r4], #-1
   d62d0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d62d2:	2d00      	cmp	r5, #0
   d62d4:	d1ee      	bne.n	d62b4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d62d6:	f7ff ffb5 	bl	d6244 <_ZN5Print5writeEPKc>
}
   d62da:	b00b      	add	sp, #44	; 0x2c
   d62dc:	bd30      	pop	{r4, r5, pc}
	...

000d62e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d62e0:	4b01      	ldr	r3, [pc, #4]	; (d62e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d62e2:	4a02      	ldr	r2, [pc, #8]	; (d62ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d62e4:	601a      	str	r2, [r3, #0]
   d62e6:	4770      	bx	lr
   d62e8:	2003e274 	.word	0x2003e274
   d62ec:	000da13f 	.word	0x000da13f

000d62f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d62f0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d62f2:	2000      	movs	r0, #0
   d62f4:	f7ff faf6 	bl	d58e4 <spark_sync_time_pending>
   d62f8:	b128      	cbz	r0, d6306 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d62fa:	f7ff fadb 	bl	d58b4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d62fe:	f080 0001 	eor.w	r0, r0, #1
   d6302:	b2c0      	uxtb	r0, r0
   d6304:	bd08      	pop	{r3, pc}
   d6306:	2001      	movs	r0, #1
    }
   d6308:	bd08      	pop	{r3, pc}
	...

000d630c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d630c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d630e:	4b0e      	ldr	r3, [pc, #56]	; (d6348 <_ZN9TimeClass7timeStrEl+0x3c>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	4419      	add	r1, r3
   d6314:	4b0d      	ldr	r3, [pc, #52]	; (d634c <_ZN9TimeClass7timeStrEl+0x40>)
   d6316:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6318:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d631a:	a802      	add	r0, sp, #8
   d631c:	4419      	add	r1, r3
   d631e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d6322:	f002 fa3f 	bl	d87a4 <localtime>
        char* ascstr = asctime(calendar_time);
   d6326:	f002 f9eb 	bl	d8700 <asctime>
   d632a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d632c:	f003 f8c2 	bl	d94b4 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d6330:	4428      	add	r0, r5
   d6332:	2300      	movs	r3, #0
   d6334:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6338:	4629      	mov	r1, r5
   d633a:	4620      	mov	r0, r4
   d633c:	f7ff fd67 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6340:	4620      	mov	r0, r4
   d6342:	b003      	add	sp, #12
   d6344:	bd30      	pop	{r4, r5, pc}
   d6346:	bf00      	nop
   d6348:	2003e280 	.word	0x2003e280
   d634c:	2003e27c 	.word	0x2003e27c

000d6350 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d6350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6354:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d6356:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d6358:	4607      	mov	r7, r0
   d635a:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d635c:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d635e:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d6360:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d6362:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d6364:	f003 f8c3 	bl	d94ee <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d6368:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d636a:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d636c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d6370:	f003 f8a0 	bl	d94b4 <strlen>
   d6374:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d6376:	b925      	cbnz	r5, d6382 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d6378:	4924      	ldr	r1, [pc, #144]	; (d640c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d637a:	a803      	add	r0, sp, #12
   d637c:	f002 fb7e 	bl	d8a7c <strcpy>
   d6380:	e013      	b.n	d63aa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d6382:	213c      	movs	r1, #60	; 0x3c
   d6384:	fb95 f2f1 	sdiv	r2, r5, r1
   d6388:	2a00      	cmp	r2, #0
   d638a:	bfb8      	it	lt
   d638c:	4252      	neglt	r2, r2
   d638e:	fb92 f3f1 	sdiv	r3, r2, r1
   d6392:	fb01 2213 	mls	r2, r1, r3, r2
   d6396:	9200      	str	r2, [sp, #0]
   d6398:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d639c:	4a1c      	ldr	r2, [pc, #112]	; (d6410 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d639e:	fb95 f3f3 	sdiv	r3, r5, r3
   d63a2:	2110      	movs	r1, #16
   d63a4:	a803      	add	r0, sp, #12
   d63a6:	f7ff fad5 	bl	d5954 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d63aa:	4625      	mov	r5, r4
   d63ac:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d63ae:	f108 3aff 	add.w	sl, r8, #4294967295
   d63b2:	45b2      	cmp	sl, r6
   d63b4:	d91b      	bls.n	d63ee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d63b6:	782b      	ldrb	r3, [r5, #0]
   d63b8:	2b25      	cmp	r3, #37	; 0x25
   d63ba:	d116      	bne.n	d63ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d63bc:	786b      	ldrb	r3, [r5, #1]
   d63be:	2b7a      	cmp	r3, #122	; 0x7a
   d63c0:	d113      	bne.n	d63ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d63c2:	a803      	add	r0, sp, #12
   d63c4:	f003 f876 	bl	d94b4 <strlen>
   d63c8:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d63ca:	4430      	add	r0, r6
   d63cc:	ebc6 020a 	rsb	r2, r6, sl
   d63d0:	1ca9      	adds	r1, r5, #2
   d63d2:	4420      	add	r0, r4
   d63d4:	f002 faf2 	bl	d89bc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d63d8:	4642      	mov	r2, r8
   d63da:	a903      	add	r1, sp, #12
   d63dc:	4628      	mov	r0, r5
   d63de:	f002 faed 	bl	d89bc <memcpy>
            len = strlen(format_str);
   d63e2:	4620      	mov	r0, r4
   d63e4:	f003 f866 	bl	d94b4 <strlen>
   d63e8:	4680      	mov	r8, r0
   d63ea:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d63ec:	e7de      	b.n	d63ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d63ee:	464b      	mov	r3, r9
   d63f0:	4622      	mov	r2, r4
   d63f2:	2132      	movs	r1, #50	; 0x32
   d63f4:	a807      	add	r0, sp, #28
   d63f6:	f002 fba9 	bl	d8b4c <strftime>
    return String(buf);
   d63fa:	a907      	add	r1, sp, #28
   d63fc:	4638      	mov	r0, r7
   d63fe:	f7ff fd06 	bl	d5e0e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6402:	4638      	mov	r0, r7
   d6404:	b024      	add	sp, #144	; 0x90
   d6406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d640a:	bf00      	nop
   d640c:	000da865 	.word	0x000da865
   d6410:	000da1a7 	.word	0x000da1a7

000d6414 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d6414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6416:	4605      	mov	r5, r0
   d6418:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d641a:	461c      	mov	r4, r3
   d641c:	b913      	cbnz	r3, d6424 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d641e:	4b12      	ldr	r3, [pc, #72]	; (d6468 <_ZN9TimeClass6formatElPKc+0x54>)
   d6420:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d6422:	b12c      	cbz	r4, d6430 <_ZN9TimeClass6formatElPKc+0x1c>
   d6424:	4b11      	ldr	r3, [pc, #68]	; (d646c <_ZN9TimeClass6formatElPKc+0x58>)
   d6426:	4620      	mov	r0, r4
   d6428:	6819      	ldr	r1, [r3, #0]
   d642a:	f002 fb1d 	bl	d8a68 <strcmp>
   d642e:	b920      	cbnz	r0, d643a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d6430:	9901      	ldr	r1, [sp, #4]
   d6432:	4628      	mov	r0, r5
   d6434:	f7ff ff6a 	bl	d630c <_ZN9TimeClass7timeStrEl>
   d6438:	e013      	b.n	d6462 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d643a:	4f0d      	ldr	r7, [pc, #52]	; (d6470 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d643c:	9a01      	ldr	r2, [sp, #4]
   d643e:	683b      	ldr	r3, [r7, #0]
   d6440:	4e0c      	ldr	r6, [pc, #48]	; (d6474 <_ZN9TimeClass6formatElPKc+0x60>)
   d6442:	441a      	add	r2, r3
   d6444:	6833      	ldr	r3, [r6, #0]
   d6446:	a802      	add	r0, sp, #8
   d6448:	4413      	add	r3, r2
   d644a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d644e:	f002 f9a9 	bl	d87a4 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d6452:	683a      	ldr	r2, [r7, #0]
   d6454:	6833      	ldr	r3, [r6, #0]
   d6456:	4601      	mov	r1, r0
   d6458:	4413      	add	r3, r2
   d645a:	4628      	mov	r0, r5
   d645c:	4622      	mov	r2, r4
   d645e:	f7ff ff77 	bl	d6350 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d6462:	4628      	mov	r0, r5
   d6464:	b003      	add	sp, #12
   d6466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6468:	2003e278 	.word	0x2003e278
   d646c:	2003dca0 	.word	0x2003dca0
   d6470:	2003e280 	.word	0x2003e280
   d6474:	2003e27c 	.word	0x2003e27c

000d6478 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6478:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d647a:	2000      	movs	r0, #0
   d647c:	f7ff f804 	bl	d5488 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6480:	4604      	mov	r4, r0
   d6482:	b968      	cbnz	r0, d64a0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6484:	f7ff f970 	bl	d5768 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6488:	2801      	cmp	r0, #1
   d648a:	d10b      	bne.n	d64a4 <_ZN9TimeClass7isValidEv+0x2c>
   d648c:	4620      	mov	r0, r4
   d648e:	f7ff f983 	bl	d5798 <system_thread_get_state>
   d6492:	b938      	cbnz	r0, d64a4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6494:	f7ff ff2c 	bl	d62f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6498:	b930      	cbnz	r0, d64a8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d649a:	f7ff f9f3 	bl	d5884 <spark_process>
   d649e:	e7f9      	b.n	d6494 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d64a0:	2001      	movs	r0, #1
   d64a2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d64a4:	2000      	movs	r0, #0
   d64a6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d64a8:	f7ff ff22 	bl	d62f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d64ac:	2000      	movs	r0, #0
   d64ae:	f7fe ffeb 	bl	d5488 <HAL_RTC_Time_Is_Valid>
   d64b2:	3000      	adds	r0, #0
   d64b4:	bf18      	it	ne
   d64b6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d64b8:	bd10      	pop	{r4, pc}

000d64ba <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d64ba:	b508      	push	{r3, lr}
    (void)isValid();
   d64bc:	f7ff ffdc 	bl	d6478 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d64c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d64c4:	f7fe bfd8 	b.w	d5478 <HAL_RTC_Get_UnixTime>

000d64c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d64c8:	4b02      	ldr	r3, [pc, #8]	; (d64d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d64ca:	681a      	ldr	r2, [r3, #0]
   d64cc:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d64ce:	601a      	str	r2, [r3, #0]
   d64d0:	4770      	bx	lr
   d64d2:	bf00      	nop
   d64d4:	2003dca0 	.word	0x2003dca0
   d64d8:	2003e278 	.word	0x2003e278

000d64dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d64dc:	2100      	movs	r1, #0
   d64de:	f7ff b953 	b.w	d5788 <system_delay_ms>

000d64e2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d64e2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d64e4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d64e6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d64e8:	b113      	cbz	r3, d64f0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d64ea:	2203      	movs	r2, #3
   d64ec:	4601      	mov	r1, r0
   d64ee:	4798      	blx	r3
    }
   d64f0:	4620      	mov	r0, r4
   d64f2:	bd10      	pop	{r4, pc}

000d64f4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d64f4:	b510      	push	{r4, lr}
   d64f6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d64f8:	f7ff fff3 	bl	d64e2 <_ZNSt14_Function_baseD1Ev>
   d64fc:	4620      	mov	r0, r4
   d64fe:	bd10      	pop	{r4, pc}

000d6500 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6500:	4803      	ldr	r0, [pc, #12]	; (d6510 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6502:	4a04      	ldr	r2, [pc, #16]	; (d6514 <_GLOBAL__sub_I_RGB+0x14>)
   d6504:	4904      	ldr	r1, [pc, #16]	; (d6518 <_GLOBAL__sub_I_RGB+0x18>)
   d6506:	2300      	movs	r3, #0
   d6508:	6083      	str	r3, [r0, #8]
   d650a:	f001 b96d 	b.w	d77e8 <__aeabi_atexit>
   d650e:	bf00      	nop
   d6510:	2003e288 	.word	0x2003e288
   d6514:	2003dd58 	.word	0x2003dd58
   d6518:	000d64f5 	.word	0x000d64f5

000d651c <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d651c:	4770      	bx	lr

000d651e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d651e:	7d00      	ldrb	r0, [r0, #20]
   d6520:	4770      	bx	lr
	...

000d6524 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d6524:	7d03      	ldrb	r3, [r0, #20]
   d6526:	b11b      	cbz	r3, d6530 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d6528:	6983      	ldr	r3, [r0, #24]
   d652a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d652e:	d102      	bne.n	d6536 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d6530:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6548 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d6534:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d6536:	ee07 3a90 	vmov	s15, r3
   d653a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d654c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d653e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6542:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6546:	4770      	bx	lr
   d6548:	00000000 	.word	0x00000000
   d654c:	42c80000 	.word	0x42c80000

000d6550 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6550:	7d03      	ldrb	r3, [r0, #20]
   d6552:	b11b      	cbz	r3, d655c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d6554:	6a03      	ldr	r3, [r0, #32]
   d6556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d655a:	d102      	bne.n	d6562 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d655c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6574 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6560:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d6562:	ee07 3a90 	vmov	s15, r3
   d6566:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6578 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d656a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d656e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6572:	4770      	bx	lr
   d6574:	00000000 	.word	0x00000000
   d6578:	42c80000 	.word	0x42c80000

000d657c <_ZN14CellularSignalD0Ev>:
   d657c:	b510      	push	{r4, lr}
   d657e:	2128      	movs	r1, #40	; 0x28
   d6580:	4604      	mov	r4, r0
   d6582:	f001 f93f 	bl	d7804 <_ZdlPvj>
   d6586:	4620      	mov	r0, r4
   d6588:	bd10      	pop	{r4, pc}
	...

000d658c <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d658c:	7d03      	ldrb	r3, [r0, #20]
   d658e:	b17b      	cbz	r3, d65b0 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6590:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d6592:	2b00      	cmp	r3, #0
   d6594:	db0c      	blt.n	d65b0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d6596:	ee07 3a90 	vmov	s15, r3
   d659a:	eddf 6a07 	vldr	s13, [pc, #28]	; d65b8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d659e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d65bc <_ZNK14CellularSignal10getQualityEv+0x30>
   d65a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d65a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d65aa:	ee27 0a80 	vmul.f32	s0, s15, s0
   d65ae:	4770      	bx	lr
    }

    return -1.0f;
   d65b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d65b4:	4770      	bx	lr
   d65b6:	bf00      	nop
   d65b8:	477fff00 	.word	0x477fff00
   d65bc:	42c80000 	.word	0x42c80000

000d65c0 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d65c0:	7d03      	ldrb	r3, [r0, #20]
   d65c2:	b17b      	cbz	r3, d65e4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d65c4:	69c3      	ldr	r3, [r0, #28]
   d65c6:	2b00      	cmp	r3, #0
   d65c8:	db0c      	blt.n	d65e4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d65ca:	ee07 3a90 	vmov	s15, r3
   d65ce:	eddf 6a07 	vldr	s13, [pc, #28]	; d65ec <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d65d2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d65f0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d65d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d65da:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d65de:	ee27 0a80 	vmul.f32	s0, s15, s0
   d65e2:	4770      	bx	lr
    }

    return -1.0f;
   d65e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d65e8:	4770      	bx	lr
   d65ea:	bf00      	nop
   d65ec:	477fff00 	.word	0x477fff00
   d65f0:	42c80000 	.word	0x42c80000

000d65f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d65f4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d65f6:	460d      	mov	r5, r1
   d65f8:	f100 0410 	add.w	r4, r0, #16
   d65fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6600:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6604:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d6608:	2001      	movs	r0, #1
   d660a:	bd30      	pop	{r4, r5, pc}

000d660c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6610:	4607      	mov	r7, r0
   d6612:	460c      	mov	r4, r1
{
    if (base == 0) {
   d6614:	4615      	mov	r5, r2
   d6616:	b92a      	cbnz	r2, d6624 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d6618:	6803      	ldr	r3, [r0, #0]
   d661a:	b2c9      	uxtb	r1, r1
   d661c:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d661e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d6622:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6624:	2900      	cmp	r1, #0
   d6626:	da07      	bge.n	d6638 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d6628:	2a0a      	cmp	r2, #10
   d662a:	d105      	bne.n	d6638 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d662c:	212d      	movs	r1, #45	; 0x2d
   d662e:	f7ff fe1d 	bl	d626c <_ZN5Print5printEc>
            val = -n;
   d6632:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6634:	4606      	mov	r6, r0
            val = -n;
   d6636:	e001      	b.n	d663c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d6638:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d663a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d663c:	b2ea      	uxtb	r2, r5
   d663e:	4638      	mov	r0, r7
   d6640:	f7ff fe2d 	bl	d629e <_ZN5Print11printNumberEmh>
    }
}
   d6644:	4430      	add	r0, r6
   d6646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d664a <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d664a:	b570      	push	{r4, r5, r6, lr}
   d664c:	460d      	mov	r5, r1
   d664e:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6650:	220a      	movs	r2, #10
   d6652:	6881      	ldr	r1, [r0, #8]
   d6654:	4628      	mov	r0, r5
   d6656:	f7ff ffd9 	bl	d660c <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d665a:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d665c:	4604      	mov	r4, r0
    n += p.print(',');
   d665e:	4628      	mov	r0, r5
   d6660:	f7ff fe04 	bl	d626c <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d6664:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d6666:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d6668:	68f1      	ldr	r1, [r6, #12]
   d666a:	4628      	mov	r0, r5
   d666c:	f7ff ffce 	bl	d660c <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d6670:	4420      	add	r0, r4
   d6672:	bd70      	pop	{r4, r5, r6, pc}

000d6674 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d6674:	f1a0 0004 	sub.w	r0, r0, #4
   d6678:	f7ff bfe7 	b.w	d664a <_ZNK14CellularSignal7printToER5Print>

000d667c <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d667c:	0909      	lsrs	r1, r1, #4
   d667e:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d6682:	ee07 0a90 	vmov	s15, r0
   d6686:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d668a:	eddf 7a02 	vldr	s15, [pc, #8]	; d6694 <_ZN6detail9_getVCellEhh+0x18>
   d668e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d6692:	4770      	bx	lr
   d6694:	44480000 	.word	0x44480000

000d6698 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6698:	6800      	ldr	r0, [r0, #0]
   d669a:	f000 bb72 	b.w	d6d82 <_ZN7TwoWire4lockEv>

000d669e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d669e:	b510      	push	{r4, lr}
   d66a0:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d66a2:	6001      	str	r1, [r0, #0]
   d66a4:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d66a6:	b10a      	cbz	r2, d66ac <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d66a8:	f7ff fff6 	bl	d6698 <_ZN9FuelGauge4lockEv>
    }
}
   d66ac:	4620      	mov	r0, r4
   d66ae:	bd10      	pop	{r4, pc}

000d66b0 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d66b0:	b538      	push	{r3, r4, r5, lr}
   d66b2:	4604      	mov	r4, r0
   d66b4:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d66b6:	f001 f871 	bl	d779c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d66ba:	462a      	mov	r2, r5
   d66bc:	4601      	mov	r1, r0
   d66be:	4620      	mov	r0, r4
   d66c0:	f7ff ffed 	bl	d669e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d66c4:	4620      	mov	r0, r4
   d66c6:	bd38      	pop	{r3, r4, r5, pc}

000d66c8 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d66c8:	6800      	ldr	r0, [r0, #0]
   d66ca:	f000 bb63 	b.w	d6d94 <_ZN7TwoWire6unlockEv>

000d66ce <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d66ce:	b510      	push	{r4, lr}
{
    if (lock_) {
   d66d0:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d66d2:	4604      	mov	r4, r0
{
    if (lock_) {
   d66d4:	b10b      	cbz	r3, d66da <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d66d6:	f7ff fff7 	bl	d66c8 <_ZN9FuelGauge6unlockEv>
    }
}
   d66da:	4620      	mov	r0, r4
   d66dc:	bd10      	pop	{r4, pc}

000d66de <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d66de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66e0:	4604      	mov	r4, r0
   d66e2:	4616      	mov	r6, r2
   d66e4:	461d      	mov	r5, r3
   d66e6:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d66e8:	f7ff ffd6 	bl	d6698 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d66ec:	6820      	ldr	r0, [r4, #0]
   d66ee:	2136      	movs	r1, #54	; 0x36
   d66f0:	f000 fb3c 	bl	d6d6c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d66f4:	6820      	ldr	r0, [r4, #0]
   d66f6:	6803      	ldr	r3, [r0, #0]
   d66f8:	4639      	mov	r1, r7
   d66fa:	689b      	ldr	r3, [r3, #8]
   d66fc:	4798      	blx	r3
    i2c_.endTransmission(true);
   d66fe:	2101      	movs	r1, #1
   d6700:	6820      	ldr	r0, [r4, #0]
   d6702:	f000 fb36 	bl	d6d72 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d6706:	2202      	movs	r2, #2
   d6708:	2136      	movs	r1, #54	; 0x36
   d670a:	2301      	movs	r3, #1
   d670c:	6820      	ldr	r0, [r4, #0]
   d670e:	f000 fb17 	bl	d6d40 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d6712:	6820      	ldr	r0, [r4, #0]
   d6714:	6803      	ldr	r3, [r0, #0]
   d6716:	695b      	ldr	r3, [r3, #20]
   d6718:	4798      	blx	r3
   d671a:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d671c:	6820      	ldr	r0, [r4, #0]
   d671e:	6803      	ldr	r3, [r0, #0]
   d6720:	695b      	ldr	r3, [r3, #20]
   d6722:	4798      	blx	r3
   d6724:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6726:	4620      	mov	r0, r4
}
   d6728:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d672c:	f7ff bfcc 	b.w	d66c8 <_ZN9FuelGauge6unlockEv>

000d6730 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d6730:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d6732:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d6734:	2200      	movs	r2, #0
   d6736:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d673a:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d673e:	2102      	movs	r1, #2
   d6740:	f10d 0206 	add.w	r2, sp, #6
   d6744:	f7ff ffcb 	bl	d66de <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d6748:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d674c:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d6750:	b003      	add	sp, #12
   d6752:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d6756:	f7ff bf91 	b.w	d667c <_ZN6detail9_getVCellEhh>
	...

000d675c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d675c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d675e:	4b0c      	ldr	r3, [pc, #48]	; (d6790 <serialEventRun+0x34>)
   d6760:	b133      	cbz	r3, d6770 <serialEventRun+0x14>
   d6762:	f000 f969 	bl	d6a38 <_Z16_fetch_usbserialv>
   d6766:	6803      	ldr	r3, [r0, #0]
   d6768:	691b      	ldr	r3, [r3, #16]
   d676a:	4798      	blx	r3
   d676c:	2800      	cmp	r0, #0
   d676e:	dc09      	bgt.n	d6784 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6770:	4b08      	ldr	r3, [pc, #32]	; (d6794 <serialEventRun+0x38>)
   d6772:	b163      	cbz	r3, d678e <serialEventRun+0x32>
   d6774:	f000 fa64 	bl	d6c40 <_Z22__fetch_global_Serial1v>
   d6778:	6803      	ldr	r3, [r0, #0]
   d677a:	691b      	ldr	r3, [r3, #16]
   d677c:	4798      	blx	r3
   d677e:	2800      	cmp	r0, #0
   d6780:	dc03      	bgt.n	d678a <serialEventRun+0x2e>
   d6782:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6784:	f3af 8000 	nop.w
   d6788:	e7f2      	b.n	d6770 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d678a:	f3af 8000 	nop.w
   d678e:	bd08      	pop	{r3, pc}
	...

000d6798 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6798:	b508      	push	{r3, lr}
	serialEventRun();
   d679a:	f7ff ffdf 	bl	d675c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d679e:	f7fe fe63 	bl	d5468 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67a2:	4b01      	ldr	r3, [pc, #4]	; (d67a8 <_post_loop+0x10>)
   d67a4:	6018      	str	r0, [r3, #0]
   d67a6:	bd08      	pop	{r3, pc}
   d67a8:	2003e5f0 	.word	0x2003e5f0

000d67ac <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d67ac:	4802      	ldr	r0, [pc, #8]	; (d67b8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d67ae:	4a03      	ldr	r2, [pc, #12]	; (d67bc <_Z33system_initialize_user_backup_ramv+0x10>)
   d67b0:	4903      	ldr	r1, [pc, #12]	; (d67c0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d67b2:	1a12      	subs	r2, r2, r0
   d67b4:	f002 b902 	b.w	d89bc <memcpy>
   d67b8:	2003f400 	.word	0x2003f400
   d67bc:	2003f404 	.word	0x2003f404
   d67c0:	000da8e8 	.word	0x000da8e8

000d67c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d67c4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67c6:	2300      	movs	r3, #0
   d67c8:	9300      	str	r3, [sp, #0]
   d67ca:	461a      	mov	r2, r3
   d67cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67d0:	f7fe fff4 	bl	d57bc <system_ctrl_set_result>
}
   d67d4:	b003      	add	sp, #12
   d67d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d67dc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d67dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d67de:	8843      	ldrh	r3, [r0, #2]
   d67e0:	2b0a      	cmp	r3, #10
   d67e2:	d008      	beq.n	d67f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d67e4:	2b50      	cmp	r3, #80	; 0x50
   d67e6:	d109      	bne.n	d67fc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d67e8:	4b09      	ldr	r3, [pc, #36]	; (d6810 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d67ea:	681b      	ldr	r3, [r3, #0]
   d67ec:	b13b      	cbz	r3, d67fe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d67ee:	b003      	add	sp, #12
   d67f0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d67f4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d67f6:	f7ff ffe5 	bl	d67c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d67fa:	e006      	b.n	d680a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67fc:	2300      	movs	r3, #0
   d67fe:	9300      	str	r3, [sp, #0]
   d6800:	461a      	mov	r2, r3
   d6802:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6806:	f7fe ffd9 	bl	d57bc <system_ctrl_set_result>
        break;
    }
}
   d680a:	b003      	add	sp, #12
   d680c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6810:	2003e298 	.word	0x2003e298

000d6814 <module_user_init_hook>:

void module_user_init_hook()
{
   d6814:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6816:	4c10      	ldr	r4, [pc, #64]	; (d6858 <module_user_init_hook+0x44>)
   d6818:	4d10      	ldr	r5, [pc, #64]	; (d685c <module_user_init_hook+0x48>)
   d681a:	6823      	ldr	r3, [r4, #0]
   d681c:	42ab      	cmp	r3, r5
   d681e:	4b10      	ldr	r3, [pc, #64]	; (d6860 <module_user_init_hook+0x4c>)
   d6820:	bf0c      	ite	eq
   d6822:	2201      	moveq	r2, #1
   d6824:	2200      	movne	r2, #0
   d6826:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6828:	d002      	beq.n	d6830 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d682a:	f7ff ffbf 	bl	d67ac <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d682e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6830:	f7fe fe12 	bl	d5458 <HAL_RNG_GetRandomNumber>
   d6834:	4604      	mov	r4, r0
    srand(seed);
   d6836:	f002 f8ef 	bl	d8a18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d683a:	4b0a      	ldr	r3, [pc, #40]	; (d6864 <module_user_init_hook+0x50>)
   d683c:	b113      	cbz	r3, d6844 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d683e:	4620      	mov	r0, r4
   d6840:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6844:	2100      	movs	r1, #0
   d6846:	4807      	ldr	r0, [pc, #28]	; (d6864 <module_user_init_hook+0x50>)
   d6848:	f7ff f854 	bl	d58f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d684c:	2100      	movs	r1, #0
   d684e:	4806      	ldr	r0, [pc, #24]	; (d6868 <module_user_init_hook+0x54>)
}
   d6850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6854:	f7fe bfa8 	b.w	d57a8 <system_ctrl_set_app_request_handler>
   d6858:	2003f400 	.word	0x2003f400
   d685c:	9a271c1e 	.word	0x9a271c1e
   d6860:	2003e29c 	.word	0x2003e29c
   d6864:	00000000 	.word	0x00000000
   d6868:	000d67dd 	.word	0x000d67dd

000d686c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d686c:	4770      	bx	lr

000d686e <_ZN9IPAddressD0Ev>:
   d686e:	b510      	push	{r4, lr}
   d6870:	2118      	movs	r1, #24
   d6872:	4604      	mov	r4, r0
   d6874:	f000 ffc6 	bl	d7804 <_ZdlPvj>
   d6878:	4620      	mov	r0, r4
   d687a:	bd10      	pop	{r4, pc}

000d687c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d687c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d687e:	7d03      	ldrb	r3, [r0, #20]
   d6880:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6882:	b08d      	sub	sp, #52	; 0x34
   d6884:	460e      	mov	r6, r1
   d6886:	f100 0704 	add.w	r7, r0, #4
   d688a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d688e:	d002      	beq.n	d6896 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6890:	f100 0508 	add.w	r5, r0, #8
   d6894:	e018      	b.n	d68c8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6896:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6898:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d689a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d689e:	232f      	movs	r3, #47	; 0x2f
   d68a0:	462a      	mov	r2, r5
   d68a2:	200a      	movs	r0, #10
   d68a4:	f7fe fe38 	bl	d5518 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d68a8:	4628      	mov	r0, r5
   d68aa:	f002 fe03 	bl	d94b4 <strlen>
   d68ae:	6833      	ldr	r3, [r6, #0]
   d68b0:	4602      	mov	r2, r0
   d68b2:	68db      	ldr	r3, [r3, #12]
   d68b4:	4629      	mov	r1, r5
   d68b6:	4630      	mov	r0, r6
   d68b8:	4798      	blx	r3
   d68ba:	e00f      	b.n	d68dc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d68bc:	b124      	cbz	r4, d68c8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d68be:	212e      	movs	r1, #46	; 0x2e
   d68c0:	4630      	mov	r0, r6
   d68c2:	f7ff fcd3 	bl	d626c <_ZN5Print5printEc>
   d68c6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d68c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d68cc:	220a      	movs	r2, #10
   d68ce:	4630      	mov	r0, r6
   d68d0:	f7ff fce5 	bl	d629e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68d4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68d6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68d8:	d1f0      	bne.n	d68bc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68da:	4620      	mov	r0, r4
    }
    return n;
}
   d68dc:	b00d      	add	sp, #52	; 0x34
   d68de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68e0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d68e0:	b510      	push	{r4, lr}
   d68e2:	4b05      	ldr	r3, [pc, #20]	; (d68f8 <_ZN9IPAddressC1Ev+0x18>)
   d68e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d68e6:	2211      	movs	r2, #17
   d68e8:	f840 3b04 	str.w	r3, [r0], #4
   d68ec:	2100      	movs	r1, #0
   d68ee:	f002 f88b 	bl	d8a08 <memset>
{
    clear();
}
   d68f2:	4620      	mov	r0, r4
   d68f4:	bd10      	pop	{r4, pc}
   d68f6:	bf00      	nop
   d68f8:	000da20c 	.word	0x000da20c

000d68fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d68fc:	4603      	mov	r3, r0
   d68fe:	4a07      	ldr	r2, [pc, #28]	; (d691c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6900:	b510      	push	{r4, lr}
   d6902:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6906:	f101 0210 	add.w	r2, r1, #16
   d690a:	f851 4b04 	ldr.w	r4, [r1], #4
   d690e:	f843 4b04 	str.w	r4, [r3], #4
   d6912:	4291      	cmp	r1, r2
   d6914:	d1f9      	bne.n	d690a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6916:	780a      	ldrb	r2, [r1, #0]
   d6918:	701a      	strb	r2, [r3, #0]
}
   d691a:	bd10      	pop	{r4, pc}
   d691c:	000da20c 	.word	0x000da20c

000d6920 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6920:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6922:	2b04      	cmp	r3, #4
   d6924:	d101      	bne.n	d692a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6926:	6840      	ldr	r0, [r0, #4]
   d6928:	e008      	b.n	d693c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d692a:	2b06      	cmp	r3, #6
   d692c:	d10a      	bne.n	d6944 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d692e:	6843      	ldr	r3, [r0, #4]
   d6930:	b953      	cbnz	r3, d6948 <_ZNK9IPAddresscvbEv+0x28>
   d6932:	6883      	ldr	r3, [r0, #8]
   d6934:	b943      	cbnz	r3, d6948 <_ZNK9IPAddresscvbEv+0x28>
   d6936:	68c3      	ldr	r3, [r0, #12]
   d6938:	b933      	cbnz	r3, d6948 <_ZNK9IPAddresscvbEv+0x28>
   d693a:	6900      	ldr	r0, [r0, #16]
   d693c:	3000      	adds	r0, #0
   d693e:	bf18      	it	ne
   d6940:	2001      	movne	r0, #1
   d6942:	4770      	bx	lr
    } else {
        return false;
   d6944:	2000      	movs	r0, #0
   d6946:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6948:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d694a:	4770      	bx	lr

000d694c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d694c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d694e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6952:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6956:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d695a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d695e:	2304      	movs	r3, #4
   d6960:	6041      	str	r1, [r0, #4]
   d6962:	7503      	strb	r3, [r0, #20]
   d6964:	bd10      	pop	{r4, pc}

000d6966 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6966:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6968:	780d      	ldrb	r5, [r1, #0]
   d696a:	788b      	ldrb	r3, [r1, #2]
   d696c:	784a      	ldrb	r2, [r1, #1]
   d696e:	78c9      	ldrb	r1, [r1, #3]
   d6970:	9100      	str	r1, [sp, #0]
   d6972:	4629      	mov	r1, r5
   d6974:	f7ff ffea 	bl	d694c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6978:	b003      	add	sp, #12
   d697a:	bd30      	pop	{r4, r5, pc}

000d697c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d697c:	7441      	strb	r1, [r0, #17]
   d697e:	4770      	bx	lr

000d6980 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6980:	4770      	bx	lr

000d6982 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6982:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6984:	2100      	movs	r1, #0
   d6986:	7c00      	ldrb	r0, [r0, #16]
   d6988:	f7fe fece 	bl	d5728 <HAL_USB_USART_Receive_Data>
}
   d698c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6990:	bf28      	it	cs
   d6992:	f04f 30ff 	movcs.w	r0, #4294967295
   d6996:	bd08      	pop	{r3, pc}

000d6998 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6998:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d699a:	2101      	movs	r1, #1
   d699c:	7c00      	ldrb	r0, [r0, #16]
   d699e:	f7fe fec3 	bl	d5728 <HAL_USB_USART_Receive_Data>
}
   d69a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69a6:	bf28      	it	cs
   d69a8:	f04f 30ff 	movcs.w	r0, #4294967295
   d69ac:	bd08      	pop	{r3, pc}

000d69ae <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d69ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d69b0:	7c00      	ldrb	r0, [r0, #16]
   d69b2:	f7fe feb1 	bl	d5718 <HAL_USB_USART_Available_Data_For_Write>
}
   d69b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69ba:	bd08      	pop	{r3, pc}

000d69bc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d69bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d69be:	7c00      	ldrb	r0, [r0, #16]
   d69c0:	f7fe fea2 	bl	d5708 <HAL_USB_USART_Available_Data>
}
   d69c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69c8:	bd08      	pop	{r3, pc}

000d69ca <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d69ca:	7c00      	ldrb	r0, [r0, #16]
   d69cc:	f7fe bebc 	b.w	d5748 <HAL_USB_USART_Flush_Data>

000d69d0 <_ZN9USBSerialD0Ev>:
   d69d0:	b510      	push	{r4, lr}
   d69d2:	2114      	movs	r1, #20
   d69d4:	4604      	mov	r4, r0
   d69d6:	f000 ff15 	bl	d7804 <_ZdlPvj>
   d69da:	4620      	mov	r0, r4
   d69dc:	bd10      	pop	{r4, pc}

000d69de <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69de:	b538      	push	{r3, r4, r5, lr}
   d69e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69e2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69e4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69e6:	f7fe fe97 	bl	d5718 <HAL_USB_USART_Available_Data_For_Write>
   d69ea:	2800      	cmp	r0, #0
   d69ec:	dc01      	bgt.n	d69f2 <_ZN9USBSerial5writeEh+0x14>
   d69ee:	7c60      	ldrb	r0, [r4, #17]
   d69f0:	b128      	cbz	r0, d69fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d69f2:	4629      	mov	r1, r5
   d69f4:	7c20      	ldrb	r0, [r4, #16]
   d69f6:	f7fe fe9f 	bl	d5738 <HAL_USB_USART_Send_Data>
   d69fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d69fe:	bd38      	pop	{r3, r4, r5, pc}

000d6a00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a00:	b510      	push	{r4, lr}
   d6a02:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a04:	2300      	movs	r3, #0
   d6a06:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a0c:	60a3      	str	r3, [r4, #8]
   d6a0e:	4b05      	ldr	r3, [pc, #20]	; (d6a24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a10:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6a12:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a14:	4608      	mov	r0, r1
{
  _serial = serial;
   d6a16:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6a18:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6a1a:	4611      	mov	r1, r2
   d6a1c:	f7fe fe6c 	bl	d56f8 <HAL_USB_USART_Init>
}
   d6a20:	4620      	mov	r0, r4
   d6a22:	bd10      	pop	{r4, pc}
   d6a24:	000da220 	.word	0x000da220

000d6a28 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a2a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a2c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a2e:	2100      	movs	r1, #0
   d6a30:	f001 ffea 	bl	d8a08 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a34:	4620      	mov	r0, r4
   d6a36:	bd10      	pop	{r4, pc}

000d6a38 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a38:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a3a:	4d0e      	ldr	r5, [pc, #56]	; (d6a74 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6a3c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a3e:	a801      	add	r0, sp, #4
   d6a40:	f7ff fff2 	bl	d6a28 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a44:	6829      	ldr	r1, [r5, #0]
   d6a46:	f011 0401 	ands.w	r4, r1, #1
   d6a4a:	d110      	bne.n	d6a6e <_Z16_fetch_usbserialv+0x36>
   d6a4c:	4628      	mov	r0, r5
   d6a4e:	f7fd fb28 	bl	d40a2 <__cxa_guard_acquire>
   d6a52:	b160      	cbz	r0, d6a6e <_Z16_fetch_usbserialv+0x36>
   d6a54:	aa01      	add	r2, sp, #4
   d6a56:	4621      	mov	r1, r4
   d6a58:	4807      	ldr	r0, [pc, #28]	; (d6a78 <_Z16_fetch_usbserialv+0x40>)
   d6a5a:	f7ff ffd1 	bl	d6a00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6a5e:	4628      	mov	r0, r5
   d6a60:	f7fd fb24 	bl	d40ac <__cxa_guard_release>
   d6a64:	4a05      	ldr	r2, [pc, #20]	; (d6a7c <_Z16_fetch_usbserialv+0x44>)
   d6a66:	4906      	ldr	r1, [pc, #24]	; (d6a80 <_Z16_fetch_usbserialv+0x48>)
   d6a68:	4803      	ldr	r0, [pc, #12]	; (d6a78 <_Z16_fetch_usbserialv+0x40>)
   d6a6a:	f000 febd 	bl	d77e8 <__aeabi_atexit>
	return _usbserial;
}
   d6a6e:	4802      	ldr	r0, [pc, #8]	; (d6a78 <_Z16_fetch_usbserialv+0x40>)
   d6a70:	b007      	add	sp, #28
   d6a72:	bd30      	pop	{r4, r5, pc}
   d6a74:	2003e2a0 	.word	0x2003e2a0
   d6a78:	2003e2a4 	.word	0x2003e2a4
   d6a7c:	2003dd58 	.word	0x2003dd58
   d6a80:	000d6981 	.word	0x000d6981

000d6a84 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a84:	2200      	movs	r2, #0
   d6a86:	4611      	mov	r1, r2
   d6a88:	6840      	ldr	r0, [r0, #4]
   d6a8a:	f7fe bee3 	b.w	d5854 <network_listening>

000d6a8e <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a8e:	2200      	movs	r2, #0
   d6a90:	4611      	mov	r1, r2
   d6a92:	6840      	ldr	r0, [r0, #4]
   d6a94:	f7fe beee 	b.w	d5874 <network_get_listen_timeout>

000d6a98 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a98:	2200      	movs	r2, #0
   d6a9a:	6840      	ldr	r0, [r0, #4]
   d6a9c:	f7fe bee2 	b.w	d5864 <network_set_listen_timeout>

000d6aa0 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6aa0:	2200      	movs	r2, #0
   d6aa2:	f081 0101 	eor.w	r1, r1, #1
   d6aa6:	6840      	ldr	r0, [r0, #4]
   d6aa8:	f7fe becc 	b.w	d5844 <network_listen>

000d6aac <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6aac:	2300      	movs	r3, #0
   d6aae:	461a      	mov	r2, r3
   d6ab0:	4619      	mov	r1, r3
   d6ab2:	6840      	ldr	r0, [r0, #4]
   d6ab4:	f7fe bebe 	b.w	d5834 <network_off>

000d6ab8 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6ab8:	2300      	movs	r3, #0
   d6aba:	461a      	mov	r2, r3
   d6abc:	4619      	mov	r1, r3
   d6abe:	6840      	ldr	r0, [r0, #4]
   d6ac0:	f7fe beb0 	b.w	d5824 <network_on>

000d6ac4 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ac4:	2200      	movs	r2, #0
   d6ac6:	4611      	mov	r1, r2
   d6ac8:	6840      	ldr	r0, [r0, #4]
   d6aca:	f7fe be93 	b.w	d57f4 <network_connecting>

000d6ace <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6ace:	2200      	movs	r2, #0
   d6ad0:	2102      	movs	r1, #2
   d6ad2:	6840      	ldr	r0, [r0, #4]
   d6ad4:	f7fe be96 	b.w	d5804 <network_disconnect>

000d6ad8 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ad8:	2300      	movs	r3, #0
   d6ada:	461a      	mov	r2, r3
   d6adc:	6840      	ldr	r0, [r0, #4]
   d6ade:	f7fe be81 	b.w	d57e4 <network_connect>
	...

000d6ae4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6ae6:	4b1b      	ldr	r3, [pc, #108]	; (d6b54 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6ae8:	6003      	str	r3, [r0, #0]
   d6aea:	2500      	movs	r5, #0
   d6aec:	460f      	mov	r7, r1
   d6aee:	3328      	adds	r3, #40	; 0x28
   d6af0:	2618      	movs	r6, #24
   d6af2:	b089      	sub	sp, #36	; 0x24
   d6af4:	6043      	str	r3, [r0, #4]
   d6af6:	6085      	str	r5, [r0, #8]
   d6af8:	60c5      	str	r5, [r0, #12]
   d6afa:	4632      	mov	r2, r6
   d6afc:	4629      	mov	r1, r5
   d6afe:	4604      	mov	r4, r0
   d6b00:	3010      	adds	r0, #16
   d6b02:	f001 ff81 	bl	d8a08 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6b06:	462a      	mov	r2, r5
   d6b08:	4629      	mov	r1, r5
   d6b0a:	6878      	ldr	r0, [r7, #4]
   d6b0c:	f7fe fe82 	bl	d5814 <network_ready>
   d6b10:	b908      	cbnz	r0, d6b16 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d6b12:	60a0      	str	r0, [r4, #8]
            return sig;
   d6b14:	e01b      	b.n	d6b4e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6b16:	4629      	mov	r1, r5
   d6b18:	4632      	mov	r2, r6
   d6b1a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6b1c:	9500      	str	r5, [sp, #0]
   d6b1e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6b20:	f001 ff72 	bl	d8a08 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6b24:	a902      	add	r1, sp, #8
   d6b26:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6b28:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6b2c:	f7fe fddc 	bl	d56e8 <cellular_signal>
   d6b30:	b110      	cbz	r0, d6b38 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d6b32:	2301      	movs	r3, #1
   d6b34:	60a3      	str	r3, [r4, #8]
            return sig;
   d6b36:	e00a      	b.n	d6b4e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6b38:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6b3a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6b3c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6b3e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6b40:	b90b      	cbnz	r3, d6b46 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d6b42:	2302      	movs	r3, #2
   d6b44:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d6b46:	a902      	add	r1, sp, #8
   d6b48:	4620      	mov	r0, r4
   d6b4a:	f7ff fd53 	bl	d65f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6b4e:	4620      	mov	r0, r4
   d6b50:	b009      	add	sp, #36	; 0x24
   d6b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b54:	000da1d8 	.word	0x000da1d8

000d6b58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6b58:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6b5a:	4c08      	ldr	r4, [pc, #32]	; (d6b7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6b5c:	2528      	movs	r5, #40	; 0x28
   d6b5e:	462a      	mov	r2, r5
   d6b60:	2100      	movs	r1, #0
   d6b62:	4620      	mov	r0, r4
   d6b64:	f001 ff50 	bl	d8a08 <memset>
        cid = -1;
   d6b68:	f04f 33ff 	mov.w	r3, #4294967295
   d6b6c:	6063      	str	r3, [r4, #4]
   d6b6e:	4b04      	ldr	r3, [pc, #16]	; (d6b80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6b70:	8025      	strh	r5, [r4, #0]
   d6b72:	2204      	movs	r2, #4
   d6b74:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6b76:	4a03      	ldr	r2, [pc, #12]	; (d6b84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6b78:	601a      	str	r2, [r3, #0]
   d6b7a:	bd38      	pop	{r3, r4, r5, pc}
   d6b7c:	2003e2c0 	.word	0x2003e2c0
   d6b80:	2003e2b8 	.word	0x2003e2b8
   d6b84:	000da250 	.word	0x000da250

000d6b88 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6b88:	4770      	bx	lr

000d6b8a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b8a:	7441      	strb	r1, [r0, #17]
   d6b8c:	4770      	bx	lr

000d6b8e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6b8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6b90:	7c00      	ldrb	r0, [r0, #16]
   d6b92:	f7fe fd11 	bl	d55b8 <HAL_USART_Available_Data_For_Write>
}
   d6b96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b9a:	bd08      	pop	{r3, pc}

000d6b9c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6b9c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6b9e:	7c00      	ldrb	r0, [r0, #16]
   d6ba0:	f7fe fce2 	bl	d5568 <HAL_USART_Available_Data>
}
   d6ba4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ba8:	bd08      	pop	{r3, pc}

000d6baa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6baa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6bac:	7c00      	ldrb	r0, [r0, #16]
   d6bae:	f7fe fceb 	bl	d5588 <HAL_USART_Peek_Data>
}
   d6bb2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bb6:	bf28      	it	cs
   d6bb8:	f04f 30ff 	movcs.w	r0, #4294967295
   d6bbc:	bd08      	pop	{r3, pc}

000d6bbe <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6bbe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6bc0:	7c00      	ldrb	r0, [r0, #16]
   d6bc2:	f7fe fcd9 	bl	d5578 <HAL_USART_Read_Data>
}
   d6bc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bca:	bf28      	it	cs
   d6bcc:	f04f 30ff 	movcs.w	r0, #4294967295
   d6bd0:	bd08      	pop	{r3, pc}

000d6bd2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6bd2:	7c00      	ldrb	r0, [r0, #16]
   d6bd4:	f7fe bce0 	b.w	d5598 <HAL_USART_Flush_Data>

000d6bd8 <_ZN11USARTSerialD0Ev>:
   d6bd8:	b510      	push	{r4, lr}
   d6bda:	2114      	movs	r1, #20
   d6bdc:	4604      	mov	r4, r0
   d6bde:	f000 fe11 	bl	d7804 <_ZdlPvj>
   d6be2:	4620      	mov	r0, r4
   d6be4:	bd10      	pop	{r4, pc}

000d6be6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6be6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6be8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6bea:	4604      	mov	r4, r0
   d6bec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6bee:	b925      	cbnz	r5, d6bfa <_ZN11USARTSerial5writeEh+0x14>
   d6bf0:	7c00      	ldrb	r0, [r0, #16]
   d6bf2:	f7fe fce1 	bl	d55b8 <HAL_USART_Available_Data_For_Write>
   d6bf6:	2800      	cmp	r0, #0
   d6bf8:	dd05      	ble.n	d6c06 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6bfa:	4631      	mov	r1, r6
   d6bfc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c02:	f7fe bca9 	b.w	d5558 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c06:	4628      	mov	r0, r5
   d6c08:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6c0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6c0c:	b510      	push	{r4, lr}
   d6c0e:	4604      	mov	r4, r0
   d6c10:	4608      	mov	r0, r1
   d6c12:	4611      	mov	r1, r2
   d6c14:	2200      	movs	r2, #0
   d6c16:	6062      	str	r2, [r4, #4]
   d6c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c1c:	60a2      	str	r2, [r4, #8]
   d6c1e:	4a05      	ldr	r2, [pc, #20]	; (d6c34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6c20:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6c22:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6c24:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6c26:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6c28:	461a      	mov	r2, r3
   d6c2a:	f7fe fc8d 	bl	d5548 <HAL_USART_Init>
}
   d6c2e:	4620      	mov	r0, r4
   d6c30:	bd10      	pop	{r4, pc}
   d6c32:	bf00      	nop
   d6c34:	000da284 	.word	0x000da284

000d6c38 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6c38:	7c00      	ldrb	r0, [r0, #16]
   d6c3a:	f7fe bcb5 	b.w	d55a8 <HAL_USART_Is_Enabled>
	...

000d6c40 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c40:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6c42:	4d0c      	ldr	r5, [pc, #48]	; (d6c74 <_Z22__fetch_global_Serial1v+0x34>)
   d6c44:	6829      	ldr	r1, [r5, #0]
   d6c46:	f011 0401 	ands.w	r4, r1, #1
   d6c4a:	d111      	bne.n	d6c70 <_Z22__fetch_global_Serial1v+0x30>
   d6c4c:	4628      	mov	r0, r5
   d6c4e:	f7fd fa28 	bl	d40a2 <__cxa_guard_acquire>
   d6c52:	b168      	cbz	r0, d6c70 <_Z22__fetch_global_Serial1v+0x30>
   d6c54:	4a08      	ldr	r2, [pc, #32]	; (d6c78 <_Z22__fetch_global_Serial1v+0x38>)
   d6c56:	4b09      	ldr	r3, [pc, #36]	; (d6c7c <_Z22__fetch_global_Serial1v+0x3c>)
   d6c58:	4809      	ldr	r0, [pc, #36]	; (d6c80 <_Z22__fetch_global_Serial1v+0x40>)
   d6c5a:	4621      	mov	r1, r4
   d6c5c:	f7ff ffd6 	bl	d6c0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6c60:	4628      	mov	r0, r5
   d6c62:	f7fd fa23 	bl	d40ac <__cxa_guard_release>
   d6c66:	4a07      	ldr	r2, [pc, #28]	; (d6c84 <_Z22__fetch_global_Serial1v+0x44>)
   d6c68:	4907      	ldr	r1, [pc, #28]	; (d6c88 <_Z22__fetch_global_Serial1v+0x48>)
   d6c6a:	4805      	ldr	r0, [pc, #20]	; (d6c80 <_Z22__fetch_global_Serial1v+0x40>)
   d6c6c:	f000 fdbc 	bl	d77e8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6c70:	4803      	ldr	r0, [pc, #12]	; (d6c80 <_Z22__fetch_global_Serial1v+0x40>)
   d6c72:	bd38      	pop	{r3, r4, r5, pc}
   d6c74:	2003e380 	.word	0x2003e380
   d6c78:	2003e384 	.word	0x2003e384
   d6c7c:	2003e2fc 	.word	0x2003e2fc
   d6c80:	2003e2e8 	.word	0x2003e2e8
   d6c84:	2003dd58 	.word	0x2003dd58
   d6c88:	000d6b89 	.word	0x000d6b89

000d6c8c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6c8c:	4770      	bx	lr

000d6c8e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c90:	4606      	mov	r6, r0
   d6c92:	4615      	mov	r5, r2
   d6c94:	460c      	mov	r4, r1
   d6c96:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c98:	42bc      	cmp	r4, r7
   d6c9a:	d006      	beq.n	d6caa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6c9c:	6833      	ldr	r3, [r6, #0]
   d6c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6ca2:	689b      	ldr	r3, [r3, #8]
   d6ca4:	4630      	mov	r0, r6
   d6ca6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6ca8:	e7f6      	b.n	d6c98 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6caa:	4628      	mov	r0, r5
   d6cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cae <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6cae:	2200      	movs	r2, #0
   d6cb0:	7c00      	ldrb	r0, [r0, #16]
   d6cb2:	f7fe bc99 	b.w	d55e8 <HAL_I2C_Write_Data>

000d6cb6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6cb6:	2100      	movs	r1, #0
   d6cb8:	7c00      	ldrb	r0, [r0, #16]
   d6cba:	f7fe bc9d 	b.w	d55f8 <HAL_I2C_Available_Data>

000d6cbe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6cbe:	2100      	movs	r1, #0
   d6cc0:	7c00      	ldrb	r0, [r0, #16]
   d6cc2:	f7fe bca1 	b.w	d5608 <HAL_I2C_Read_Data>

000d6cc6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6cc6:	2100      	movs	r1, #0
   d6cc8:	7c00      	ldrb	r0, [r0, #16]
   d6cca:	f7fe bca5 	b.w	d5618 <HAL_I2C_Peek_Data>

000d6cce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6cce:	2100      	movs	r1, #0
   d6cd0:	7c00      	ldrb	r0, [r0, #16]
   d6cd2:	f7fe bca9 	b.w	d5628 <HAL_I2C_Flush_Data>

000d6cd6 <_ZN7TwoWireD0Ev>:
   d6cd6:	b510      	push	{r4, lr}
   d6cd8:	2114      	movs	r1, #20
   d6cda:	4604      	mov	r4, r0
   d6cdc:	f000 fd92 	bl	d7804 <_ZdlPvj>
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	bd10      	pop	{r4, pc}

000d6ce4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6ce4:	b510      	push	{r4, lr}
   d6ce6:	4604      	mov	r4, r0
   d6ce8:	2300      	movs	r3, #0
   d6cea:	6063      	str	r3, [r4, #4]
   d6cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6cf0:	60a3      	str	r3, [r4, #8]
   d6cf2:	4b04      	ldr	r3, [pc, #16]	; (d6d04 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6cf4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6cf6:	4608      	mov	r0, r1
   d6cf8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6cfa:	4611      	mov	r1, r2
   d6cfc:	f7fe fca4 	bl	d5648 <HAL_I2C_Init>
}
   d6d00:	4620      	mov	r0, r4
   d6d02:	bd10      	pop	{r4, pc}
   d6d04:	000da2b4 	.word	0x000da2b4

000d6d08 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6d08:	b570      	push	{r4, r5, r6, lr}
   d6d0a:	460c      	mov	r4, r1
   d6d0c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6d0e:	2514      	movs	r5, #20
   d6d10:	4606      	mov	r6, r0
   d6d12:	462a      	mov	r2, r5
   d6d14:	2100      	movs	r1, #0
   d6d16:	a801      	add	r0, sp, #4
   d6d18:	f001 fe76 	bl	d8a08 <memset>
   d6d1c:	7823      	ldrb	r3, [r4, #0]
   d6d1e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6d22:	6863      	ldr	r3, [r4, #4]
   d6d24:	9303      	str	r3, [sp, #12]
   d6d26:	68e3      	ldr	r3, [r4, #12]
   d6d28:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6d2a:	2200      	movs	r2, #0
   d6d2c:	7a23      	ldrb	r3, [r4, #8]
   d6d2e:	7c30      	ldrb	r0, [r6, #16]
   d6d30:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6d34:	a901      	add	r1, sp, #4
   d6d36:	9305      	str	r3, [sp, #20]
   d6d38:	f7fe fc9e 	bl	d5678 <HAL_I2C_Request_Data_Ex>
}
   d6d3c:	b006      	add	sp, #24
   d6d3e:	bd70      	pop	{r4, r5, r6, pc}

000d6d40 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d42:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6d44:	f88d 1000 	strb.w	r1, [sp]
   d6d48:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6d4c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d4e:	bf18      	it	ne
   d6d50:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6d52:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6d54:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d56:	f88d 3008 	strb.w	r3, [sp, #8]
   d6d5a:	f7ff ffd5 	bl	d6d08 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6d5e:	b005      	add	sp, #20
   d6d60:	f85d fb04 	ldr.w	pc, [sp], #4

000d6d64 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6d64:	2200      	movs	r2, #0
   d6d66:	7c00      	ldrb	r0, [r0, #16]
   d6d68:	f7fe bc2e 	b.w	d55c8 <HAL_I2C_Begin_Transmission>

000d6d6c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6d6c:	b2c9      	uxtb	r1, r1
   d6d6e:	f7ff bff9 	b.w	d6d64 <_ZN7TwoWire17beginTransmissionEh>

000d6d72 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6d72:	2200      	movs	r2, #0
   d6d74:	7c00      	ldrb	r0, [r0, #16]
   d6d76:	f7fe bc2f 	b.w	d55d8 <HAL_I2C_End_Transmission>

000d6d7a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6d7a:	2100      	movs	r1, #0
   d6d7c:	7c00      	ldrb	r0, [r0, #16]
   d6d7e:	f7fe bc5b 	b.w	d5638 <HAL_I2C_Is_Enabled>

000d6d82 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6d82:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6d84:	2100      	movs	r1, #0
   d6d86:	7c00      	ldrb	r0, [r0, #16]
   d6d88:	f7fe fc66 	bl	d5658 <HAL_I2C_Acquire>
}
   d6d8c:	fab0 f080 	clz	r0, r0
   d6d90:	0940      	lsrs	r0, r0, #5
   d6d92:	bd08      	pop	{r3, pc}

000d6d94 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6d94:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6d96:	2100      	movs	r1, #0
   d6d98:	7c00      	ldrb	r0, [r0, #16]
   d6d9a:	f7fe fc65 	bl	d5668 <HAL_I2C_Release>
}
   d6d9e:	fab0 f080 	clz	r0, r0
   d6da2:	0940      	lsrs	r0, r0, #5
   d6da4:	bd08      	pop	{r3, pc}

000d6da6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6da6:	2200      	movs	r2, #0
   d6da8:	4611      	mov	r1, r2
   d6daa:	6840      	ldr	r0, [r0, #4]
   d6dac:	f7fe bd52 	b.w	d5854 <network_listening>

000d6db0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6db0:	2200      	movs	r2, #0
   d6db2:	4611      	mov	r1, r2
   d6db4:	6840      	ldr	r0, [r0, #4]
   d6db6:	f7fe bd5d 	b.w	d5874 <network_get_listen_timeout>

000d6dba <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6dba:	2200      	movs	r2, #0
   d6dbc:	6840      	ldr	r0, [r0, #4]
   d6dbe:	f7fe bd51 	b.w	d5864 <network_set_listen_timeout>

000d6dc2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6dc2:	2200      	movs	r2, #0
   d6dc4:	f081 0101 	eor.w	r1, r1, #1
   d6dc8:	6840      	ldr	r0, [r0, #4]
   d6dca:	f7fe bd3b 	b.w	d5844 <network_listen>

000d6dce <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6dce:	2300      	movs	r3, #0
   d6dd0:	461a      	mov	r2, r3
   d6dd2:	2101      	movs	r1, #1
   d6dd4:	6840      	ldr	r0, [r0, #4]
   d6dd6:	f7fe bd2d 	b.w	d5834 <network_off>

000d6dda <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6dda:	2300      	movs	r3, #0
   d6ddc:	461a      	mov	r2, r3
   d6dde:	4619      	mov	r1, r3
   d6de0:	6840      	ldr	r0, [r0, #4]
   d6de2:	f7fe bd1f 	b.w	d5824 <network_on>

000d6de6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6de6:	2200      	movs	r2, #0
   d6de8:	4611      	mov	r1, r2
   d6dea:	6840      	ldr	r0, [r0, #4]
   d6dec:	f7fe bd12 	b.w	d5814 <network_ready>

000d6df0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6df0:	2200      	movs	r2, #0
   d6df2:	4611      	mov	r1, r2
   d6df4:	6840      	ldr	r0, [r0, #4]
   d6df6:	f7fe bcfd 	b.w	d57f4 <network_connecting>

000d6dfa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6dfa:	2200      	movs	r2, #0
   d6dfc:	2102      	movs	r1, #2
   d6dfe:	6840      	ldr	r0, [r0, #4]
   d6e00:	f7fe bd00 	b.w	d5804 <network_disconnect>

000d6e04 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e04:	2300      	movs	r3, #0
   d6e06:	461a      	mov	r2, r3
   d6e08:	6840      	ldr	r0, [r0, #4]
   d6e0a:	f7fe bceb 	b.w	d57e4 <network_connect>

000d6e0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6e0e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e10:	4605      	mov	r5, r0
   d6e12:	b188      	cbz	r0, d6e38 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e14:	6804      	ldr	r4, [r0, #0]
   d6e16:	b14c      	cbz	r4, d6e2c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6e18:	68a3      	ldr	r3, [r4, #8]
   d6e1a:	b11b      	cbz	r3, d6e24 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6e1c:	2203      	movs	r2, #3
   d6e1e:	4621      	mov	r1, r4
   d6e20:	4620      	mov	r0, r4
   d6e22:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e24:	2110      	movs	r1, #16
   d6e26:	4620      	mov	r0, r4
   d6e28:	f000 fcec 	bl	d7804 <_ZdlPvj>
   d6e2c:	4628      	mov	r0, r5
   d6e2e:	2114      	movs	r1, #20
      }
   d6e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e34:	f000 bce6 	b.w	d7804 <_ZdlPvj>
   d6e38:	bd38      	pop	{r3, r4, r5, pc}

000d6e3a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6e3a:	b110      	cbz	r0, d6e42 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6e3c:	6803      	ldr	r3, [r0, #0]
   d6e3e:	685b      	ldr	r3, [r3, #4]
   d6e40:	4718      	bx	r3
   d6e42:	4770      	bx	lr

000d6e44 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6e44:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6e46:	6803      	ldr	r3, [r0, #0]
   d6e48:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6e4a:	b1bb      	cbz	r3, d6e7c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6e4c:	6858      	ldr	r0, [r3, #4]
   d6e4e:	f7fe fb3b 	bl	d54c8 <os_thread_is_current>
   d6e52:	b978      	cbnz	r0, d6e74 <_ZN6ThreadD1Ev+0x30>
   d6e54:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6e56:	7c5a      	ldrb	r2, [r3, #17]
   d6e58:	b912      	cbnz	r2, d6e60 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6e5a:	6858      	ldr	r0, [r3, #4]
   d6e5c:	f7fe fb3c 	bl	d54d8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6e60:	6823      	ldr	r3, [r4, #0]
   d6e62:	6858      	ldr	r0, [r3, #4]
   d6e64:	f7fe fb40 	bl	d54e8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e68:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6e6a:	2300      	movs	r3, #0
   d6e6c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6e6e:	b128      	cbz	r0, d6e7c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6e70:	f7ff ffcd 	bl	d6e0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e74:	6820      	ldr	r0, [r4, #0]
   d6e76:	b108      	cbz	r0, d6e7c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6e78:	f7ff ffc9 	bl	d6e0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6e7c:	4620      	mov	r0, r4
   d6e7e:	bd10      	pop	{r4, pc}

000d6e80 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6e80:	b538      	push	{r3, r4, r5, lr}
   d6e82:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e84:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6e88:	b108      	cbz	r0, d6e8e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6e8a:	f7fd f908 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6e8e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6e92:	b108      	cbz	r0, d6e98 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6e94:	f7fe fb38 	bl	d5508 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e98:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6e9c:	b135      	cbz	r5, d6eac <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e9e:	4628      	mov	r0, r5
   d6ea0:	f7ff ffd0 	bl	d6e44 <_ZN6ThreadD1Ev>
   d6ea4:	2104      	movs	r1, #4
   d6ea6:	4628      	mov	r0, r5
   d6ea8:	f000 fcac 	bl	d7804 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6eac:	6820      	ldr	r0, [r4, #0]
   d6eae:	b108      	cbz	r0, d6eb4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6eb0:	f7ff ffc3 	bl	d6e3a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	bd38      	pop	{r3, r4, r5, pc}

000d6eb8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6eb8:	b510      	push	{r4, lr}
   d6eba:	4b04      	ldr	r3, [pc, #16]	; (d6ecc <_ZN5spark9MeshClassD1Ev+0x14>)
   d6ebc:	4604      	mov	r4, r0
   d6ebe:	f840 3b08 	str.w	r3, [r0], #8
   d6ec2:	f7ff ffdd 	bl	d6e80 <_ZN5spark11MeshPublishD1Ev>
   d6ec6:	4620      	mov	r0, r4
   d6ec8:	bd10      	pop	{r4, pc}
   d6eca:	bf00      	nop
   d6ecc:	000da2dc 	.word	0x000da2dc

000d6ed0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6ed0:	b538      	push	{r3, r4, r5, lr}
   d6ed2:	4c0e      	ldr	r4, [pc, #56]	; (d6f0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6ed4:	4b0e      	ldr	r3, [pc, #56]	; (d6f10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6ed6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6ed8:	2500      	movs	r5, #0
   d6eda:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6edc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6ee0:	6063      	str	r3, [r4, #4]
   d6ee2:	60a5      	str	r5, [r4, #8]
   d6ee4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ee8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6eec:	f7fe fb04 	bl	d54f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6ef0:	4b08      	ldr	r3, [pc, #32]	; (d6f14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6ef2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6ef6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6efa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6efc:	4620      	mov	r0, r4
   d6efe:	4a06      	ldr	r2, [pc, #24]	; (d6f18 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6f00:	4906      	ldr	r1, [pc, #24]	; (d6f1c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6f06:	f000 bc6f 	b.w	d77e8 <__aeabi_atexit>
   d6f0a:	bf00      	nop
   d6f0c:	2003e408 	.word	0x2003e408
   d6f10:	000da390 	.word	0x000da390
   d6f14:	000da2dc 	.word	0x000da2dc
   d6f18:	2003dd58 	.word	0x2003dd58
   d6f1c:	000d6eb9 	.word	0x000d6eb9

000d6f20 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6f22:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6f24:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6f26:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6f2a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6f2c:	2201      	movs	r2, #1
   d6f2e:	f04f 33ff 	mov.w	r3, #4294967295
   d6f32:	4621      	mov	r1, r4
   d6f34:	47a8      	blx	r5
}
   d6f36:	b003      	add	sp, #12
   d6f38:	bd30      	pop	{r4, r5, pc}

000d6f3a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6f3a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6f3c:	6803      	ldr	r3, [r0, #0]
   d6f3e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6f40:	f04f 33ff 	mov.w	r3, #4294967295
   d6f44:	46a4      	mov	ip, r4
}
   d6f46:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6f4a:	4760      	bx	ip

000d6f4c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6f4e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6f50:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6f52:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6f56:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6f58:	4621      	mov	r1, r4
   d6f5a:	4613      	mov	r3, r2
   d6f5c:	2201      	movs	r2, #1
   d6f5e:	47a8      	blx	r5
}
   d6f60:	b003      	add	sp, #12
   d6f62:	bd30      	pop	{r4, r5, pc}

000d6f64 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6f64:	4770      	bx	lr

000d6f66 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6f66:	b538      	push	{r3, r4, r5, lr}
   d6f68:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6f6a:	681a      	ldr	r2, [r3, #0]
   d6f6c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6f6e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6f70:	da05      	bge.n	d6f7e <_ZN9TCPClient9connectedEv+0x18>
   d6f72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6f76:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6f7a:	429a      	cmp	r2, r3
   d6f7c:	d001      	beq.n	d6f82 <_ZN9TCPClient9connectedEv+0x1c>
   d6f7e:	2501      	movs	r5, #1
   d6f80:	e00b      	b.n	d6f9a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6f82:	6803      	ldr	r3, [r0, #0]
   d6f84:	691b      	ldr	r3, [r3, #16]
   d6f86:	4798      	blx	r3
   d6f88:	2800      	cmp	r0, #0
   d6f8a:	bf14      	ite	ne
   d6f8c:	2501      	movne	r5, #1
   d6f8e:	2500      	moveq	r5, #0
        if (!rv) {
   d6f90:	d103      	bne.n	d6f9a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6f92:	6823      	ldr	r3, [r4, #0]
   d6f94:	4620      	mov	r0, r4
   d6f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f98:	4798      	blx	r3
        }
    }
    return rv;
}
   d6f9a:	4628      	mov	r0, r5
   d6f9c:	bd38      	pop	{r3, r4, r5, pc}

000d6f9e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6f9e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6fa0:	6818      	ldr	r0, [r3, #0]
}
   d6fa2:	43c0      	mvns	r0, r0
   d6fa4:	0fc0      	lsrs	r0, r0, #31
   d6fa6:	4770      	bx	lr

000d6fa8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6fa8:	4770      	bx	lr

000d6faa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6faa:	2000      	movs	r0, #0
   d6fac:	4770      	bx	lr

000d6fae <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6fae:	b510      	push	{r4, lr}
   d6fb0:	2114      	movs	r1, #20
   d6fb2:	4604      	mov	r4, r0
   d6fb4:	f000 fc26 	bl	d7804 <_ZdlPvj>
   d6fb8:	4620      	mov	r0, r4
   d6fba:	bd10      	pop	{r4, pc}

000d6fbc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6fbc:	f7fd b86d 	b.w	d409a <_ZdlPv>

000d6fc0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6fc2:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6fc4:	2200      	movs	r2, #0
   d6fc6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6fc8:	9202      	str	r2, [sp, #8]
   d6fca:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6fcc:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6fce:	4604      	mov	r4, r0
   d6fd0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6fd2:	d008      	beq.n	d6fe6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6fd8:	fbb3 f1f2 	udiv	r1, r3, r2
   d6fdc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6fde:	fb02 3111 	mls	r1, r2, r1, r3
   d6fe2:	434a      	muls	r2, r1
   d6fe4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6fe6:	6960      	ldr	r0, [r4, #20]
   d6fe8:	2308      	movs	r3, #8
   d6fea:	9300      	str	r3, [sp, #0]
   d6fec:	f241 0205 	movw	r2, #4101	; 0x1005
   d6ff0:	446b      	add	r3, sp
   d6ff2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6ff6:	6800      	ldr	r0, [r0, #0]
   d6ff8:	f7fe fb46 	bl	d5688 <sock_setsockopt>
    if (ret < 0) {
   d6ffc:	2800      	cmp	r0, #0
   d6ffe:	db08      	blt.n	d7012 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7000:	6960      	ldr	r0, [r4, #20]
   d7002:	2300      	movs	r3, #0
   d7004:	4632      	mov	r2, r6
   d7006:	4629      	mov	r1, r5
   d7008:	6800      	ldr	r0, [r0, #0]
   d700a:	f7fe fb5d 	bl	d56c8 <sock_send>
    if (ret < 0) {
   d700e:	2800      	cmp	r0, #0
   d7010:	da04      	bge.n	d701c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7012:	f7fe fcb7 	bl	d5984 <__errno>
   d7016:	6803      	ldr	r3, [r0, #0]
   d7018:	6063      	str	r3, [r4, #4]
   d701a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d701c:	b004      	add	sp, #16
   d701e:	bd70      	pop	{r4, r5, r6, pc}

000d7020 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7020:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7022:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7024:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7026:	689b      	ldr	r3, [r3, #8]
   d7028:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d702a:	68a3      	ldr	r3, [r4, #8]
   d702c:	3b01      	subs	r3, #1
   d702e:	60a3      	str	r3, [r4, #8]
   d7030:	b92b      	cbnz	r3, d703e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7032:	6823      	ldr	r3, [r4, #0]
   d7034:	4620      	mov	r0, r4
   d7036:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d703c:	4718      	bx	r3
   d703e:	bd10      	pop	{r4, pc}

000d7040 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7040:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7042:	4604      	mov	r4, r0
   d7044:	694d      	ldr	r5, [r1, #20]
   d7046:	4b05      	ldr	r3, [pc, #20]	; (d705c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7048:	f844 3b04 	str.w	r3, [r4], #4
   d704c:	358c      	adds	r5, #140	; 0x8c
   d704e:	4606      	mov	r6, r0
   d7050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7054:	682b      	ldr	r3, [r5, #0]
   d7056:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7058:	4630      	mov	r0, r6
   d705a:	bd70      	pop	{r4, r5, r6, pc}
   d705c:	000da20c 	.word	0x000da20c

000d7060 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7060:	b510      	push	{r4, lr}
   d7062:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7064:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7068:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d706c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d706e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7070:	d005      	beq.n	d707e <_ZN9TCPClient4peekEv+0x1e>
   d7072:	6962      	ldr	r2, [r4, #20]
   d7074:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7078:	4413      	add	r3, r2
   d707a:	7918      	ldrb	r0, [r3, #4]
   d707c:	bd10      	pop	{r4, pc}
   d707e:	6803      	ldr	r3, [r0, #0]
   d7080:	691b      	ldr	r3, [r3, #16]
   d7082:	4798      	blx	r3
   d7084:	2800      	cmp	r0, #0
   d7086:	d1f4      	bne.n	d7072 <_ZN9TCPClient4peekEv+0x12>
   d7088:	f04f 30ff 	mov.w	r0, #4294967295
}
   d708c:	bd10      	pop	{r4, pc}

000d708e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d708e:	b510      	push	{r4, lr}
   d7090:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7092:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7096:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d709a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d709c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d709e:	d008      	beq.n	d70b2 <_ZN9TCPClient4readEv+0x24>
   d70a0:	6962      	ldr	r2, [r4, #20]
   d70a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d70a6:	1c59      	adds	r1, r3, #1
   d70a8:	4413      	add	r3, r2
   d70aa:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d70ae:	7918      	ldrb	r0, [r3, #4]
   d70b0:	bd10      	pop	{r4, pc}
   d70b2:	6803      	ldr	r3, [r0, #0]
   d70b4:	691b      	ldr	r3, [r3, #16]
   d70b6:	4798      	blx	r3
   d70b8:	2800      	cmp	r0, #0
   d70ba:	d1f1      	bne.n	d70a0 <_ZN9TCPClient4readEv+0x12>
   d70bc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d70c0:	bd10      	pop	{r4, pc}

000d70c2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d70c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70c4:	6943      	ldr	r3, [r0, #20]
   d70c6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d70c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d70d0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d70d2:	4605      	mov	r5, r0
   d70d4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d70d6:	d106      	bne.n	d70e6 <_ZN9TCPClient4readEPhj+0x24>
   d70d8:	6803      	ldr	r3, [r0, #0]
   d70da:	691b      	ldr	r3, [r3, #16]
   d70dc:	4798      	blx	r3
   d70de:	b910      	cbnz	r0, d70e6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d70e0:	f04f 34ff 	mov.w	r4, #4294967295
   d70e4:	e014      	b.n	d7110 <_ZN9TCPClient4readEPhj+0x4e>
   d70e6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d70e8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d70ec:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d70f0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d70f2:	42bc      	cmp	r4, r7
   d70f4:	bf28      	it	cs
   d70f6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d70f8:	4419      	add	r1, r3
   d70fa:	4622      	mov	r2, r4
   d70fc:	3104      	adds	r1, #4
   d70fe:	4630      	mov	r0, r6
   d7100:	f001 fc5c 	bl	d89bc <memcpy>
   d7104:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7106:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d710a:	4423      	add	r3, r4
   d710c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7110:	4620      	mov	r0, r4
   d7112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7114 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7118:	4698      	mov	r8, r3
    stop();
   d711a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d711c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7120:	460d      	mov	r5, r1
   d7122:	4606      	mov	r6, r0
   d7124:	4617      	mov	r7, r2
    stop();
   d7126:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7128:	ab12      	add	r3, sp, #72	; 0x48
   d712a:	2400      	movs	r4, #0
   d712c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7130:	4622      	mov	r2, r4
   d7132:	4621      	mov	r1, r4
   d7134:	4628      	mov	r0, r5
   d7136:	f7fe f94f 	bl	d53d8 <netdb_getaddrinfo>
   d713a:	4681      	mov	r9, r0
   d713c:	2800      	cmp	r0, #0
   d713e:	d13d      	bne.n	d71bc <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7140:	9b00      	ldr	r3, [sp, #0]
   d7142:	2b00      	cmp	r3, #0
   d7144:	d056      	beq.n	d71f4 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7146:	695b      	ldr	r3, [r3, #20]
   d7148:	2b00      	cmp	r3, #0
   d714a:	d053      	beq.n	d71f4 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d714c:	a806      	add	r0, sp, #24
   d714e:	f7ff fbc7 	bl	d68e0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7152:	9b00      	ldr	r3, [sp, #0]
   d7154:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7156:	7863      	ldrb	r3, [r4, #1]
   d7158:	2b02      	cmp	r3, #2
   d715a:	d101      	bne.n	d7160 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d715c:	1d21      	adds	r1, r4, #4
   d715e:	e013      	b.n	d7188 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7160:	2b0a      	cmp	r3, #10
   d7162:	d114      	bne.n	d718e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7164:	2211      	movs	r2, #17
   d7166:	4649      	mov	r1, r9
   d7168:	a801      	add	r0, sp, #4
   d716a:	f001 fc4d 	bl	d8a08 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d716e:	68a3      	ldr	r3, [r4, #8]
   d7170:	bb33      	cbnz	r3, d71c0 <_ZN9TCPClient7connectEPKctm+0xac>
   d7172:	68e3      	ldr	r3, [r4, #12]
   d7174:	bb23      	cbnz	r3, d71c0 <_ZN9TCPClient7connectEPKctm+0xac>
   d7176:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d717a:	6925      	ldr	r5, [r4, #16]
   d717c:	f7fe f9d4 	bl	d5528 <inet_htonl>
   d7180:	4285      	cmp	r5, r0
   d7182:	d11d      	bne.n	d71c0 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7184:	f104 0114 	add.w	r1, r4, #20
   d7188:	a806      	add	r0, sp, #24
   d718a:	f7ff fbec 	bl	d6966 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d718e:	a806      	add	r0, sp, #24
   d7190:	f7ff fbc6 	bl	d6920 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7194:	2800      	cmp	r0, #0
   d7196:	d02d      	beq.n	d71f4 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7198:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d719a:	ad07      	add	r5, sp, #28
   d719c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d71a0:	4b18      	ldr	r3, [pc, #96]	; (d7204 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d71a2:	930c      	str	r3, [sp, #48]	; 0x30
   d71a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71a6:	ac0d      	add	r4, sp, #52	; 0x34
   d71a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71aa:	682b      	ldr	r3, [r5, #0]
   d71ac:	7023      	strb	r3, [r4, #0]
   d71ae:	463a      	mov	r2, r7
   d71b0:	4643      	mov	r3, r8
   d71b2:	a90c      	add	r1, sp, #48	; 0x30
   d71b4:	4630      	mov	r0, r6
   d71b6:	47c8      	blx	r9
   d71b8:	4681      	mov	r9, r0
   d71ba:	e01b      	b.n	d71f4 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d71bc:	46a1      	mov	r9, r4
   d71be:	e019      	b.n	d71f4 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d71c0:	f104 0308 	add.w	r3, r4, #8
   d71c4:	ad01      	add	r5, sp, #4
   d71c6:	3418      	adds	r4, #24
   d71c8:	6818      	ldr	r0, [r3, #0]
   d71ca:	6859      	ldr	r1, [r3, #4]
   d71cc:	462a      	mov	r2, r5
   d71ce:	c203      	stmia	r2!, {r0, r1}
   d71d0:	3308      	adds	r3, #8
   d71d2:	42a3      	cmp	r3, r4
   d71d4:	4615      	mov	r5, r2
   d71d6:	d1f7      	bne.n	d71c8 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d71d8:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d71da:	a901      	add	r1, sp, #4
   d71dc:	a80c      	add	r0, sp, #48	; 0x30
   d71de:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d71e0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d71e4:	f7ff fb8a 	bl	d68fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71ea:	ac07      	add	r4, sp, #28
   d71ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71ee:	682b      	ldr	r3, [r5, #0]
   d71f0:	7023      	strb	r3, [r4, #0]
   d71f2:	e7cc      	b.n	d718e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d71f4:	9800      	ldr	r0, [sp, #0]
   d71f6:	f7fe f8e7 	bl	d53c8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d71fa:	4648      	mov	r0, r9
   d71fc:	b013      	add	sp, #76	; 0x4c
   d71fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7202:	bf00      	nop
   d7204:	000da20c 	.word	0x000da20c

000d7208 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7208:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d720a:	2300      	movs	r3, #0
   d720c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7210:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7212:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7216:	4770      	bx	lr

000d7218 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d721c:	461e      	mov	r6, r3
    stop();
   d721e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7220:	460c      	mov	r4, r1
   d7222:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7224:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7226:	4605      	mov	r5, r0
   d7228:	4617      	mov	r7, r2
    stop();
   d722a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d722c:	7d23      	ldrb	r3, [r4, #20]
   d722e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7232:	2b04      	cmp	r3, #4
   d7234:	bf0c      	ite	eq
   d7236:	2002      	moveq	r0, #2
   d7238:	200a      	movne	r0, #10
   d723a:	2206      	movs	r2, #6
   d723c:	2101      	movs	r1, #1
   d723e:	f7fe fa4b 	bl	d56d8 <sock_socket>
   d7242:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7246:	696b      	ldr	r3, [r5, #20]
   d7248:	681b      	ldr	r3, [r3, #0]
   d724a:	2b00      	cmp	r3, #0
   d724c:	db18      	blt.n	d7280 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d724e:	4628      	mov	r0, r5
   d7250:	f7ff ffda 	bl	d7208 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7254:	b1d6      	cbz	r6, d728c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7256:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7258:	a903      	add	r1, sp, #12
   d725a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d725c:	9303      	str	r3, [sp, #12]
   d725e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7262:	f7fe f8f1 	bl	d5448 <if_index_to_name>
   d7266:	b958      	cbnz	r0, d7280 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7268:	6968      	ldr	r0, [r5, #20]
   d726a:	2306      	movs	r3, #6
   d726c:	9300      	str	r3, [sp, #0]
   d726e:	f241 020b 	movw	r2, #4107	; 0x100b
   d7272:	ab03      	add	r3, sp, #12
   d7274:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7278:	6800      	ldr	r0, [r0, #0]
   d727a:	f7fe fa05 	bl	d5688 <sock_setsockopt>
   d727e:	b128      	cbz	r0, d728c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7280:	682b      	ldr	r3, [r5, #0]
   d7282:	4628      	mov	r0, r5
   d7284:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7286:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7288:	4798      	blx	r3
   d728a:	e03b      	b.n	d7304 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d728c:	261c      	movs	r6, #28
   d728e:	4632      	mov	r2, r6
   d7290:	2100      	movs	r1, #0
   d7292:	a803      	add	r0, sp, #12
   d7294:	f001 fbb8 	bl	d8a08 <memset>
    if (ip.version() == 4) {
   d7298:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d729a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d729e:	2b04      	cmp	r3, #4
   d72a0:	d10c      	bne.n	d72bc <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d72a2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d72a4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d72a6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d72aa:	f7fe f945 	bl	d5538 <inet_htons>
   d72ae:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d72b2:	6860      	ldr	r0, [r4, #4]
   d72b4:	f7fe f938 	bl	d5528 <inet_htonl>
   d72b8:	9004      	str	r0, [sp, #16]
   d72ba:	e013      	b.n	d72e4 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d72bc:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d72be:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d72c0:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d72c4:	f7fe f938 	bl	d5538 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d72c8:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d72ca:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d72ce:	1d23      	adds	r3, r4, #4
   d72d0:	f104 0714 	add.w	r7, r4, #20
   d72d4:	6818      	ldr	r0, [r3, #0]
   d72d6:	6859      	ldr	r1, [r3, #4]
   d72d8:	4632      	mov	r2, r6
   d72da:	c203      	stmia	r2!, {r0, r1}
   d72dc:	3308      	adds	r3, #8
   d72de:	42bb      	cmp	r3, r7
   d72e0:	4616      	mov	r6, r2
   d72e2:	d1f7      	bne.n	d72d4 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d72e4:	696b      	ldr	r3, [r5, #20]
   d72e6:	221c      	movs	r2, #28
   d72e8:	a903      	add	r1, sp, #12
   d72ea:	6818      	ldr	r0, [r3, #0]
   d72ec:	f7fe f9dc 	bl	d56a8 <sock_connect>
   d72f0:	2800      	cmp	r0, #0
   d72f2:	d1c5      	bne.n	d7280 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d72f4:	3404      	adds	r4, #4
   d72f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d72f8:	696d      	ldr	r5, [r5, #20]
   d72fa:	358c      	adds	r5, #140	; 0x8c
   d72fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d72fe:	6823      	ldr	r3, [r4, #0]
   d7300:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7302:	2401      	movs	r4, #1
}
   d7304:	4620      	mov	r0, r4
   d7306:	b00a      	add	sp, #40	; 0x28
   d7308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d730c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d730c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d730e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7310:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7312:	6818      	ldr	r0, [r3, #0]
   d7314:	2800      	cmp	r0, #0
   d7316:	db01      	blt.n	d731c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7318:	f7fe f9be 	bl	d5698 <sock_close>
   d731c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d731e:	f04f 32ff 	mov.w	r2, #4294967295
   d7322:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7324:	6960      	ldr	r0, [r4, #20]
   d7326:	2211      	movs	r2, #17
   d7328:	2100      	movs	r1, #0
   d732a:	308c      	adds	r0, #140	; 0x8c
   d732c:	f001 fb6c 	bl	d8a08 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7330:	4620      	mov	r0, r4
}
   d7332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7336:	f7ff bf67 	b.w	d7208 <_ZN9TCPClient12flush_bufferEv>
	...

000d733c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d733c:	b530      	push	{r4, r5, lr}
   d733e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7340:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7344:	b08b      	sub	sp, #44	; 0x2c
   d7346:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7348:	b11b      	cbz	r3, d7352 <_ZN9TCPClient9availableEv+0x16>
   d734a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d734e:	429a      	cmp	r2, r3
   d7350:	d040      	beq.n	d73d4 <_ZN9TCPClient9availableEv+0x98>
   d7352:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7354:	6818      	ldr	r0, [r3, #0]
   d7356:	2800      	cmp	r0, #0
   d7358:	db3f      	blt.n	d73da <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d735a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d735e:	2d7f      	cmp	r5, #127	; 0x7f
   d7360:	d83b      	bhi.n	d73da <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7362:	1d19      	adds	r1, r3, #4
   d7364:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7368:	2308      	movs	r3, #8
   d736a:	4429      	add	r1, r5
   d736c:	f7fe f9a4 	bl	d56b8 <sock_recv>
            if (ret > 0) {
   d7370:	2800      	cmp	r0, #0
   d7372:	dd0c      	ble.n	d738e <_ZN9TCPClient9availableEv+0x52>
   d7374:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7376:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d737a:	b90a      	cbnz	r2, d7380 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d737c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7380:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7382:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7386:	4418      	add	r0, r3
   d7388:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d738c:	e025      	b.n	d73da <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d738e:	f7fe faf9 	bl	d5984 <__errno>
   d7392:	6803      	ldr	r3, [r0, #0]
   d7394:	2b0b      	cmp	r3, #11
   d7396:	d020      	beq.n	d73da <_ZN9TCPClient9availableEv+0x9e>
   d7398:	f7fe faf4 	bl	d5984 <__errno>
   d739c:	6803      	ldr	r3, [r0, #0]
   d739e:	2b0b      	cmp	r3, #11
   d73a0:	d01b      	beq.n	d73da <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d73a2:	2320      	movs	r3, #32
   d73a4:	2500      	movs	r5, #0
   d73a6:	9302      	str	r3, [sp, #8]
   d73a8:	9503      	str	r5, [sp, #12]
   d73aa:	f7fe faeb 	bl	d5984 <__errno>
   d73ae:	6803      	ldr	r3, [r0, #0]
   d73b0:	9301      	str	r3, [sp, #4]
   d73b2:	4b0e      	ldr	r3, [pc, #56]	; (d73ec <_ZN9TCPClient9availableEv+0xb0>)
   d73b4:	9300      	str	r3, [sp, #0]
   d73b6:	aa02      	add	r2, sp, #8
   d73b8:	462b      	mov	r3, r5
   d73ba:	490d      	ldr	r1, [pc, #52]	; (d73f0 <_ZN9TCPClient9availableEv+0xb4>)
   d73bc:	2032      	movs	r0, #50	; 0x32
   d73be:	f7fe f9cb 	bl	d5758 <log_message>
                    sock_close(d_->sock);
   d73c2:	6963      	ldr	r3, [r4, #20]
   d73c4:	6818      	ldr	r0, [r3, #0]
   d73c6:	f7fe f967 	bl	d5698 <sock_close>
   d73ca:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d73cc:	f04f 32ff 	mov.w	r2, #4294967295
   d73d0:	601a      	str	r2, [r3, #0]
   d73d2:	e002      	b.n	d73da <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d73d4:	f7ff ff18 	bl	d7208 <_ZN9TCPClient12flush_bufferEv>
   d73d8:	e7bb      	b.n	d7352 <_ZN9TCPClient9availableEv+0x16>
   d73da:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d73dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d73e0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d73e4:	1a18      	subs	r0, r3, r0
}
   d73e6:	b00b      	add	sp, #44	; 0x2c
   d73e8:	bd30      	pop	{r4, r5, pc}
   d73ea:	bf00      	nop
   d73ec:	000da377 	.word	0x000da377
   d73f0:	000da370 	.word	0x000da370

000d73f4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d73f4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d73f6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d73f8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d73fa:	6001      	str	r1, [r0, #0]
   d73fc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7400:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7404:	3088      	adds	r0, #136	; 0x88
   d7406:	f7ff fa6b 	bl	d68e0 <_ZN9IPAddressC1Ev>
}
   d740a:	4620      	mov	r0, r4
   d740c:	bd10      	pop	{r4, pc}
	...

000d7410 <_ZN9TCPClientC1Ei>:
   d7410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7414:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7416:	2300      	movs	r3, #0
   d7418:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d741a:	4a14      	ldr	r2, [pc, #80]	; (d746c <_ZN9TCPClientC1Ei+0x5c>)
   d741c:	6043      	str	r3, [r0, #4]
   d741e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7420:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7422:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7424:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7426:	20a0      	movs	r0, #160	; 0xa0
   d7428:	460e      	mov	r6, r1
   d742a:	f7fc fe34 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d742e:	4605      	mov	r5, r0
   d7430:	b110      	cbz	r0, d7438 <_ZN9TCPClientC1Ei+0x28>
   d7432:	4631      	mov	r1, r6
   d7434:	f7ff ffde 	bl	d73f4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7438:	2014      	movs	r0, #20
   d743a:	f7fc fe2c 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d743e:	4603      	mov	r3, r0
   d7440:	b128      	cbz	r0, d744e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7442:	2201      	movs	r2, #1
   d7444:	6042      	str	r2, [r0, #4]
   d7446:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7448:	4a09      	ldr	r2, [pc, #36]	; (d7470 <_ZN9TCPClientC1Ei+0x60>)
   d744a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d744c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d744e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7450:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7452:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7454:	b128      	cbz	r0, d7462 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7456:	6843      	ldr	r3, [r0, #4]
   d7458:	3b01      	subs	r3, #1
   d745a:	6043      	str	r3, [r0, #4]
   d745c:	b90b      	cbnz	r3, d7462 <_ZN9TCPClientC1Ei+0x52>
   d745e:	f7ff fddf 	bl	d7020 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7462:	4620      	mov	r0, r4
   d7464:	f7ff fed0 	bl	d7208 <_ZN9TCPClient12flush_bufferEv>
}
   d7468:	4620      	mov	r0, r4
   d746a:	bd70      	pop	{r4, r5, r6, pc}
   d746c:	000da32c 	.word	0x000da32c
   d7470:	000da310 	.word	0x000da310

000d7474 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7474:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7476:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d747a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d747c:	f7ff ffc8 	bl	d7410 <_ZN9TCPClientC1Ei>
}
   d7480:	4620      	mov	r0, r4
   d7482:	bd10      	pop	{r4, pc}

000d7484 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7484:	b510      	push	{r4, lr}
   d7486:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7488:	6800      	ldr	r0, [r0, #0]
   d748a:	2800      	cmp	r0, #0
   d748c:	db01      	blt.n	d7492 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d748e:	f7fe f903 	bl	d5698 <sock_close>
    }
}
   d7492:	4620      	mov	r0, r4
   d7494:	bd10      	pop	{r4, pc}

000d7496 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7496:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7498:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d749a:	4620      	mov	r0, r4
   d749c:	f7ff fff2 	bl	d7484 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d74a0:	b124      	cbz	r4, d74ac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d74a2:	4620      	mov	r0, r4
   d74a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d74a8:	f7fc bdf7 	b.w	d409a <_ZdlPv>
   d74ac:	bd10      	pop	{r4, pc}

000d74ae <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d74ae:	2300      	movs	r3, #0
   d74b0:	461a      	mov	r2, r3
   d74b2:	6840      	ldr	r0, [r0, #4]
   d74b4:	f7fe b996 	b.w	d57e4 <network_connect>

000d74b8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d74b8:	2200      	movs	r2, #0
   d74ba:	2102      	movs	r1, #2
   d74bc:	6840      	ldr	r0, [r0, #4]
   d74be:	f7fe b9a1 	b.w	d5804 <network_disconnect>

000d74c2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d74c2:	2200      	movs	r2, #0
   d74c4:	4611      	mov	r1, r2
   d74c6:	6840      	ldr	r0, [r0, #4]
   d74c8:	f7fe b994 	b.w	d57f4 <network_connecting>

000d74cc <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d74cc:	2200      	movs	r2, #0
   d74ce:	4611      	mov	r1, r2
   d74d0:	6840      	ldr	r0, [r0, #4]
   d74d2:	f7fe b99f 	b.w	d5814 <network_ready>

000d74d6 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d74d6:	2300      	movs	r3, #0
   d74d8:	461a      	mov	r2, r3
   d74da:	4619      	mov	r1, r3
   d74dc:	6840      	ldr	r0, [r0, #4]
   d74de:	f7fe b9a1 	b.w	d5824 <network_on>

000d74e2 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d74e2:	2300      	movs	r3, #0
   d74e4:	461a      	mov	r2, r3
   d74e6:	4619      	mov	r1, r3
   d74e8:	6840      	ldr	r0, [r0, #4]
   d74ea:	f7fe b9a3 	b.w	d5834 <network_off>

000d74ee <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d74ee:	2200      	movs	r2, #0
   d74f0:	f081 0101 	eor.w	r1, r1, #1
   d74f4:	6840      	ldr	r0, [r0, #4]
   d74f6:	f7fe b9a5 	b.w	d5844 <network_listen>

000d74fa <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d74fa:	2200      	movs	r2, #0
   d74fc:	6840      	ldr	r0, [r0, #4]
   d74fe:	f7fe b9b1 	b.w	d5864 <network_set_listen_timeout>

000d7502 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7502:	2200      	movs	r2, #0
   d7504:	4611      	mov	r1, r2
   d7506:	6840      	ldr	r0, [r0, #4]
   d7508:	f7fe b9b4 	b.w	d5874 <network_get_listen_timeout>

000d750c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d750c:	2200      	movs	r2, #0
   d750e:	4611      	mov	r1, r2
   d7510:	6840      	ldr	r0, [r0, #4]
   d7512:	f7fe b99f 	b.w	d5854 <network_listening>

000d7516 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7516:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d751a:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d751c:	b095      	sub	sp, #84	; 0x54
   d751e:	4616      	mov	r6, r2
   d7520:	460d      	mov	r5, r1
   d7522:	4607      	mov	r7, r0
    IPAddress addr;
   d7524:	f7ff f9dc 	bl	d68e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7528:	4621      	mov	r1, r4
   d752a:	2220      	movs	r2, #32
   d752c:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d752e:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7530:	f001 fa6a 	bl	d8a08 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7534:	2340      	movs	r3, #64	; 0x40
   d7536:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7538:	4621      	mov	r1, r4
   d753a:	466b      	mov	r3, sp
   d753c:	aa0c      	add	r2, sp, #48	; 0x30
   d753e:	4630      	mov	r0, r6
   d7540:	f7fd ff4a 	bl	d53d8 <netdb_getaddrinfo>
    if (!r) {
   d7544:	4604      	mov	r4, r0
   d7546:	2800      	cmp	r0, #0
   d7548:	d144      	bne.n	d75d4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d754a:	4602      	mov	r2, r0
   d754c:	2101      	movs	r1, #1
   d754e:	6868      	ldr	r0, [r5, #4]
   d7550:	f7fe f960 	bl	d5814 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7554:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7556:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7558:	4622      	mov	r2, r4
   d755a:	6868      	ldr	r0, [r5, #4]
   d755c:	f7fe f95a 	bl	d5814 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7560:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7562:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7564:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7566:	2e00      	cmp	r6, #0
   d7568:	d034      	beq.n	d75d4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d756a:	2900      	cmp	r1, #0
   d756c:	d132      	bne.n	d75d4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d756e:	6873      	ldr	r3, [r6, #4]
   d7570:	2b02      	cmp	r3, #2
   d7572:	d002      	beq.n	d757a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7574:	2b0a      	cmp	r3, #10
   d7576:	d009      	beq.n	d758c <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7578:	e02a      	b.n	d75d0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d757a:	f1b8 0f00 	cmp.w	r8, #0
   d757e:	d027      	beq.n	d75d0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7580:	6971      	ldr	r1, [r6, #20]
   d7582:	4638      	mov	r0, r7
   d7584:	3104      	adds	r1, #4
   d7586:	f7ff f9ee 	bl	d6966 <_ZN9IPAddressaSEPKh>
   d758a:	e020      	b.n	d75ce <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d758c:	f1b9 0f00 	cmp.w	r9, #0
   d7590:	d01e      	beq.n	d75d0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7592:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7594:	2211      	movs	r2, #17
   d7596:	a801      	add	r0, sp, #4
   d7598:	f001 fa36 	bl	d8a08 <memset>
                    a.v = 6;
   d759c:	2306      	movs	r3, #6
   d759e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d75a2:	ad01      	add	r5, sp, #4
   d75a4:	f104 0308 	add.w	r3, r4, #8
   d75a8:	3418      	adds	r4, #24
   d75aa:	6818      	ldr	r0, [r3, #0]
   d75ac:	6859      	ldr	r1, [r3, #4]
   d75ae:	462a      	mov	r2, r5
   d75b0:	c203      	stmia	r2!, {r0, r1}
   d75b2:	3308      	adds	r3, #8
   d75b4:	42a3      	cmp	r3, r4
   d75b6:	4615      	mov	r5, r2
   d75b8:	d1f7      	bne.n	d75aa <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d75ba:	a901      	add	r1, sp, #4
   d75bc:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d75be:	ad07      	add	r5, sp, #28
   d75c0:	f7ff f99c 	bl	d68fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d75c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d75c6:	1d3c      	adds	r4, r7, #4
   d75c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d75ca:	682b      	ldr	r3, [r5, #0]
   d75cc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d75ce:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75d0:	69f6      	ldr	r6, [r6, #28]
   d75d2:	e7c8      	b.n	d7566 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d75d4:	9800      	ldr	r0, [sp, #0]
   d75d6:	f7fd fef7 	bl	d53c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d75da:	4638      	mov	r0, r7
   d75dc:	b015      	add	sp, #84	; 0x54
   d75de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d75e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d75e4:	4b02      	ldr	r3, [pc, #8]	; (d75f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d75e6:	4a03      	ldr	r2, [pc, #12]	; (d75f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d75e8:	601a      	str	r2, [r3, #0]
   d75ea:	2200      	movs	r2, #0
   d75ec:	605a      	str	r2, [r3, #4]
   d75ee:	4770      	bx	lr
   d75f0:	2003e5dc 	.word	0x2003e5dc
   d75f4:	000da390 	.word	0x000da390

000d75f8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d75f8:	b508      	push	{r3, lr}
   d75fa:	4b02      	ldr	r3, [pc, #8]	; (d7604 <spark_protocol_instance+0xc>)
   d75fc:	681b      	ldr	r3, [r3, #0]
   d75fe:	681b      	ldr	r3, [r3, #0]
   d7600:	9301      	str	r3, [sp, #4]
   d7602:	bd08      	pop	{r3, pc}
   d7604:	0003025c 	.word	0x0003025c

000d7608 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7608:	b508      	push	{r3, lr}
   d760a:	4b02      	ldr	r3, [pc, #8]	; (d7614 <spark_protocol_set_product_id+0xc>)
   d760c:	681b      	ldr	r3, [r3, #0]
   d760e:	685b      	ldr	r3, [r3, #4]
   d7610:	9301      	str	r3, [sp, #4]
   d7612:	bd08      	pop	{r3, pc}
   d7614:	0003025c 	.word	0x0003025c

000d7618 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7618:	b508      	push	{r3, lr}
   d761a:	4b02      	ldr	r3, [pc, #8]	; (d7624 <spark_protocol_set_product_firmware_version+0xc>)
   d761c:	681b      	ldr	r3, [r3, #0]
   d761e:	689b      	ldr	r3, [r3, #8]
   d7620:	9301      	str	r3, [sp, #4]
   d7622:	bd08      	pop	{r3, pc}
   d7624:	0003025c 	.word	0x0003025c

000d7628 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7628:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d762a:	4e18      	ldr	r6, [pc, #96]	; (d768c <pinAvailable+0x64>)
   d762c:	6831      	ldr	r1, [r6, #0]
   d762e:	f011 0501 	ands.w	r5, r1, #1
   d7632:	4604      	mov	r4, r0
   d7634:	d10a      	bne.n	d764c <pinAvailable+0x24>
   d7636:	4630      	mov	r0, r6
   d7638:	f7fc fd33 	bl	d40a2 <__cxa_guard_acquire>
   d763c:	b130      	cbz	r0, d764c <pinAvailable+0x24>
   d763e:	4629      	mov	r1, r5
   d7640:	4813      	ldr	r0, [pc, #76]	; (d7690 <pinAvailable+0x68>)
   d7642:	f7fe f9e5 	bl	d5a10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7646:	4630      	mov	r0, r6
   d7648:	f7fc fd30 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d764c:	4810      	ldr	r0, [pc, #64]	; (d7690 <pinAvailable+0x68>)
   d764e:	f7fe f9e9 	bl	d5a24 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7652:	b128      	cbz	r0, d7660 <pinAvailable+0x38>
   d7654:	f1a4 030b 	sub.w	r3, r4, #11
   d7658:	2b02      	cmp	r3, #2
   d765a:	d801      	bhi.n	d7660 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d765c:	2000      	movs	r0, #0
   d765e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7660:	f000 f876 	bl	d7750 <_Z19__fetch_global_Wirev>
   d7664:	f7ff fb89 	bl	d6d7a <_ZN7TwoWire9isEnabledEv>
   d7668:	b108      	cbz	r0, d766e <pinAvailable+0x46>
   d766a:	2c01      	cmp	r4, #1
   d766c:	d9f6      	bls.n	d765c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d766e:	f7ff fae7 	bl	d6c40 <_Z22__fetch_global_Serial1v>
   d7672:	f7ff fae1 	bl	d6c38 <_ZN11USARTSerial9isEnabledEv>
   d7676:	b118      	cbz	r0, d7680 <pinAvailable+0x58>
   d7678:	f1a4 0309 	sub.w	r3, r4, #9
   d767c:	2b01      	cmp	r3, #1
   d767e:	d9ed      	bls.n	d765c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7680:	2c23      	cmp	r4, #35	; 0x23
   d7682:	bf8c      	ite	hi
   d7684:	2000      	movhi	r0, #0
   d7686:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7688:	bd70      	pop	{r4, r5, r6, pc}
   d768a:	bf00      	nop
   d768c:	2003e5e4 	.word	0x2003e5e4
   d7690:	2003e5e8 	.word	0x2003e5e8

000d7694 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7694:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7696:	b538      	push	{r3, r4, r5, lr}
   d7698:	4604      	mov	r4, r0
   d769a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d769c:	d80a      	bhi.n	d76b4 <pinMode+0x20>
   d769e:	29ff      	cmp	r1, #255	; 0xff
   d76a0:	d008      	beq.n	d76b4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d76a2:	f7ff ffc1 	bl	d7628 <pinAvailable>
   d76a6:	b128      	cbz	r0, d76b4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d76a8:	4629      	mov	r1, r5
   d76aa:	4620      	mov	r0, r4
}
   d76ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d76b0:	f7fd bea2 	b.w	d53f8 <HAL_Pin_Mode>
   d76b4:	bd38      	pop	{r3, r4, r5, pc}

000d76b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d76b6:	b538      	push	{r3, r4, r5, lr}
   d76b8:	4604      	mov	r4, r0
   d76ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d76bc:	f7fd fea4 	bl	d5408 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d76c0:	28ff      	cmp	r0, #255	; 0xff
   d76c2:	d010      	beq.n	d76e6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d76c4:	2806      	cmp	r0, #6
   d76c6:	d804      	bhi.n	d76d2 <digitalWrite+0x1c>
   d76c8:	234d      	movs	r3, #77	; 0x4d
   d76ca:	fa23 f000 	lsr.w	r0, r3, r0
   d76ce:	07c3      	lsls	r3, r0, #31
   d76d0:	d409      	bmi.n	d76e6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d76d2:	4620      	mov	r0, r4
   d76d4:	f7ff ffa8 	bl	d7628 <pinAvailable>
   d76d8:	b128      	cbz	r0, d76e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d76da:	4629      	mov	r1, r5
   d76dc:	4620      	mov	r0, r4
}
   d76de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d76e2:	f7fd be99 	b.w	d5418 <HAL_GPIO_Write>
   d76e6:	bd38      	pop	{r3, r4, r5, pc}

000d76e8 <_Z17acquireWireBufferv>:
   d76e8:	b570      	push	{r4, r5, r6, lr}
   d76ea:	4604      	mov	r4, r0
   d76ec:	2514      	movs	r5, #20
   d76ee:	462a      	mov	r2, r5
   d76f0:	4e09      	ldr	r6, [pc, #36]	; (d7718 <_Z17acquireWireBufferv+0x30>)
   d76f2:	2100      	movs	r1, #0
   d76f4:	f001 f988 	bl	d8a08 <memset>
   d76f8:	8025      	strh	r5, [r4, #0]
   d76fa:	2520      	movs	r5, #32
   d76fc:	4631      	mov	r1, r6
   d76fe:	60a5      	str	r5, [r4, #8]
   d7700:	6125      	str	r5, [r4, #16]
   d7702:	4628      	mov	r0, r5
   d7704:	f000 f880 	bl	d7808 <_ZnajRKSt9nothrow_t>
   d7708:	4631      	mov	r1, r6
   d770a:	6060      	str	r0, [r4, #4]
   d770c:	4628      	mov	r0, r5
   d770e:	f000 f87b 	bl	d7808 <_ZnajRKSt9nothrow_t>
   d7712:	60e0      	str	r0, [r4, #12]
   d7714:	4620      	mov	r0, r4
   d7716:	bd70      	pop	{r4, r5, r6, pc}
   d7718:	000da3bc 	.word	0x000da3bc

000d771c <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d771c:	b570      	push	{r4, r5, r6, lr}
   d771e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7720:	2514      	movs	r5, #20
   d7722:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7724:	4e09      	ldr	r6, [pc, #36]	; (d774c <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7726:	2100      	movs	r1, #0
   d7728:	f001 f96e 	bl	d8a08 <memset>
   d772c:	8025      	strh	r5, [r4, #0]
   d772e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7730:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7732:	60a5      	str	r5, [r4, #8]
   d7734:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7736:	4628      	mov	r0, r5
   d7738:	f000 f866 	bl	d7808 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d773c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d773e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7740:	4628      	mov	r0, r5
   d7742:	f000 f861 	bl	d7808 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7746:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d7748:	4620      	mov	r0, r4
   d774a:	bd70      	pop	{r4, r5, r6, pc}
   d774c:	000da3bc 	.word	0x000da3bc

000d7750 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7750:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7752:	4d0e      	ldr	r5, [pc, #56]	; (d778c <_Z19__fetch_global_Wirev+0x3c>)
   d7754:	6829      	ldr	r1, [r5, #0]
   d7756:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d775a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d775c:	d113      	bne.n	d7786 <_Z19__fetch_global_Wirev+0x36>
   d775e:	4628      	mov	r0, r5
   d7760:	f7fc fc9f 	bl	d40a2 <__cxa_guard_acquire>
   d7764:	b178      	cbz	r0, d7786 <_Z19__fetch_global_Wirev+0x36>
   d7766:	a801      	add	r0, sp, #4
   d7768:	f7ff ffbe 	bl	d76e8 <_Z17acquireWireBufferv>
   d776c:	aa01      	add	r2, sp, #4
   d776e:	4621      	mov	r1, r4
   d7770:	4807      	ldr	r0, [pc, #28]	; (d7790 <_Z19__fetch_global_Wirev+0x40>)
   d7772:	f7ff fab7 	bl	d6ce4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7776:	4628      	mov	r0, r5
   d7778:	f7fc fc98 	bl	d40ac <__cxa_guard_release>
   d777c:	4a05      	ldr	r2, [pc, #20]	; (d7794 <_Z19__fetch_global_Wirev+0x44>)
   d777e:	4906      	ldr	r1, [pc, #24]	; (d7798 <_Z19__fetch_global_Wirev+0x48>)
   d7780:	4803      	ldr	r0, [pc, #12]	; (d7790 <_Z19__fetch_global_Wirev+0x40>)
   d7782:	f000 f831 	bl	d77e8 <__aeabi_atexit>
	return wire;
}
   d7786:	4802      	ldr	r0, [pc, #8]	; (d7790 <_Z19__fetch_global_Wirev+0x40>)
   d7788:	b007      	add	sp, #28
   d778a:	bd30      	pop	{r4, r5, pc}
   d778c:	2003e5f4 	.word	0x2003e5f4
   d7790:	2003e60c 	.word	0x2003e60c
   d7794:	2003dd58 	.word	0x2003dd58
   d7798:	000d6c8d 	.word	0x000d6c8d

000d779c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d779c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d779e:	4c0e      	ldr	r4, [pc, #56]	; (d77d8 <_Z20__fetch_global_Wire1v+0x3c>)
   d77a0:	6823      	ldr	r3, [r4, #0]
   d77a2:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d77a4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d77a6:	d413      	bmi.n	d77d0 <_Z20__fetch_global_Wire1v+0x34>
   d77a8:	4620      	mov	r0, r4
   d77aa:	f7fc fc7a 	bl	d40a2 <__cxa_guard_acquire>
   d77ae:	b178      	cbz	r0, d77d0 <_Z20__fetch_global_Wire1v+0x34>
   d77b0:	a801      	add	r0, sp, #4
   d77b2:	f7ff ffb3 	bl	d771c <_Z18acquireWire1Bufferv>
   d77b6:	aa01      	add	r2, sp, #4
   d77b8:	2101      	movs	r1, #1
   d77ba:	4808      	ldr	r0, [pc, #32]	; (d77dc <_Z20__fetch_global_Wire1v+0x40>)
   d77bc:	f7ff fa92 	bl	d6ce4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d77c0:	4620      	mov	r0, r4
   d77c2:	f7fc fc73 	bl	d40ac <__cxa_guard_release>
   d77c6:	4a06      	ldr	r2, [pc, #24]	; (d77e0 <_Z20__fetch_global_Wire1v+0x44>)
   d77c8:	4906      	ldr	r1, [pc, #24]	; (d77e4 <_Z20__fetch_global_Wire1v+0x48>)
   d77ca:	4804      	ldr	r0, [pc, #16]	; (d77dc <_Z20__fetch_global_Wire1v+0x40>)
   d77cc:	f000 f80c 	bl	d77e8 <__aeabi_atexit>
	return wire;
}
   d77d0:	4802      	ldr	r0, [pc, #8]	; (d77dc <_Z20__fetch_global_Wire1v+0x40>)
   d77d2:	b006      	add	sp, #24
   d77d4:	bd10      	pop	{r4, pc}
   d77d6:	bf00      	nop
   d77d8:	2003e620 	.word	0x2003e620
   d77dc:	2003e5f8 	.word	0x2003e5f8
   d77e0:	2003dd58 	.word	0x2003dd58
   d77e4:	000d6c8d 	.word	0x000d6c8d

000d77e8 <__aeabi_atexit>:
   d77e8:	460b      	mov	r3, r1
   d77ea:	4601      	mov	r1, r0
   d77ec:	4618      	mov	r0, r3
   d77ee:	f000 bfcb 	b.w	d8788 <__cxa_atexit>
	...

000d77f4 <_ZSt15get_new_handlerv>:
   d77f4:	4b02      	ldr	r3, [pc, #8]	; (d7800 <_ZSt15get_new_handlerv+0xc>)
   d77f6:	6818      	ldr	r0, [r3, #0]
   d77f8:	f3bf 8f5f 	dmb	sy
   d77fc:	4770      	bx	lr
   d77fe:	bf00      	nop
   d7800:	2003e624 	.word	0x2003e624

000d7804 <_ZdlPvj>:
   d7804:	f7fc bc49 	b.w	d409a <_ZdlPv>

000d7808 <_ZnajRKSt9nothrow_t>:
   d7808:	f000 b800 	b.w	d780c <_ZnwjRKSt9nothrow_t>

000d780c <_ZnwjRKSt9nothrow_t>:
   d780c:	b510      	push	{r4, lr}
   d780e:	2800      	cmp	r0, #0
   d7810:	bf14      	ite	ne
   d7812:	4604      	movne	r4, r0
   d7814:	2401      	moveq	r4, #1
   d7816:	4620      	mov	r0, r4
   d7818:	f7fe f874 	bl	d5904 <malloc>
   d781c:	b920      	cbnz	r0, d7828 <_ZnwjRKSt9nothrow_t+0x1c>
   d781e:	f7ff ffe9 	bl	d77f4 <_ZSt15get_new_handlerv>
   d7822:	b108      	cbz	r0, d7828 <_ZnwjRKSt9nothrow_t+0x1c>
   d7824:	4780      	blx	r0
   d7826:	e7f6      	b.n	d7816 <_ZnwjRKSt9nothrow_t+0xa>
   d7828:	bd10      	pop	{r4, pc}
	...

000d782c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d782c:	4b18      	ldr	r3, [pc, #96]	; (d7890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d782e:	681a      	ldr	r2, [r3, #0]
   d7830:	07d1      	lsls	r1, r2, #31
   d7832:	bf5c      	itt	pl
   d7834:	2201      	movpl	r2, #1
   d7836:	601a      	strpl	r2, [r3, #0]
   d7838:	4b16      	ldr	r3, [pc, #88]	; (d7894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d783a:	681a      	ldr	r2, [r3, #0]
   d783c:	07d2      	lsls	r2, r2, #31
   d783e:	bf5c      	itt	pl
   d7840:	2201      	movpl	r2, #1
   d7842:	601a      	strpl	r2, [r3, #0]
   d7844:	4b14      	ldr	r3, [pc, #80]	; (d7898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7846:	681a      	ldr	r2, [r3, #0]
   d7848:	07d0      	lsls	r0, r2, #31
   d784a:	bf5c      	itt	pl
   d784c:	2201      	movpl	r2, #1
   d784e:	601a      	strpl	r2, [r3, #0]
   d7850:	4b12      	ldr	r3, [pc, #72]	; (d789c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7852:	681a      	ldr	r2, [r3, #0]
   d7854:	07d1      	lsls	r1, r2, #31
   d7856:	bf5c      	itt	pl
   d7858:	2201      	movpl	r2, #1
   d785a:	601a      	strpl	r2, [r3, #0]
   d785c:	4b10      	ldr	r3, [pc, #64]	; (d78a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d785e:	681a      	ldr	r2, [r3, #0]
   d7860:	07d2      	lsls	r2, r2, #31
   d7862:	bf5c      	itt	pl
   d7864:	2201      	movpl	r2, #1
   d7866:	601a      	strpl	r2, [r3, #0]
   d7868:	4b0e      	ldr	r3, [pc, #56]	; (d78a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d786a:	681a      	ldr	r2, [r3, #0]
   d786c:	07d0      	lsls	r0, r2, #31
   d786e:	bf5c      	itt	pl
   d7870:	2201      	movpl	r2, #1
   d7872:	601a      	strpl	r2, [r3, #0]
   d7874:	4b0c      	ldr	r3, [pc, #48]	; (d78a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7876:	681a      	ldr	r2, [r3, #0]
   d7878:	07d1      	lsls	r1, r2, #31
   d787a:	bf5c      	itt	pl
   d787c:	2201      	movpl	r2, #1
   d787e:	601a      	strpl	r2, [r3, #0]
   d7880:	4b0a      	ldr	r3, [pc, #40]	; (d78ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7882:	681a      	ldr	r2, [r3, #0]
   d7884:	07d2      	lsls	r2, r2, #31
   d7886:	bf5c      	itt	pl
   d7888:	2201      	movpl	r2, #1
   d788a:	601a      	strpl	r2, [r3, #0]
   d788c:	4770      	bx	lr
   d788e:	bf00      	nop
   d7890:	2003e644 	.word	0x2003e644
   d7894:	2003e640 	.word	0x2003e640
   d7898:	2003e63c 	.word	0x2003e63c
   d789c:	2003e638 	.word	0x2003e638
   d78a0:	2003e634 	.word	0x2003e634
   d78a4:	2003e630 	.word	0x2003e630
   d78a8:	2003e62c 	.word	0x2003e62c
   d78ac:	2003e628 	.word	0x2003e628

000d78b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d78b0:	4b24      	ldr	r3, [pc, #144]	; (d7944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d78b2:	681a      	ldr	r2, [r3, #0]
   d78b4:	07d0      	lsls	r0, r2, #31
   d78b6:	bf5c      	itt	pl
   d78b8:	2201      	movpl	r2, #1
   d78ba:	601a      	strpl	r2, [r3, #0]
   d78bc:	4b22      	ldr	r3, [pc, #136]	; (d7948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d78be:	681a      	ldr	r2, [r3, #0]
   d78c0:	07d1      	lsls	r1, r2, #31
   d78c2:	bf5c      	itt	pl
   d78c4:	2201      	movpl	r2, #1
   d78c6:	601a      	strpl	r2, [r3, #0]
   d78c8:	4b20      	ldr	r3, [pc, #128]	; (d794c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d78ca:	681a      	ldr	r2, [r3, #0]
   d78cc:	07d2      	lsls	r2, r2, #31
   d78ce:	bf5c      	itt	pl
   d78d0:	2201      	movpl	r2, #1
   d78d2:	601a      	strpl	r2, [r3, #0]
   d78d4:	4b1e      	ldr	r3, [pc, #120]	; (d7950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d78d6:	681a      	ldr	r2, [r3, #0]
   d78d8:	07d0      	lsls	r0, r2, #31
   d78da:	bf5c      	itt	pl
   d78dc:	2201      	movpl	r2, #1
   d78de:	601a      	strpl	r2, [r3, #0]
   d78e0:	4b1c      	ldr	r3, [pc, #112]	; (d7954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d78e2:	681a      	ldr	r2, [r3, #0]
   d78e4:	07d1      	lsls	r1, r2, #31
   d78e6:	bf5c      	itt	pl
   d78e8:	2201      	movpl	r2, #1
   d78ea:	601a      	strpl	r2, [r3, #0]
   d78ec:	4b1a      	ldr	r3, [pc, #104]	; (d7958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d78ee:	681a      	ldr	r2, [r3, #0]
   d78f0:	07d2      	lsls	r2, r2, #31
   d78f2:	bf5c      	itt	pl
   d78f4:	2201      	movpl	r2, #1
   d78f6:	601a      	strpl	r2, [r3, #0]
   d78f8:	4b18      	ldr	r3, [pc, #96]	; (d795c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d78fa:	681a      	ldr	r2, [r3, #0]
   d78fc:	07d0      	lsls	r0, r2, #31
   d78fe:	bf5c      	itt	pl
   d7900:	2201      	movpl	r2, #1
   d7902:	601a      	strpl	r2, [r3, #0]
   d7904:	4b16      	ldr	r3, [pc, #88]	; (d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7906:	681a      	ldr	r2, [r3, #0]
   d7908:	07d1      	lsls	r1, r2, #31
   d790a:	bf5c      	itt	pl
   d790c:	2201      	movpl	r2, #1
   d790e:	601a      	strpl	r2, [r3, #0]
   d7910:	4b14      	ldr	r3, [pc, #80]	; (d7964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7912:	681a      	ldr	r2, [r3, #0]
   d7914:	07d2      	lsls	r2, r2, #31
   d7916:	bf5c      	itt	pl
   d7918:	2201      	movpl	r2, #1
   d791a:	601a      	strpl	r2, [r3, #0]
   d791c:	4b12      	ldr	r3, [pc, #72]	; (d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d791e:	681a      	ldr	r2, [r3, #0]
   d7920:	07d0      	lsls	r0, r2, #31
   d7922:	bf5c      	itt	pl
   d7924:	2201      	movpl	r2, #1
   d7926:	601a      	strpl	r2, [r3, #0]
   d7928:	4b10      	ldr	r3, [pc, #64]	; (d796c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d792a:	681a      	ldr	r2, [r3, #0]
   d792c:	07d1      	lsls	r1, r2, #31
   d792e:	bf5c      	itt	pl
   d7930:	2201      	movpl	r2, #1
   d7932:	601a      	strpl	r2, [r3, #0]
   d7934:	4b0e      	ldr	r3, [pc, #56]	; (d7970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7936:	681a      	ldr	r2, [r3, #0]
   d7938:	07d2      	lsls	r2, r2, #31
   d793a:	bf5c      	itt	pl
   d793c:	2201      	movpl	r2, #1
   d793e:	601a      	strpl	r2, [r3, #0]
   d7940:	4770      	bx	lr
   d7942:	bf00      	nop
   d7944:	2003e674 	.word	0x2003e674
   d7948:	2003e670 	.word	0x2003e670
   d794c:	2003e66c 	.word	0x2003e66c
   d7950:	2003e668 	.word	0x2003e668
   d7954:	2003e664 	.word	0x2003e664
   d7958:	2003e660 	.word	0x2003e660
   d795c:	2003e65c 	.word	0x2003e65c
   d7960:	2003e658 	.word	0x2003e658
   d7964:	2003e654 	.word	0x2003e654
   d7968:	2003e650 	.word	0x2003e650
   d796c:	2003e64c 	.word	0x2003e64c
   d7970:	2003e648 	.word	0x2003e648

000d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7974:	4b24      	ldr	r3, [pc, #144]	; (d7a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7976:	681a      	ldr	r2, [r3, #0]
   d7978:	07d0      	lsls	r0, r2, #31
   d797a:	bf5c      	itt	pl
   d797c:	2201      	movpl	r2, #1
   d797e:	601a      	strpl	r2, [r3, #0]
   d7980:	4b22      	ldr	r3, [pc, #136]	; (d7a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7982:	681a      	ldr	r2, [r3, #0]
   d7984:	07d1      	lsls	r1, r2, #31
   d7986:	bf5c      	itt	pl
   d7988:	2201      	movpl	r2, #1
   d798a:	601a      	strpl	r2, [r3, #0]
   d798c:	4b20      	ldr	r3, [pc, #128]	; (d7a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d798e:	681a      	ldr	r2, [r3, #0]
   d7990:	07d2      	lsls	r2, r2, #31
   d7992:	bf5c      	itt	pl
   d7994:	2201      	movpl	r2, #1
   d7996:	601a      	strpl	r2, [r3, #0]
   d7998:	4b1e      	ldr	r3, [pc, #120]	; (d7a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d799a:	681a      	ldr	r2, [r3, #0]
   d799c:	07d0      	lsls	r0, r2, #31
   d799e:	bf5c      	itt	pl
   d79a0:	2201      	movpl	r2, #1
   d79a2:	601a      	strpl	r2, [r3, #0]
   d79a4:	4b1c      	ldr	r3, [pc, #112]	; (d7a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d79a6:	681a      	ldr	r2, [r3, #0]
   d79a8:	07d1      	lsls	r1, r2, #31
   d79aa:	bf5c      	itt	pl
   d79ac:	2201      	movpl	r2, #1
   d79ae:	601a      	strpl	r2, [r3, #0]
   d79b0:	4b1a      	ldr	r3, [pc, #104]	; (d7a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d79b2:	681a      	ldr	r2, [r3, #0]
   d79b4:	07d2      	lsls	r2, r2, #31
   d79b6:	bf5c      	itt	pl
   d79b8:	2201      	movpl	r2, #1
   d79ba:	601a      	strpl	r2, [r3, #0]
   d79bc:	4b18      	ldr	r3, [pc, #96]	; (d7a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d79be:	681a      	ldr	r2, [r3, #0]
   d79c0:	07d0      	lsls	r0, r2, #31
   d79c2:	bf5c      	itt	pl
   d79c4:	2201      	movpl	r2, #1
   d79c6:	601a      	strpl	r2, [r3, #0]
   d79c8:	4b16      	ldr	r3, [pc, #88]	; (d7a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d79ca:	681a      	ldr	r2, [r3, #0]
   d79cc:	07d1      	lsls	r1, r2, #31
   d79ce:	bf5c      	itt	pl
   d79d0:	2201      	movpl	r2, #1
   d79d2:	601a      	strpl	r2, [r3, #0]
   d79d4:	4b14      	ldr	r3, [pc, #80]	; (d7a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d79d6:	681a      	ldr	r2, [r3, #0]
   d79d8:	07d2      	lsls	r2, r2, #31
   d79da:	bf5c      	itt	pl
   d79dc:	2201      	movpl	r2, #1
   d79de:	601a      	strpl	r2, [r3, #0]
   d79e0:	4b12      	ldr	r3, [pc, #72]	; (d7a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	07d0      	lsls	r0, r2, #31
   d79e6:	bf5c      	itt	pl
   d79e8:	2201      	movpl	r2, #1
   d79ea:	601a      	strpl	r2, [r3, #0]
   d79ec:	4b10      	ldr	r3, [pc, #64]	; (d7a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d79ee:	681a      	ldr	r2, [r3, #0]
   d79f0:	07d1      	lsls	r1, r2, #31
   d79f2:	bf5c      	itt	pl
   d79f4:	2201      	movpl	r2, #1
   d79f6:	601a      	strpl	r2, [r3, #0]
   d79f8:	4b0e      	ldr	r3, [pc, #56]	; (d7a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d79fa:	681a      	ldr	r2, [r3, #0]
   d79fc:	07d2      	lsls	r2, r2, #31
   d79fe:	bf5c      	itt	pl
   d7a00:	2201      	movpl	r2, #1
   d7a02:	601a      	strpl	r2, [r3, #0]
   d7a04:	4770      	bx	lr
   d7a06:	bf00      	nop
   d7a08:	2003e6a4 	.word	0x2003e6a4
   d7a0c:	2003e6a0 	.word	0x2003e6a0
   d7a10:	2003e69c 	.word	0x2003e69c
   d7a14:	2003e698 	.word	0x2003e698
   d7a18:	2003e694 	.word	0x2003e694
   d7a1c:	2003e690 	.word	0x2003e690
   d7a20:	2003e68c 	.word	0x2003e68c
   d7a24:	2003e688 	.word	0x2003e688
   d7a28:	2003e684 	.word	0x2003e684
   d7a2c:	2003e680 	.word	0x2003e680
   d7a30:	2003e67c 	.word	0x2003e67c
   d7a34:	2003e678 	.word	0x2003e678

000d7a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7a38:	4b18      	ldr	r3, [pc, #96]	; (d7a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7a3a:	681a      	ldr	r2, [r3, #0]
   d7a3c:	07d1      	lsls	r1, r2, #31
   d7a3e:	bf5c      	itt	pl
   d7a40:	2201      	movpl	r2, #1
   d7a42:	601a      	strpl	r2, [r3, #0]
   d7a44:	4b16      	ldr	r3, [pc, #88]	; (d7aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a46:	681a      	ldr	r2, [r3, #0]
   d7a48:	07d2      	lsls	r2, r2, #31
   d7a4a:	bf5c      	itt	pl
   d7a4c:	2201      	movpl	r2, #1
   d7a4e:	601a      	strpl	r2, [r3, #0]
   d7a50:	4b14      	ldr	r3, [pc, #80]	; (d7aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a52:	681a      	ldr	r2, [r3, #0]
   d7a54:	07d0      	lsls	r0, r2, #31
   d7a56:	bf5c      	itt	pl
   d7a58:	2201      	movpl	r2, #1
   d7a5a:	601a      	strpl	r2, [r3, #0]
   d7a5c:	4b12      	ldr	r3, [pc, #72]	; (d7aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a5e:	681a      	ldr	r2, [r3, #0]
   d7a60:	07d1      	lsls	r1, r2, #31
   d7a62:	bf5c      	itt	pl
   d7a64:	2201      	movpl	r2, #1
   d7a66:	601a      	strpl	r2, [r3, #0]
   d7a68:	4b10      	ldr	r3, [pc, #64]	; (d7aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a6a:	681a      	ldr	r2, [r3, #0]
   d7a6c:	07d2      	lsls	r2, r2, #31
   d7a6e:	bf5c      	itt	pl
   d7a70:	2201      	movpl	r2, #1
   d7a72:	601a      	strpl	r2, [r3, #0]
   d7a74:	4b0e      	ldr	r3, [pc, #56]	; (d7ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a76:	681a      	ldr	r2, [r3, #0]
   d7a78:	07d0      	lsls	r0, r2, #31
   d7a7a:	bf5c      	itt	pl
   d7a7c:	2201      	movpl	r2, #1
   d7a7e:	601a      	strpl	r2, [r3, #0]
   d7a80:	4b0c      	ldr	r3, [pc, #48]	; (d7ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a82:	681a      	ldr	r2, [r3, #0]
   d7a84:	07d1      	lsls	r1, r2, #31
   d7a86:	bf5c      	itt	pl
   d7a88:	2201      	movpl	r2, #1
   d7a8a:	601a      	strpl	r2, [r3, #0]
   d7a8c:	4b0a      	ldr	r3, [pc, #40]	; (d7ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a8e:	681a      	ldr	r2, [r3, #0]
   d7a90:	07d2      	lsls	r2, r2, #31
   d7a92:	bf5c      	itt	pl
   d7a94:	2201      	movpl	r2, #1
   d7a96:	601a      	strpl	r2, [r3, #0]
   d7a98:	4770      	bx	lr
   d7a9a:	bf00      	nop
   d7a9c:	2003e6c4 	.word	0x2003e6c4
   d7aa0:	2003e6c0 	.word	0x2003e6c0
   d7aa4:	2003e6bc 	.word	0x2003e6bc
   d7aa8:	2003e6b8 	.word	0x2003e6b8
   d7aac:	2003e6b4 	.word	0x2003e6b4
   d7ab0:	2003e6b0 	.word	0x2003e6b0
   d7ab4:	2003e6ac 	.word	0x2003e6ac
   d7ab8:	2003e6a8 	.word	0x2003e6a8

000d7abc <__aeabi_drsub>:
   d7abc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7ac0:	e002      	b.n	d7ac8 <__adddf3>
   d7ac2:	bf00      	nop

000d7ac4 <__aeabi_dsub>:
   d7ac4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7ac8 <__adddf3>:
   d7ac8:	b530      	push	{r4, r5, lr}
   d7aca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7ace:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7ad2:	ea94 0f05 	teq	r4, r5
   d7ad6:	bf08      	it	eq
   d7ad8:	ea90 0f02 	teqeq	r0, r2
   d7adc:	bf1f      	itttt	ne
   d7ade:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7ae2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7ae6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7aea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7aee:	f000 80e2 	beq.w	d7cb6 <__adddf3+0x1ee>
   d7af2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7af6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7afa:	bfb8      	it	lt
   d7afc:	426d      	neglt	r5, r5
   d7afe:	dd0c      	ble.n	d7b1a <__adddf3+0x52>
   d7b00:	442c      	add	r4, r5
   d7b02:	ea80 0202 	eor.w	r2, r0, r2
   d7b06:	ea81 0303 	eor.w	r3, r1, r3
   d7b0a:	ea82 0000 	eor.w	r0, r2, r0
   d7b0e:	ea83 0101 	eor.w	r1, r3, r1
   d7b12:	ea80 0202 	eor.w	r2, r0, r2
   d7b16:	ea81 0303 	eor.w	r3, r1, r3
   d7b1a:	2d36      	cmp	r5, #54	; 0x36
   d7b1c:	bf88      	it	hi
   d7b1e:	bd30      	pophi	{r4, r5, pc}
   d7b20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7b24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7b2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7b30:	d002      	beq.n	d7b38 <__adddf3+0x70>
   d7b32:	4240      	negs	r0, r0
   d7b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7b38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7b3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7b40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7b44:	d002      	beq.n	d7b4c <__adddf3+0x84>
   d7b46:	4252      	negs	r2, r2
   d7b48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7b4c:	ea94 0f05 	teq	r4, r5
   d7b50:	f000 80a7 	beq.w	d7ca2 <__adddf3+0x1da>
   d7b54:	f1a4 0401 	sub.w	r4, r4, #1
   d7b58:	f1d5 0e20 	rsbs	lr, r5, #32
   d7b5c:	db0d      	blt.n	d7b7a <__adddf3+0xb2>
   d7b5e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7b62:	fa22 f205 	lsr.w	r2, r2, r5
   d7b66:	1880      	adds	r0, r0, r2
   d7b68:	f141 0100 	adc.w	r1, r1, #0
   d7b6c:	fa03 f20e 	lsl.w	r2, r3, lr
   d7b70:	1880      	adds	r0, r0, r2
   d7b72:	fa43 f305 	asr.w	r3, r3, r5
   d7b76:	4159      	adcs	r1, r3
   d7b78:	e00e      	b.n	d7b98 <__adddf3+0xd0>
   d7b7a:	f1a5 0520 	sub.w	r5, r5, #32
   d7b7e:	f10e 0e20 	add.w	lr, lr, #32
   d7b82:	2a01      	cmp	r2, #1
   d7b84:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7b88:	bf28      	it	cs
   d7b8a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7b8e:	fa43 f305 	asr.w	r3, r3, r5
   d7b92:	18c0      	adds	r0, r0, r3
   d7b94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7b98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7b9c:	d507      	bpl.n	d7bae <__adddf3+0xe6>
   d7b9e:	f04f 0e00 	mov.w	lr, #0
   d7ba2:	f1dc 0c00 	rsbs	ip, ip, #0
   d7ba6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7baa:	eb6e 0101 	sbc.w	r1, lr, r1
   d7bae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7bb2:	d31b      	bcc.n	d7bec <__adddf3+0x124>
   d7bb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7bb8:	d30c      	bcc.n	d7bd4 <__adddf3+0x10c>
   d7bba:	0849      	lsrs	r1, r1, #1
   d7bbc:	ea5f 0030 	movs.w	r0, r0, rrx
   d7bc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7bc4:	f104 0401 	add.w	r4, r4, #1
   d7bc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7bcc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7bd0:	f080 809a 	bcs.w	d7d08 <__adddf3+0x240>
   d7bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7bd8:	bf08      	it	eq
   d7bda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7bde:	f150 0000 	adcs.w	r0, r0, #0
   d7be2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7be6:	ea41 0105 	orr.w	r1, r1, r5
   d7bea:	bd30      	pop	{r4, r5, pc}
   d7bec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7bf0:	4140      	adcs	r0, r0
   d7bf2:	eb41 0101 	adc.w	r1, r1, r1
   d7bf6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7bfa:	f1a4 0401 	sub.w	r4, r4, #1
   d7bfe:	d1e9      	bne.n	d7bd4 <__adddf3+0x10c>
   d7c00:	f091 0f00 	teq	r1, #0
   d7c04:	bf04      	itt	eq
   d7c06:	4601      	moveq	r1, r0
   d7c08:	2000      	moveq	r0, #0
   d7c0a:	fab1 f381 	clz	r3, r1
   d7c0e:	bf08      	it	eq
   d7c10:	3320      	addeq	r3, #32
   d7c12:	f1a3 030b 	sub.w	r3, r3, #11
   d7c16:	f1b3 0220 	subs.w	r2, r3, #32
   d7c1a:	da0c      	bge.n	d7c36 <__adddf3+0x16e>
   d7c1c:	320c      	adds	r2, #12
   d7c1e:	dd08      	ble.n	d7c32 <__adddf3+0x16a>
   d7c20:	f102 0c14 	add.w	ip, r2, #20
   d7c24:	f1c2 020c 	rsb	r2, r2, #12
   d7c28:	fa01 f00c 	lsl.w	r0, r1, ip
   d7c2c:	fa21 f102 	lsr.w	r1, r1, r2
   d7c30:	e00c      	b.n	d7c4c <__adddf3+0x184>
   d7c32:	f102 0214 	add.w	r2, r2, #20
   d7c36:	bfd8      	it	le
   d7c38:	f1c2 0c20 	rsble	ip, r2, #32
   d7c3c:	fa01 f102 	lsl.w	r1, r1, r2
   d7c40:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7c44:	bfdc      	itt	le
   d7c46:	ea41 010c 	orrle.w	r1, r1, ip
   d7c4a:	4090      	lslle	r0, r2
   d7c4c:	1ae4      	subs	r4, r4, r3
   d7c4e:	bfa2      	ittt	ge
   d7c50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7c54:	4329      	orrge	r1, r5
   d7c56:	bd30      	popge	{r4, r5, pc}
   d7c58:	ea6f 0404 	mvn.w	r4, r4
   d7c5c:	3c1f      	subs	r4, #31
   d7c5e:	da1c      	bge.n	d7c9a <__adddf3+0x1d2>
   d7c60:	340c      	adds	r4, #12
   d7c62:	dc0e      	bgt.n	d7c82 <__adddf3+0x1ba>
   d7c64:	f104 0414 	add.w	r4, r4, #20
   d7c68:	f1c4 0220 	rsb	r2, r4, #32
   d7c6c:	fa20 f004 	lsr.w	r0, r0, r4
   d7c70:	fa01 f302 	lsl.w	r3, r1, r2
   d7c74:	ea40 0003 	orr.w	r0, r0, r3
   d7c78:	fa21 f304 	lsr.w	r3, r1, r4
   d7c7c:	ea45 0103 	orr.w	r1, r5, r3
   d7c80:	bd30      	pop	{r4, r5, pc}
   d7c82:	f1c4 040c 	rsb	r4, r4, #12
   d7c86:	f1c4 0220 	rsb	r2, r4, #32
   d7c8a:	fa20 f002 	lsr.w	r0, r0, r2
   d7c8e:	fa01 f304 	lsl.w	r3, r1, r4
   d7c92:	ea40 0003 	orr.w	r0, r0, r3
   d7c96:	4629      	mov	r1, r5
   d7c98:	bd30      	pop	{r4, r5, pc}
   d7c9a:	fa21 f004 	lsr.w	r0, r1, r4
   d7c9e:	4629      	mov	r1, r5
   d7ca0:	bd30      	pop	{r4, r5, pc}
   d7ca2:	f094 0f00 	teq	r4, #0
   d7ca6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7caa:	bf06      	itte	eq
   d7cac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7cb0:	3401      	addeq	r4, #1
   d7cb2:	3d01      	subne	r5, #1
   d7cb4:	e74e      	b.n	d7b54 <__adddf3+0x8c>
   d7cb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7cba:	bf18      	it	ne
   d7cbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7cc0:	d029      	beq.n	d7d16 <__adddf3+0x24e>
   d7cc2:	ea94 0f05 	teq	r4, r5
   d7cc6:	bf08      	it	eq
   d7cc8:	ea90 0f02 	teqeq	r0, r2
   d7ccc:	d005      	beq.n	d7cda <__adddf3+0x212>
   d7cce:	ea54 0c00 	orrs.w	ip, r4, r0
   d7cd2:	bf04      	itt	eq
   d7cd4:	4619      	moveq	r1, r3
   d7cd6:	4610      	moveq	r0, r2
   d7cd8:	bd30      	pop	{r4, r5, pc}
   d7cda:	ea91 0f03 	teq	r1, r3
   d7cde:	bf1e      	ittt	ne
   d7ce0:	2100      	movne	r1, #0
   d7ce2:	2000      	movne	r0, #0
   d7ce4:	bd30      	popne	{r4, r5, pc}
   d7ce6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7cea:	d105      	bne.n	d7cf8 <__adddf3+0x230>
   d7cec:	0040      	lsls	r0, r0, #1
   d7cee:	4149      	adcs	r1, r1
   d7cf0:	bf28      	it	cs
   d7cf2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7cf6:	bd30      	pop	{r4, r5, pc}
   d7cf8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7cfc:	bf3c      	itt	cc
   d7cfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7d02:	bd30      	popcc	{r4, r5, pc}
   d7d04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7d0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7d10:	f04f 0000 	mov.w	r0, #0
   d7d14:	bd30      	pop	{r4, r5, pc}
   d7d16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d1a:	bf1a      	itte	ne
   d7d1c:	4619      	movne	r1, r3
   d7d1e:	4610      	movne	r0, r2
   d7d20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7d24:	bf1c      	itt	ne
   d7d26:	460b      	movne	r3, r1
   d7d28:	4602      	movne	r2, r0
   d7d2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d2e:	bf06      	itte	eq
   d7d30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7d34:	ea91 0f03 	teqeq	r1, r3
   d7d38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7d3c:	bd30      	pop	{r4, r5, pc}
   d7d3e:	bf00      	nop

000d7d40 <__aeabi_ui2d>:
   d7d40:	f090 0f00 	teq	r0, #0
   d7d44:	bf04      	itt	eq
   d7d46:	2100      	moveq	r1, #0
   d7d48:	4770      	bxeq	lr
   d7d4a:	b530      	push	{r4, r5, lr}
   d7d4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7d50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7d54:	f04f 0500 	mov.w	r5, #0
   d7d58:	f04f 0100 	mov.w	r1, #0
   d7d5c:	e750      	b.n	d7c00 <__adddf3+0x138>
   d7d5e:	bf00      	nop

000d7d60 <__aeabi_i2d>:
   d7d60:	f090 0f00 	teq	r0, #0
   d7d64:	bf04      	itt	eq
   d7d66:	2100      	moveq	r1, #0
   d7d68:	4770      	bxeq	lr
   d7d6a:	b530      	push	{r4, r5, lr}
   d7d6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7d70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7d74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7d78:	bf48      	it	mi
   d7d7a:	4240      	negmi	r0, r0
   d7d7c:	f04f 0100 	mov.w	r1, #0
   d7d80:	e73e      	b.n	d7c00 <__adddf3+0x138>
   d7d82:	bf00      	nop

000d7d84 <__aeabi_f2d>:
   d7d84:	0042      	lsls	r2, r0, #1
   d7d86:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7d8a:	ea4f 0131 	mov.w	r1, r1, rrx
   d7d8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7d92:	bf1f      	itttt	ne
   d7d94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7d98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7d9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7da0:	4770      	bxne	lr
   d7da2:	f092 0f00 	teq	r2, #0
   d7da6:	bf14      	ite	ne
   d7da8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7dac:	4770      	bxeq	lr
   d7dae:	b530      	push	{r4, r5, lr}
   d7db0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7db4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7db8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7dbc:	e720      	b.n	d7c00 <__adddf3+0x138>
   d7dbe:	bf00      	nop

000d7dc0 <__aeabi_ul2d>:
   d7dc0:	ea50 0201 	orrs.w	r2, r0, r1
   d7dc4:	bf08      	it	eq
   d7dc6:	4770      	bxeq	lr
   d7dc8:	b530      	push	{r4, r5, lr}
   d7dca:	f04f 0500 	mov.w	r5, #0
   d7dce:	e00a      	b.n	d7de6 <__aeabi_l2d+0x16>

000d7dd0 <__aeabi_l2d>:
   d7dd0:	ea50 0201 	orrs.w	r2, r0, r1
   d7dd4:	bf08      	it	eq
   d7dd6:	4770      	bxeq	lr
   d7dd8:	b530      	push	{r4, r5, lr}
   d7dda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7dde:	d502      	bpl.n	d7de6 <__aeabi_l2d+0x16>
   d7de0:	4240      	negs	r0, r0
   d7de2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7de6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7dea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7dee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7df2:	f43f aedc 	beq.w	d7bae <__adddf3+0xe6>
   d7df6:	f04f 0203 	mov.w	r2, #3
   d7dfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7dfe:	bf18      	it	ne
   d7e00:	3203      	addne	r2, #3
   d7e02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e06:	bf18      	it	ne
   d7e08:	3203      	addne	r2, #3
   d7e0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7e0e:	f1c2 0320 	rsb	r3, r2, #32
   d7e12:	fa00 fc03 	lsl.w	ip, r0, r3
   d7e16:	fa20 f002 	lsr.w	r0, r0, r2
   d7e1a:	fa01 fe03 	lsl.w	lr, r1, r3
   d7e1e:	ea40 000e 	orr.w	r0, r0, lr
   d7e22:	fa21 f102 	lsr.w	r1, r1, r2
   d7e26:	4414      	add	r4, r2
   d7e28:	e6c1      	b.n	d7bae <__adddf3+0xe6>
   d7e2a:	bf00      	nop

000d7e2c <__aeabi_dmul>:
   d7e2c:	b570      	push	{r4, r5, r6, lr}
   d7e2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7e32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7e36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7e3a:	bf1d      	ittte	ne
   d7e3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7e40:	ea94 0f0c 	teqne	r4, ip
   d7e44:	ea95 0f0c 	teqne	r5, ip
   d7e48:	f000 f8de 	bleq	d8008 <__aeabi_dmul+0x1dc>
   d7e4c:	442c      	add	r4, r5
   d7e4e:	ea81 0603 	eor.w	r6, r1, r3
   d7e52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7e56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7e5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7e5e:	bf18      	it	ne
   d7e60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7e64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7e6c:	d038      	beq.n	d7ee0 <__aeabi_dmul+0xb4>
   d7e6e:	fba0 ce02 	umull	ip, lr, r0, r2
   d7e72:	f04f 0500 	mov.w	r5, #0
   d7e76:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7e7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7e7e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7e82:	f04f 0600 	mov.w	r6, #0
   d7e86:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7e8a:	f09c 0f00 	teq	ip, #0
   d7e8e:	bf18      	it	ne
   d7e90:	f04e 0e01 	orrne.w	lr, lr, #1
   d7e94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7e98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7e9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7ea0:	d204      	bcs.n	d7eac <__aeabi_dmul+0x80>
   d7ea2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7ea6:	416d      	adcs	r5, r5
   d7ea8:	eb46 0606 	adc.w	r6, r6, r6
   d7eac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7eb0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7eb4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7eb8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7ebc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7ec0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7ec4:	bf88      	it	hi
   d7ec6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7eca:	d81e      	bhi.n	d7f0a <__aeabi_dmul+0xde>
   d7ecc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7ed0:	bf08      	it	eq
   d7ed2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7ed6:	f150 0000 	adcs.w	r0, r0, #0
   d7eda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7ede:	bd70      	pop	{r4, r5, r6, pc}
   d7ee0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7ee4:	ea46 0101 	orr.w	r1, r6, r1
   d7ee8:	ea40 0002 	orr.w	r0, r0, r2
   d7eec:	ea81 0103 	eor.w	r1, r1, r3
   d7ef0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7ef4:	bfc2      	ittt	gt
   d7ef6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7efa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7efe:	bd70      	popgt	{r4, r5, r6, pc}
   d7f00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f04:	f04f 0e00 	mov.w	lr, #0
   d7f08:	3c01      	subs	r4, #1
   d7f0a:	f300 80ab 	bgt.w	d8064 <__aeabi_dmul+0x238>
   d7f0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7f12:	bfde      	ittt	le
   d7f14:	2000      	movle	r0, #0
   d7f16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7f1a:	bd70      	pople	{r4, r5, r6, pc}
   d7f1c:	f1c4 0400 	rsb	r4, r4, #0
   d7f20:	3c20      	subs	r4, #32
   d7f22:	da35      	bge.n	d7f90 <__aeabi_dmul+0x164>
   d7f24:	340c      	adds	r4, #12
   d7f26:	dc1b      	bgt.n	d7f60 <__aeabi_dmul+0x134>
   d7f28:	f104 0414 	add.w	r4, r4, #20
   d7f2c:	f1c4 0520 	rsb	r5, r4, #32
   d7f30:	fa00 f305 	lsl.w	r3, r0, r5
   d7f34:	fa20 f004 	lsr.w	r0, r0, r4
   d7f38:	fa01 f205 	lsl.w	r2, r1, r5
   d7f3c:	ea40 0002 	orr.w	r0, r0, r2
   d7f40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7f44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7f48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7f4c:	fa21 f604 	lsr.w	r6, r1, r4
   d7f50:	eb42 0106 	adc.w	r1, r2, r6
   d7f54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7f58:	bf08      	it	eq
   d7f5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7f5e:	bd70      	pop	{r4, r5, r6, pc}
   d7f60:	f1c4 040c 	rsb	r4, r4, #12
   d7f64:	f1c4 0520 	rsb	r5, r4, #32
   d7f68:	fa00 f304 	lsl.w	r3, r0, r4
   d7f6c:	fa20 f005 	lsr.w	r0, r0, r5
   d7f70:	fa01 f204 	lsl.w	r2, r1, r4
   d7f74:	ea40 0002 	orr.w	r0, r0, r2
   d7f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7f80:	f141 0100 	adc.w	r1, r1, #0
   d7f84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7f88:	bf08      	it	eq
   d7f8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7f8e:	bd70      	pop	{r4, r5, r6, pc}
   d7f90:	f1c4 0520 	rsb	r5, r4, #32
   d7f94:	fa00 f205 	lsl.w	r2, r0, r5
   d7f98:	ea4e 0e02 	orr.w	lr, lr, r2
   d7f9c:	fa20 f304 	lsr.w	r3, r0, r4
   d7fa0:	fa01 f205 	lsl.w	r2, r1, r5
   d7fa4:	ea43 0302 	orr.w	r3, r3, r2
   d7fa8:	fa21 f004 	lsr.w	r0, r1, r4
   d7fac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7fb0:	fa21 f204 	lsr.w	r2, r1, r4
   d7fb4:	ea20 0002 	bic.w	r0, r0, r2
   d7fb8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7fbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7fc0:	bf08      	it	eq
   d7fc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7fc6:	bd70      	pop	{r4, r5, r6, pc}
   d7fc8:	f094 0f00 	teq	r4, #0
   d7fcc:	d10f      	bne.n	d7fee <__aeabi_dmul+0x1c2>
   d7fce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7fd2:	0040      	lsls	r0, r0, #1
   d7fd4:	eb41 0101 	adc.w	r1, r1, r1
   d7fd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7fdc:	bf08      	it	eq
   d7fde:	3c01      	subeq	r4, #1
   d7fe0:	d0f7      	beq.n	d7fd2 <__aeabi_dmul+0x1a6>
   d7fe2:	ea41 0106 	orr.w	r1, r1, r6
   d7fe6:	f095 0f00 	teq	r5, #0
   d7fea:	bf18      	it	ne
   d7fec:	4770      	bxne	lr
   d7fee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7ff2:	0052      	lsls	r2, r2, #1
   d7ff4:	eb43 0303 	adc.w	r3, r3, r3
   d7ff8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7ffc:	bf08      	it	eq
   d7ffe:	3d01      	subeq	r5, #1
   d8000:	d0f7      	beq.n	d7ff2 <__aeabi_dmul+0x1c6>
   d8002:	ea43 0306 	orr.w	r3, r3, r6
   d8006:	4770      	bx	lr
   d8008:	ea94 0f0c 	teq	r4, ip
   d800c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8010:	bf18      	it	ne
   d8012:	ea95 0f0c 	teqne	r5, ip
   d8016:	d00c      	beq.n	d8032 <__aeabi_dmul+0x206>
   d8018:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d801c:	bf18      	it	ne
   d801e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8022:	d1d1      	bne.n	d7fc8 <__aeabi_dmul+0x19c>
   d8024:	ea81 0103 	eor.w	r1, r1, r3
   d8028:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d802c:	f04f 0000 	mov.w	r0, #0
   d8030:	bd70      	pop	{r4, r5, r6, pc}
   d8032:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8036:	bf06      	itte	eq
   d8038:	4610      	moveq	r0, r2
   d803a:	4619      	moveq	r1, r3
   d803c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8040:	d019      	beq.n	d8076 <__aeabi_dmul+0x24a>
   d8042:	ea94 0f0c 	teq	r4, ip
   d8046:	d102      	bne.n	d804e <__aeabi_dmul+0x222>
   d8048:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d804c:	d113      	bne.n	d8076 <__aeabi_dmul+0x24a>
   d804e:	ea95 0f0c 	teq	r5, ip
   d8052:	d105      	bne.n	d8060 <__aeabi_dmul+0x234>
   d8054:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8058:	bf1c      	itt	ne
   d805a:	4610      	movne	r0, r2
   d805c:	4619      	movne	r1, r3
   d805e:	d10a      	bne.n	d8076 <__aeabi_dmul+0x24a>
   d8060:	ea81 0103 	eor.w	r1, r1, r3
   d8064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8068:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d806c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8070:	f04f 0000 	mov.w	r0, #0
   d8074:	bd70      	pop	{r4, r5, r6, pc}
   d8076:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d807a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d807e:	bd70      	pop	{r4, r5, r6, pc}

000d8080 <__aeabi_ddiv>:
   d8080:	b570      	push	{r4, r5, r6, lr}
   d8082:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8086:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d808a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d808e:	bf1d      	ittte	ne
   d8090:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8094:	ea94 0f0c 	teqne	r4, ip
   d8098:	ea95 0f0c 	teqne	r5, ip
   d809c:	f000 f8a7 	bleq	d81ee <__aeabi_ddiv+0x16e>
   d80a0:	eba4 0405 	sub.w	r4, r4, r5
   d80a4:	ea81 0e03 	eor.w	lr, r1, r3
   d80a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d80ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d80b0:	f000 8088 	beq.w	d81c4 <__aeabi_ddiv+0x144>
   d80b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d80b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d80bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d80c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d80c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d80c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d80cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d80d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d80d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d80d8:	429d      	cmp	r5, r3
   d80da:	bf08      	it	eq
   d80dc:	4296      	cmpeq	r6, r2
   d80de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d80e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d80e6:	d202      	bcs.n	d80ee <__aeabi_ddiv+0x6e>
   d80e8:	085b      	lsrs	r3, r3, #1
   d80ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d80ee:	1ab6      	subs	r6, r6, r2
   d80f0:	eb65 0503 	sbc.w	r5, r5, r3
   d80f4:	085b      	lsrs	r3, r3, #1
   d80f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d80fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d80fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8102:	ebb6 0e02 	subs.w	lr, r6, r2
   d8106:	eb75 0e03 	sbcs.w	lr, r5, r3
   d810a:	bf22      	ittt	cs
   d810c:	1ab6      	subcs	r6, r6, r2
   d810e:	4675      	movcs	r5, lr
   d8110:	ea40 000c 	orrcs.w	r0, r0, ip
   d8114:	085b      	lsrs	r3, r3, #1
   d8116:	ea4f 0232 	mov.w	r2, r2, rrx
   d811a:	ebb6 0e02 	subs.w	lr, r6, r2
   d811e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8122:	bf22      	ittt	cs
   d8124:	1ab6      	subcs	r6, r6, r2
   d8126:	4675      	movcs	r5, lr
   d8128:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d812c:	085b      	lsrs	r3, r3, #1
   d812e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8132:	ebb6 0e02 	subs.w	lr, r6, r2
   d8136:	eb75 0e03 	sbcs.w	lr, r5, r3
   d813a:	bf22      	ittt	cs
   d813c:	1ab6      	subcs	r6, r6, r2
   d813e:	4675      	movcs	r5, lr
   d8140:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8144:	085b      	lsrs	r3, r3, #1
   d8146:	ea4f 0232 	mov.w	r2, r2, rrx
   d814a:	ebb6 0e02 	subs.w	lr, r6, r2
   d814e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8152:	bf22      	ittt	cs
   d8154:	1ab6      	subcs	r6, r6, r2
   d8156:	4675      	movcs	r5, lr
   d8158:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d815c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8160:	d018      	beq.n	d8194 <__aeabi_ddiv+0x114>
   d8162:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8166:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d816a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d816e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8172:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8176:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d817a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d817e:	d1c0      	bne.n	d8102 <__aeabi_ddiv+0x82>
   d8180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8184:	d10b      	bne.n	d819e <__aeabi_ddiv+0x11e>
   d8186:	ea41 0100 	orr.w	r1, r1, r0
   d818a:	f04f 0000 	mov.w	r0, #0
   d818e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8192:	e7b6      	b.n	d8102 <__aeabi_ddiv+0x82>
   d8194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8198:	bf04      	itt	eq
   d819a:	4301      	orreq	r1, r0
   d819c:	2000      	moveq	r0, #0
   d819e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d81a2:	bf88      	it	hi
   d81a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d81a8:	f63f aeaf 	bhi.w	d7f0a <__aeabi_dmul+0xde>
   d81ac:	ebb5 0c03 	subs.w	ip, r5, r3
   d81b0:	bf04      	itt	eq
   d81b2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d81b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d81ba:	f150 0000 	adcs.w	r0, r0, #0
   d81be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d81c2:	bd70      	pop	{r4, r5, r6, pc}
   d81c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d81c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d81cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d81d0:	bfc2      	ittt	gt
   d81d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d81d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d81da:	bd70      	popgt	{r4, r5, r6, pc}
   d81dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d81e0:	f04f 0e00 	mov.w	lr, #0
   d81e4:	3c01      	subs	r4, #1
   d81e6:	e690      	b.n	d7f0a <__aeabi_dmul+0xde>
   d81e8:	ea45 0e06 	orr.w	lr, r5, r6
   d81ec:	e68d      	b.n	d7f0a <__aeabi_dmul+0xde>
   d81ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d81f2:	ea94 0f0c 	teq	r4, ip
   d81f6:	bf08      	it	eq
   d81f8:	ea95 0f0c 	teqeq	r5, ip
   d81fc:	f43f af3b 	beq.w	d8076 <__aeabi_dmul+0x24a>
   d8200:	ea94 0f0c 	teq	r4, ip
   d8204:	d10a      	bne.n	d821c <__aeabi_ddiv+0x19c>
   d8206:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d820a:	f47f af34 	bne.w	d8076 <__aeabi_dmul+0x24a>
   d820e:	ea95 0f0c 	teq	r5, ip
   d8212:	f47f af25 	bne.w	d8060 <__aeabi_dmul+0x234>
   d8216:	4610      	mov	r0, r2
   d8218:	4619      	mov	r1, r3
   d821a:	e72c      	b.n	d8076 <__aeabi_dmul+0x24a>
   d821c:	ea95 0f0c 	teq	r5, ip
   d8220:	d106      	bne.n	d8230 <__aeabi_ddiv+0x1b0>
   d8222:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8226:	f43f aefd 	beq.w	d8024 <__aeabi_dmul+0x1f8>
   d822a:	4610      	mov	r0, r2
   d822c:	4619      	mov	r1, r3
   d822e:	e722      	b.n	d8076 <__aeabi_dmul+0x24a>
   d8230:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8234:	bf18      	it	ne
   d8236:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d823a:	f47f aec5 	bne.w	d7fc8 <__aeabi_dmul+0x19c>
   d823e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8242:	f47f af0d 	bne.w	d8060 <__aeabi_dmul+0x234>
   d8246:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d824a:	f47f aeeb 	bne.w	d8024 <__aeabi_dmul+0x1f8>
   d824e:	e712      	b.n	d8076 <__aeabi_dmul+0x24a>

000d8250 <__gedf2>:
   d8250:	f04f 3cff 	mov.w	ip, #4294967295
   d8254:	e006      	b.n	d8264 <__cmpdf2+0x4>
   d8256:	bf00      	nop

000d8258 <__ledf2>:
   d8258:	f04f 0c01 	mov.w	ip, #1
   d825c:	e002      	b.n	d8264 <__cmpdf2+0x4>
   d825e:	bf00      	nop

000d8260 <__cmpdf2>:
   d8260:	f04f 0c01 	mov.w	ip, #1
   d8264:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8268:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d826c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8270:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8274:	bf18      	it	ne
   d8276:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d827a:	d01b      	beq.n	d82b4 <__cmpdf2+0x54>
   d827c:	b001      	add	sp, #4
   d827e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8282:	bf0c      	ite	eq
   d8284:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8288:	ea91 0f03 	teqne	r1, r3
   d828c:	bf02      	ittt	eq
   d828e:	ea90 0f02 	teqeq	r0, r2
   d8292:	2000      	moveq	r0, #0
   d8294:	4770      	bxeq	lr
   d8296:	f110 0f00 	cmn.w	r0, #0
   d829a:	ea91 0f03 	teq	r1, r3
   d829e:	bf58      	it	pl
   d82a0:	4299      	cmppl	r1, r3
   d82a2:	bf08      	it	eq
   d82a4:	4290      	cmpeq	r0, r2
   d82a6:	bf2c      	ite	cs
   d82a8:	17d8      	asrcs	r0, r3, #31
   d82aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d82ae:	f040 0001 	orr.w	r0, r0, #1
   d82b2:	4770      	bx	lr
   d82b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d82b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d82bc:	d102      	bne.n	d82c4 <__cmpdf2+0x64>
   d82be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d82c2:	d107      	bne.n	d82d4 <__cmpdf2+0x74>
   d82c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d82c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d82cc:	d1d6      	bne.n	d827c <__cmpdf2+0x1c>
   d82ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d82d2:	d0d3      	beq.n	d827c <__cmpdf2+0x1c>
   d82d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d82d8:	4770      	bx	lr
   d82da:	bf00      	nop

000d82dc <__aeabi_cdrcmple>:
   d82dc:	4684      	mov	ip, r0
   d82de:	4610      	mov	r0, r2
   d82e0:	4662      	mov	r2, ip
   d82e2:	468c      	mov	ip, r1
   d82e4:	4619      	mov	r1, r3
   d82e6:	4663      	mov	r3, ip
   d82e8:	e000      	b.n	d82ec <__aeabi_cdcmpeq>
   d82ea:	bf00      	nop

000d82ec <__aeabi_cdcmpeq>:
   d82ec:	b501      	push	{r0, lr}
   d82ee:	f7ff ffb7 	bl	d8260 <__cmpdf2>
   d82f2:	2800      	cmp	r0, #0
   d82f4:	bf48      	it	mi
   d82f6:	f110 0f00 	cmnmi.w	r0, #0
   d82fa:	bd01      	pop	{r0, pc}

000d82fc <__aeabi_dcmpeq>:
   d82fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8300:	f7ff fff4 	bl	d82ec <__aeabi_cdcmpeq>
   d8304:	bf0c      	ite	eq
   d8306:	2001      	moveq	r0, #1
   d8308:	2000      	movne	r0, #0
   d830a:	f85d fb08 	ldr.w	pc, [sp], #8
   d830e:	bf00      	nop

000d8310 <__aeabi_dcmplt>:
   d8310:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8314:	f7ff ffea 	bl	d82ec <__aeabi_cdcmpeq>
   d8318:	bf34      	ite	cc
   d831a:	2001      	movcc	r0, #1
   d831c:	2000      	movcs	r0, #0
   d831e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8322:	bf00      	nop

000d8324 <__aeabi_dcmple>:
   d8324:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8328:	f7ff ffe0 	bl	d82ec <__aeabi_cdcmpeq>
   d832c:	bf94      	ite	ls
   d832e:	2001      	movls	r0, #1
   d8330:	2000      	movhi	r0, #0
   d8332:	f85d fb08 	ldr.w	pc, [sp], #8
   d8336:	bf00      	nop

000d8338 <__aeabi_dcmpge>:
   d8338:	f84d ed08 	str.w	lr, [sp, #-8]!
   d833c:	f7ff ffce 	bl	d82dc <__aeabi_cdrcmple>
   d8340:	bf94      	ite	ls
   d8342:	2001      	movls	r0, #1
   d8344:	2000      	movhi	r0, #0
   d8346:	f85d fb08 	ldr.w	pc, [sp], #8
   d834a:	bf00      	nop

000d834c <__aeabi_dcmpgt>:
   d834c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8350:	f7ff ffc4 	bl	d82dc <__aeabi_cdrcmple>
   d8354:	bf34      	ite	cc
   d8356:	2001      	movcc	r0, #1
   d8358:	2000      	movcs	r0, #0
   d835a:	f85d fb08 	ldr.w	pc, [sp], #8
   d835e:	bf00      	nop

000d8360 <__aeabi_d2uiz>:
   d8360:	004a      	lsls	r2, r1, #1
   d8362:	d211      	bcs.n	d8388 <__aeabi_d2uiz+0x28>
   d8364:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8368:	d211      	bcs.n	d838e <__aeabi_d2uiz+0x2e>
   d836a:	d50d      	bpl.n	d8388 <__aeabi_d2uiz+0x28>
   d836c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8370:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8374:	d40e      	bmi.n	d8394 <__aeabi_d2uiz+0x34>
   d8376:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d837a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d837e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8382:	fa23 f002 	lsr.w	r0, r3, r2
   d8386:	4770      	bx	lr
   d8388:	f04f 0000 	mov.w	r0, #0
   d838c:	4770      	bx	lr
   d838e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8392:	d102      	bne.n	d839a <__aeabi_d2uiz+0x3a>
   d8394:	f04f 30ff 	mov.w	r0, #4294967295
   d8398:	4770      	bx	lr
   d839a:	f04f 0000 	mov.w	r0, #0
   d839e:	4770      	bx	lr

000d83a0 <__aeabi_uldivmod>:
   d83a0:	b953      	cbnz	r3, d83b8 <__aeabi_uldivmod+0x18>
   d83a2:	b94a      	cbnz	r2, d83b8 <__aeabi_uldivmod+0x18>
   d83a4:	2900      	cmp	r1, #0
   d83a6:	bf08      	it	eq
   d83a8:	2800      	cmpeq	r0, #0
   d83aa:	bf1c      	itt	ne
   d83ac:	f04f 31ff 	movne.w	r1, #4294967295
   d83b0:	f04f 30ff 	movne.w	r0, #4294967295
   d83b4:	f000 b9a2 	b.w	d86fc <__aeabi_idiv0>
   d83b8:	f1ad 0c08 	sub.w	ip, sp, #8
   d83bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d83c0:	f000 f82a 	bl	d8418 <__udivmoddi4>
   d83c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d83c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d83cc:	b004      	add	sp, #16
   d83ce:	4770      	bx	lr

000d83d0 <__aeabi_d2ulz>:
   d83d0:	b5d0      	push	{r4, r6, r7, lr}
   d83d2:	2200      	movs	r2, #0
   d83d4:	4b0e      	ldr	r3, [pc, #56]	; (d8410 <__aeabi_d2ulz+0x40>)
   d83d6:	4606      	mov	r6, r0
   d83d8:	460f      	mov	r7, r1
   d83da:	f7ff fd27 	bl	d7e2c <__aeabi_dmul>
   d83de:	f7ff ffbf 	bl	d8360 <__aeabi_d2uiz>
   d83e2:	4604      	mov	r4, r0
   d83e4:	f7ff fcac 	bl	d7d40 <__aeabi_ui2d>
   d83e8:	2200      	movs	r2, #0
   d83ea:	4b0a      	ldr	r3, [pc, #40]	; (d8414 <__aeabi_d2ulz+0x44>)
   d83ec:	f7ff fd1e 	bl	d7e2c <__aeabi_dmul>
   d83f0:	4602      	mov	r2, r0
   d83f2:	460b      	mov	r3, r1
   d83f4:	4630      	mov	r0, r6
   d83f6:	4639      	mov	r1, r7
   d83f8:	f7ff fb64 	bl	d7ac4 <__aeabi_dsub>
   d83fc:	f7ff ffb0 	bl	d8360 <__aeabi_d2uiz>
   d8400:	4623      	mov	r3, r4
   d8402:	2200      	movs	r2, #0
   d8404:	ea42 0200 	orr.w	r2, r2, r0
   d8408:	4610      	mov	r0, r2
   d840a:	4619      	mov	r1, r3
   d840c:	bdd0      	pop	{r4, r6, r7, pc}
   d840e:	bf00      	nop
   d8410:	3df00000 	.word	0x3df00000
   d8414:	41f00000 	.word	0x41f00000

000d8418 <__udivmoddi4>:
   d8418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d841c:	468c      	mov	ip, r1
   d841e:	460e      	mov	r6, r1
   d8420:	4604      	mov	r4, r0
   d8422:	9d08      	ldr	r5, [sp, #32]
   d8424:	2b00      	cmp	r3, #0
   d8426:	d150      	bne.n	d84ca <__udivmoddi4+0xb2>
   d8428:	428a      	cmp	r2, r1
   d842a:	4617      	mov	r7, r2
   d842c:	d96c      	bls.n	d8508 <__udivmoddi4+0xf0>
   d842e:	fab2 fe82 	clz	lr, r2
   d8432:	f1be 0f00 	cmp.w	lr, #0
   d8436:	d00b      	beq.n	d8450 <__udivmoddi4+0x38>
   d8438:	f1ce 0420 	rsb	r4, lr, #32
   d843c:	fa20 f404 	lsr.w	r4, r0, r4
   d8440:	fa01 f60e 	lsl.w	r6, r1, lr
   d8444:	ea44 0c06 	orr.w	ip, r4, r6
   d8448:	fa02 f70e 	lsl.w	r7, r2, lr
   d844c:	fa00 f40e 	lsl.w	r4, r0, lr
   d8450:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8454:	0c22      	lsrs	r2, r4, #16
   d8456:	fbbc f0f9 	udiv	r0, ip, r9
   d845a:	fa1f f887 	uxth.w	r8, r7
   d845e:	fb09 c610 	mls	r6, r9, r0, ip
   d8462:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8466:	fb00 f308 	mul.w	r3, r0, r8
   d846a:	42b3      	cmp	r3, r6
   d846c:	d909      	bls.n	d8482 <__udivmoddi4+0x6a>
   d846e:	19f6      	adds	r6, r6, r7
   d8470:	f100 32ff 	add.w	r2, r0, #4294967295
   d8474:	f080 8122 	bcs.w	d86bc <__udivmoddi4+0x2a4>
   d8478:	42b3      	cmp	r3, r6
   d847a:	f240 811f 	bls.w	d86bc <__udivmoddi4+0x2a4>
   d847e:	3802      	subs	r0, #2
   d8480:	443e      	add	r6, r7
   d8482:	1af6      	subs	r6, r6, r3
   d8484:	b2a2      	uxth	r2, r4
   d8486:	fbb6 f3f9 	udiv	r3, r6, r9
   d848a:	fb09 6613 	mls	r6, r9, r3, r6
   d848e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8492:	fb03 f808 	mul.w	r8, r3, r8
   d8496:	45a0      	cmp	r8, r4
   d8498:	d909      	bls.n	d84ae <__udivmoddi4+0x96>
   d849a:	19e4      	adds	r4, r4, r7
   d849c:	f103 32ff 	add.w	r2, r3, #4294967295
   d84a0:	f080 810a 	bcs.w	d86b8 <__udivmoddi4+0x2a0>
   d84a4:	45a0      	cmp	r8, r4
   d84a6:	f240 8107 	bls.w	d86b8 <__udivmoddi4+0x2a0>
   d84aa:	3b02      	subs	r3, #2
   d84ac:	443c      	add	r4, r7
   d84ae:	ebc8 0404 	rsb	r4, r8, r4
   d84b2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d84b6:	2100      	movs	r1, #0
   d84b8:	2d00      	cmp	r5, #0
   d84ba:	d062      	beq.n	d8582 <__udivmoddi4+0x16a>
   d84bc:	fa24 f40e 	lsr.w	r4, r4, lr
   d84c0:	2300      	movs	r3, #0
   d84c2:	602c      	str	r4, [r5, #0]
   d84c4:	606b      	str	r3, [r5, #4]
   d84c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84ca:	428b      	cmp	r3, r1
   d84cc:	d907      	bls.n	d84de <__udivmoddi4+0xc6>
   d84ce:	2d00      	cmp	r5, #0
   d84d0:	d055      	beq.n	d857e <__udivmoddi4+0x166>
   d84d2:	2100      	movs	r1, #0
   d84d4:	e885 0041 	stmia.w	r5, {r0, r6}
   d84d8:	4608      	mov	r0, r1
   d84da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84de:	fab3 f183 	clz	r1, r3
   d84e2:	2900      	cmp	r1, #0
   d84e4:	f040 8090 	bne.w	d8608 <__udivmoddi4+0x1f0>
   d84e8:	42b3      	cmp	r3, r6
   d84ea:	d302      	bcc.n	d84f2 <__udivmoddi4+0xda>
   d84ec:	4282      	cmp	r2, r0
   d84ee:	f200 80f8 	bhi.w	d86e2 <__udivmoddi4+0x2ca>
   d84f2:	1a84      	subs	r4, r0, r2
   d84f4:	eb66 0603 	sbc.w	r6, r6, r3
   d84f8:	2001      	movs	r0, #1
   d84fa:	46b4      	mov	ip, r6
   d84fc:	2d00      	cmp	r5, #0
   d84fe:	d040      	beq.n	d8582 <__udivmoddi4+0x16a>
   d8500:	e885 1010 	stmia.w	r5, {r4, ip}
   d8504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8508:	b912      	cbnz	r2, d8510 <__udivmoddi4+0xf8>
   d850a:	2701      	movs	r7, #1
   d850c:	fbb7 f7f2 	udiv	r7, r7, r2
   d8510:	fab7 fe87 	clz	lr, r7
   d8514:	f1be 0f00 	cmp.w	lr, #0
   d8518:	d135      	bne.n	d8586 <__udivmoddi4+0x16e>
   d851a:	1bf3      	subs	r3, r6, r7
   d851c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8520:	fa1f fc87 	uxth.w	ip, r7
   d8524:	2101      	movs	r1, #1
   d8526:	fbb3 f0f8 	udiv	r0, r3, r8
   d852a:	0c22      	lsrs	r2, r4, #16
   d852c:	fb08 3610 	mls	r6, r8, r0, r3
   d8530:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8534:	fb0c f300 	mul.w	r3, ip, r0
   d8538:	42b3      	cmp	r3, r6
   d853a:	d907      	bls.n	d854c <__udivmoddi4+0x134>
   d853c:	19f6      	adds	r6, r6, r7
   d853e:	f100 32ff 	add.w	r2, r0, #4294967295
   d8542:	d202      	bcs.n	d854a <__udivmoddi4+0x132>
   d8544:	42b3      	cmp	r3, r6
   d8546:	f200 80ce 	bhi.w	d86e6 <__udivmoddi4+0x2ce>
   d854a:	4610      	mov	r0, r2
   d854c:	1af6      	subs	r6, r6, r3
   d854e:	b2a2      	uxth	r2, r4
   d8550:	fbb6 f3f8 	udiv	r3, r6, r8
   d8554:	fb08 6613 	mls	r6, r8, r3, r6
   d8558:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d855c:	fb0c fc03 	mul.w	ip, ip, r3
   d8560:	45a4      	cmp	ip, r4
   d8562:	d907      	bls.n	d8574 <__udivmoddi4+0x15c>
   d8564:	19e4      	adds	r4, r4, r7
   d8566:	f103 32ff 	add.w	r2, r3, #4294967295
   d856a:	d202      	bcs.n	d8572 <__udivmoddi4+0x15a>
   d856c:	45a4      	cmp	ip, r4
   d856e:	f200 80b5 	bhi.w	d86dc <__udivmoddi4+0x2c4>
   d8572:	4613      	mov	r3, r2
   d8574:	ebcc 0404 	rsb	r4, ip, r4
   d8578:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d857c:	e79c      	b.n	d84b8 <__udivmoddi4+0xa0>
   d857e:	4629      	mov	r1, r5
   d8580:	4628      	mov	r0, r5
   d8582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8586:	f1ce 0120 	rsb	r1, lr, #32
   d858a:	fa06 f30e 	lsl.w	r3, r6, lr
   d858e:	fa07 f70e 	lsl.w	r7, r7, lr
   d8592:	fa20 f901 	lsr.w	r9, r0, r1
   d8596:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d859a:	40ce      	lsrs	r6, r1
   d859c:	ea49 0903 	orr.w	r9, r9, r3
   d85a0:	fbb6 faf8 	udiv	sl, r6, r8
   d85a4:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d85a8:	fb08 661a 	mls	r6, r8, sl, r6
   d85ac:	fa1f fc87 	uxth.w	ip, r7
   d85b0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d85b4:	fb0a f20c 	mul.w	r2, sl, ip
   d85b8:	429a      	cmp	r2, r3
   d85ba:	fa00 f40e 	lsl.w	r4, r0, lr
   d85be:	d90a      	bls.n	d85d6 <__udivmoddi4+0x1be>
   d85c0:	19db      	adds	r3, r3, r7
   d85c2:	f10a 31ff 	add.w	r1, sl, #4294967295
   d85c6:	f080 8087 	bcs.w	d86d8 <__udivmoddi4+0x2c0>
   d85ca:	429a      	cmp	r2, r3
   d85cc:	f240 8084 	bls.w	d86d8 <__udivmoddi4+0x2c0>
   d85d0:	f1aa 0a02 	sub.w	sl, sl, #2
   d85d4:	443b      	add	r3, r7
   d85d6:	1a9b      	subs	r3, r3, r2
   d85d8:	fa1f f989 	uxth.w	r9, r9
   d85dc:	fbb3 f1f8 	udiv	r1, r3, r8
   d85e0:	fb08 3311 	mls	r3, r8, r1, r3
   d85e4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d85e8:	fb01 f60c 	mul.w	r6, r1, ip
   d85ec:	429e      	cmp	r6, r3
   d85ee:	d907      	bls.n	d8600 <__udivmoddi4+0x1e8>
   d85f0:	19db      	adds	r3, r3, r7
   d85f2:	f101 32ff 	add.w	r2, r1, #4294967295
   d85f6:	d26b      	bcs.n	d86d0 <__udivmoddi4+0x2b8>
   d85f8:	429e      	cmp	r6, r3
   d85fa:	d969      	bls.n	d86d0 <__udivmoddi4+0x2b8>
   d85fc:	3902      	subs	r1, #2
   d85fe:	443b      	add	r3, r7
   d8600:	1b9b      	subs	r3, r3, r6
   d8602:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d8606:	e78e      	b.n	d8526 <__udivmoddi4+0x10e>
   d8608:	f1c1 0e20 	rsb	lr, r1, #32
   d860c:	fa22 f40e 	lsr.w	r4, r2, lr
   d8610:	408b      	lsls	r3, r1
   d8612:	4323      	orrs	r3, r4
   d8614:	fa20 f70e 	lsr.w	r7, r0, lr
   d8618:	fa06 f401 	lsl.w	r4, r6, r1
   d861c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d8620:	fa26 f60e 	lsr.w	r6, r6, lr
   d8624:	433c      	orrs	r4, r7
   d8626:	fbb6 f9fc 	udiv	r9, r6, ip
   d862a:	0c27      	lsrs	r7, r4, #16
   d862c:	fb0c 6619 	mls	r6, ip, r9, r6
   d8630:	fa1f f883 	uxth.w	r8, r3
   d8634:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8638:	fb09 f708 	mul.w	r7, r9, r8
   d863c:	42b7      	cmp	r7, r6
   d863e:	fa02 f201 	lsl.w	r2, r2, r1
   d8642:	fa00 fa01 	lsl.w	sl, r0, r1
   d8646:	d908      	bls.n	d865a <__udivmoddi4+0x242>
   d8648:	18f6      	adds	r6, r6, r3
   d864a:	f109 30ff 	add.w	r0, r9, #4294967295
   d864e:	d241      	bcs.n	d86d4 <__udivmoddi4+0x2bc>
   d8650:	42b7      	cmp	r7, r6
   d8652:	d93f      	bls.n	d86d4 <__udivmoddi4+0x2bc>
   d8654:	f1a9 0902 	sub.w	r9, r9, #2
   d8658:	441e      	add	r6, r3
   d865a:	1bf6      	subs	r6, r6, r7
   d865c:	b2a0      	uxth	r0, r4
   d865e:	fbb6 f4fc 	udiv	r4, r6, ip
   d8662:	fb0c 6614 	mls	r6, ip, r4, r6
   d8666:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d866a:	fb04 f808 	mul.w	r8, r4, r8
   d866e:	45b8      	cmp	r8, r7
   d8670:	d907      	bls.n	d8682 <__udivmoddi4+0x26a>
   d8672:	18ff      	adds	r7, r7, r3
   d8674:	f104 30ff 	add.w	r0, r4, #4294967295
   d8678:	d228      	bcs.n	d86cc <__udivmoddi4+0x2b4>
   d867a:	45b8      	cmp	r8, r7
   d867c:	d926      	bls.n	d86cc <__udivmoddi4+0x2b4>
   d867e:	3c02      	subs	r4, #2
   d8680:	441f      	add	r7, r3
   d8682:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d8686:	ebc8 0707 	rsb	r7, r8, r7
   d868a:	fba0 8902 	umull	r8, r9, r0, r2
   d868e:	454f      	cmp	r7, r9
   d8690:	4644      	mov	r4, r8
   d8692:	464e      	mov	r6, r9
   d8694:	d314      	bcc.n	d86c0 <__udivmoddi4+0x2a8>
   d8696:	d029      	beq.n	d86ec <__udivmoddi4+0x2d4>
   d8698:	b365      	cbz	r5, d86f4 <__udivmoddi4+0x2dc>
   d869a:	ebba 0304 	subs.w	r3, sl, r4
   d869e:	eb67 0706 	sbc.w	r7, r7, r6
   d86a2:	fa07 fe0e 	lsl.w	lr, r7, lr
   d86a6:	40cb      	lsrs	r3, r1
   d86a8:	40cf      	lsrs	r7, r1
   d86aa:	ea4e 0303 	orr.w	r3, lr, r3
   d86ae:	e885 0088 	stmia.w	r5, {r3, r7}
   d86b2:	2100      	movs	r1, #0
   d86b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86b8:	4613      	mov	r3, r2
   d86ba:	e6f8      	b.n	d84ae <__udivmoddi4+0x96>
   d86bc:	4610      	mov	r0, r2
   d86be:	e6e0      	b.n	d8482 <__udivmoddi4+0x6a>
   d86c0:	ebb8 0402 	subs.w	r4, r8, r2
   d86c4:	eb69 0603 	sbc.w	r6, r9, r3
   d86c8:	3801      	subs	r0, #1
   d86ca:	e7e5      	b.n	d8698 <__udivmoddi4+0x280>
   d86cc:	4604      	mov	r4, r0
   d86ce:	e7d8      	b.n	d8682 <__udivmoddi4+0x26a>
   d86d0:	4611      	mov	r1, r2
   d86d2:	e795      	b.n	d8600 <__udivmoddi4+0x1e8>
   d86d4:	4681      	mov	r9, r0
   d86d6:	e7c0      	b.n	d865a <__udivmoddi4+0x242>
   d86d8:	468a      	mov	sl, r1
   d86da:	e77c      	b.n	d85d6 <__udivmoddi4+0x1be>
   d86dc:	3b02      	subs	r3, #2
   d86de:	443c      	add	r4, r7
   d86e0:	e748      	b.n	d8574 <__udivmoddi4+0x15c>
   d86e2:	4608      	mov	r0, r1
   d86e4:	e70a      	b.n	d84fc <__udivmoddi4+0xe4>
   d86e6:	3802      	subs	r0, #2
   d86e8:	443e      	add	r6, r7
   d86ea:	e72f      	b.n	d854c <__udivmoddi4+0x134>
   d86ec:	45c2      	cmp	sl, r8
   d86ee:	d3e7      	bcc.n	d86c0 <__udivmoddi4+0x2a8>
   d86f0:	463e      	mov	r6, r7
   d86f2:	e7d1      	b.n	d8698 <__udivmoddi4+0x280>
   d86f4:	4629      	mov	r1, r5
   d86f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86fa:	bf00      	nop

000d86fc <__aeabi_idiv0>:
   d86fc:	4770      	bx	lr
   d86fe:	bf00      	nop

000d8700 <asctime>:
   d8700:	4b09      	ldr	r3, [pc, #36]	; (d8728 <asctime+0x28>)
   d8702:	b570      	push	{r4, r5, r6, lr}
   d8704:	681c      	ldr	r4, [r3, #0]
   d8706:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d8708:	4606      	mov	r6, r0
   d870a:	b93d      	cbnz	r5, d871c <asctime+0x1c>
   d870c:	201a      	movs	r0, #26
   d870e:	f7fd f8f9 	bl	d5904 <malloc>
   d8712:	221a      	movs	r2, #26
   d8714:	6420      	str	r0, [r4, #64]	; 0x40
   d8716:	4629      	mov	r1, r5
   d8718:	f000 f976 	bl	d8a08 <memset>
   d871c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d871e:	4630      	mov	r0, r6
   d8720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8724:	f000 b802 	b.w	d872c <asctime_r>
   d8728:	2003dd08 	.word	0x2003dd08

000d872c <asctime_r>:
   d872c:	b510      	push	{r4, lr}
   d872e:	460c      	mov	r4, r1
   d8730:	6941      	ldr	r1, [r0, #20]
   d8732:	6903      	ldr	r3, [r0, #16]
   d8734:	6982      	ldr	r2, [r0, #24]
   d8736:	b086      	sub	sp, #24
   d8738:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d873c:	9104      	str	r1, [sp, #16]
   d873e:	6801      	ldr	r1, [r0, #0]
   d8740:	9103      	str	r1, [sp, #12]
   d8742:	6841      	ldr	r1, [r0, #4]
   d8744:	9102      	str	r1, [sp, #8]
   d8746:	6881      	ldr	r1, [r0, #8]
   d8748:	9101      	str	r1, [sp, #4]
   d874a:	68c1      	ldr	r1, [r0, #12]
   d874c:	9100      	str	r1, [sp, #0]
   d874e:	4907      	ldr	r1, [pc, #28]	; (d876c <asctime_r+0x40>)
   d8750:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8754:	440b      	add	r3, r1
   d8756:	4906      	ldr	r1, [pc, #24]	; (d8770 <asctime_r+0x44>)
   d8758:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d875c:	440a      	add	r2, r1
   d875e:	4620      	mov	r0, r4
   d8760:	4904      	ldr	r1, [pc, #16]	; (d8774 <asctime_r+0x48>)
   d8762:	f7fd f8e7 	bl	d5934 <siprintf>
   d8766:	4620      	mov	r0, r4
   d8768:	b006      	add	sp, #24
   d876a:	bd10      	pop	{r4, pc}
   d876c:	000da3d2 	.word	0x000da3d2
   d8770:	000da3bd 	.word	0x000da3bd
   d8774:	000da3f6 	.word	0x000da3f6

000d8778 <atoi>:
   d8778:	220a      	movs	r2, #10
   d877a:	2100      	movs	r1, #0
   d877c:	f000 bf6a 	b.w	d9654 <strtol>

000d8780 <atol>:
   d8780:	220a      	movs	r2, #10
   d8782:	2100      	movs	r1, #0
   d8784:	f000 bf66 	b.w	d9654 <strtol>

000d8788 <__cxa_atexit>:
   d8788:	b510      	push	{r4, lr}
   d878a:	4c05      	ldr	r4, [pc, #20]	; (d87a0 <__cxa_atexit+0x18>)
   d878c:	4613      	mov	r3, r2
   d878e:	b12c      	cbz	r4, d879c <__cxa_atexit+0x14>
   d8790:	460a      	mov	r2, r1
   d8792:	4601      	mov	r1, r0
   d8794:	2002      	movs	r0, #2
   d8796:	f3af 8000 	nop.w
   d879a:	bd10      	pop	{r4, pc}
   d879c:	4620      	mov	r0, r4
   d879e:	bd10      	pop	{r4, pc}
   d87a0:	00000000 	.word	0x00000000

000d87a4 <localtime>:
   d87a4:	b538      	push	{r3, r4, r5, lr}
   d87a6:	4b07      	ldr	r3, [pc, #28]	; (d87c4 <localtime+0x20>)
   d87a8:	681c      	ldr	r4, [r3, #0]
   d87aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d87ac:	4605      	mov	r5, r0
   d87ae:	b91b      	cbnz	r3, d87b8 <localtime+0x14>
   d87b0:	2024      	movs	r0, #36	; 0x24
   d87b2:	f7fd f8a7 	bl	d5904 <malloc>
   d87b6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d87b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d87ba:	4628      	mov	r0, r5
   d87bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d87c0:	f000 b802 	b.w	d87c8 <localtime_r>
   d87c4:	2003dd08 	.word	0x2003dd08

000d87c8 <localtime_r>:
   d87c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d87cc:	460c      	mov	r4, r1
   d87ce:	4680      	mov	r8, r0
   d87d0:	f001 fa5a 	bl	d9c88 <__gettzinfo>
   d87d4:	4621      	mov	r1, r4
   d87d6:	4607      	mov	r7, r0
   d87d8:	4640      	mov	r0, r8
   d87da:	f001 fa59 	bl	d9c90 <gmtime_r>
   d87de:	6946      	ldr	r6, [r0, #20]
   d87e0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d87e4:	07b3      	lsls	r3, r6, #30
   d87e6:	4604      	mov	r4, r0
   d87e8:	d105      	bne.n	d87f6 <localtime_r+0x2e>
   d87ea:	2264      	movs	r2, #100	; 0x64
   d87ec:	fb96 f3f2 	sdiv	r3, r6, r2
   d87f0:	fb02 6313 	mls	r3, r2, r3, r6
   d87f4:	b94b      	cbnz	r3, d880a <localtime_r+0x42>
   d87f6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d87fa:	fb96 f3f5 	sdiv	r3, r6, r5
   d87fe:	fb05 6513 	mls	r5, r5, r3, r6
   d8802:	fab5 f385 	clz	r3, r5
   d8806:	095b      	lsrs	r3, r3, #5
   d8808:	e000      	b.n	d880c <localtime_r+0x44>
   d880a:	2301      	movs	r3, #1
   d880c:	4a5f      	ldr	r2, [pc, #380]	; (d898c <localtime_r+0x1c4>)
   d880e:	2530      	movs	r5, #48	; 0x30
   d8810:	fb05 2503 	mla	r5, r5, r3, r2
   d8814:	f001 f868 	bl	d98e8 <__tz_lock>
   d8818:	f001 f868 	bl	d98ec <_tzset_unlocked>
   d881c:	4b5c      	ldr	r3, [pc, #368]	; (d8990 <localtime_r+0x1c8>)
   d881e:	681b      	ldr	r3, [r3, #0]
   d8820:	b1f3      	cbz	r3, d8860 <localtime_r+0x98>
   d8822:	687b      	ldr	r3, [r7, #4]
   d8824:	429e      	cmp	r6, r3
   d8826:	d105      	bne.n	d8834 <localtime_r+0x6c>
   d8828:	6839      	ldr	r1, [r7, #0]
   d882a:	f8d8 3000 	ldr.w	r3, [r8]
   d882e:	69fa      	ldr	r2, [r7, #28]
   d8830:	b941      	cbnz	r1, d8844 <localtime_r+0x7c>
   d8832:	e00a      	b.n	d884a <localtime_r+0x82>
   d8834:	4630      	mov	r0, r6
   d8836:	f000 ffaf 	bl	d9798 <__tzcalc_limits>
   d883a:	2800      	cmp	r0, #0
   d883c:	d1f4      	bne.n	d8828 <localtime_r+0x60>
   d883e:	f04f 33ff 	mov.w	r3, #4294967295
   d8842:	e00d      	b.n	d8860 <localtime_r+0x98>
   d8844:	4293      	cmp	r3, r2
   d8846:	db08      	blt.n	d885a <localtime_r+0x92>
   d8848:	e001      	b.n	d884e <localtime_r+0x86>
   d884a:	4293      	cmp	r3, r2
   d884c:	da07      	bge.n	d885e <localtime_r+0x96>
   d884e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8850:	4293      	cmp	r3, r2
   d8852:	bfac      	ite	ge
   d8854:	2300      	movge	r3, #0
   d8856:	2301      	movlt	r3, #1
   d8858:	e002      	b.n	d8860 <localtime_r+0x98>
   d885a:	2300      	movs	r3, #0
   d885c:	e000      	b.n	d8860 <localtime_r+0x98>
   d885e:	2301      	movs	r3, #1
   d8860:	6223      	str	r3, [r4, #32]
   d8862:	6a23      	ldr	r3, [r4, #32]
   d8864:	2b01      	cmp	r3, #1
   d8866:	bf0c      	ite	eq
   d8868:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d886a:	6a39      	ldrne	r1, [r7, #32]
   d886c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8870:	203c      	movs	r0, #60	; 0x3c
   d8872:	fb91 f6f3 	sdiv	r6, r1, r3
   d8876:	fb03 1316 	mls	r3, r3, r6, r1
   d887a:	6861      	ldr	r1, [r4, #4]
   d887c:	fb93 f2f0 	sdiv	r2, r3, r0
   d8880:	fb00 3012 	mls	r0, r0, r2, r3
   d8884:	6823      	ldr	r3, [r4, #0]
   d8886:	1a89      	subs	r1, r1, r2
   d8888:	68a2      	ldr	r2, [r4, #8]
   d888a:	6061      	str	r1, [r4, #4]
   d888c:	1a1b      	subs	r3, r3, r0
   d888e:	1b92      	subs	r2, r2, r6
   d8890:	2b3b      	cmp	r3, #59	; 0x3b
   d8892:	6023      	str	r3, [r4, #0]
   d8894:	60a2      	str	r2, [r4, #8]
   d8896:	dd03      	ble.n	d88a0 <localtime_r+0xd8>
   d8898:	3101      	adds	r1, #1
   d889a:	6061      	str	r1, [r4, #4]
   d889c:	3b3c      	subs	r3, #60	; 0x3c
   d889e:	e004      	b.n	d88aa <localtime_r+0xe2>
   d88a0:	2b00      	cmp	r3, #0
   d88a2:	da03      	bge.n	d88ac <localtime_r+0xe4>
   d88a4:	3901      	subs	r1, #1
   d88a6:	6061      	str	r1, [r4, #4]
   d88a8:	333c      	adds	r3, #60	; 0x3c
   d88aa:	6023      	str	r3, [r4, #0]
   d88ac:	6863      	ldr	r3, [r4, #4]
   d88ae:	2b3b      	cmp	r3, #59	; 0x3b
   d88b0:	dd03      	ble.n	d88ba <localtime_r+0xf2>
   d88b2:	3201      	adds	r2, #1
   d88b4:	60a2      	str	r2, [r4, #8]
   d88b6:	3b3c      	subs	r3, #60	; 0x3c
   d88b8:	e004      	b.n	d88c4 <localtime_r+0xfc>
   d88ba:	2b00      	cmp	r3, #0
   d88bc:	da03      	bge.n	d88c6 <localtime_r+0xfe>
   d88be:	3a01      	subs	r2, #1
   d88c0:	60a2      	str	r2, [r4, #8]
   d88c2:	333c      	adds	r3, #60	; 0x3c
   d88c4:	6063      	str	r3, [r4, #4]
   d88c6:	68a3      	ldr	r3, [r4, #8]
   d88c8:	2b17      	cmp	r3, #23
   d88ca:	dd22      	ble.n	d8912 <localtime_r+0x14a>
   d88cc:	69e2      	ldr	r2, [r4, #28]
   d88ce:	3201      	adds	r2, #1
   d88d0:	61e2      	str	r2, [r4, #28]
   d88d2:	69a2      	ldr	r2, [r4, #24]
   d88d4:	3201      	adds	r2, #1
   d88d6:	2a06      	cmp	r2, #6
   d88d8:	bfc8      	it	gt
   d88da:	2200      	movgt	r2, #0
   d88dc:	61a2      	str	r2, [r4, #24]
   d88de:	68e2      	ldr	r2, [r4, #12]
   d88e0:	3b18      	subs	r3, #24
   d88e2:	3201      	adds	r2, #1
   d88e4:	60a3      	str	r3, [r4, #8]
   d88e6:	6923      	ldr	r3, [r4, #16]
   d88e8:	60e2      	str	r2, [r4, #12]
   d88ea:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d88ee:	428a      	cmp	r2, r1
   d88f0:	dd46      	ble.n	d8980 <localtime_r+0x1b8>
   d88f2:	3301      	adds	r3, #1
   d88f4:	2b0c      	cmp	r3, #12
   d88f6:	bf0c      	ite	eq
   d88f8:	6963      	ldreq	r3, [r4, #20]
   d88fa:	6123      	strne	r3, [r4, #16]
   d88fc:	eba2 0201 	sub.w	r2, r2, r1
   d8900:	60e2      	str	r2, [r4, #12]
   d8902:	bf01      	itttt	eq
   d8904:	3301      	addeq	r3, #1
   d8906:	2200      	moveq	r2, #0
   d8908:	6122      	streq	r2, [r4, #16]
   d890a:	6163      	streq	r3, [r4, #20]
   d890c:	bf08      	it	eq
   d890e:	61e2      	streq	r2, [r4, #28]
   d8910:	e036      	b.n	d8980 <localtime_r+0x1b8>
   d8912:	2b00      	cmp	r3, #0
   d8914:	da34      	bge.n	d8980 <localtime_r+0x1b8>
   d8916:	69e2      	ldr	r2, [r4, #28]
   d8918:	3a01      	subs	r2, #1
   d891a:	61e2      	str	r2, [r4, #28]
   d891c:	69a2      	ldr	r2, [r4, #24]
   d891e:	3a01      	subs	r2, #1
   d8920:	bf48      	it	mi
   d8922:	2206      	movmi	r2, #6
   d8924:	61a2      	str	r2, [r4, #24]
   d8926:	68e2      	ldr	r2, [r4, #12]
   d8928:	3318      	adds	r3, #24
   d892a:	3a01      	subs	r2, #1
   d892c:	60e2      	str	r2, [r4, #12]
   d892e:	60a3      	str	r3, [r4, #8]
   d8930:	bb32      	cbnz	r2, d8980 <localtime_r+0x1b8>
   d8932:	6923      	ldr	r3, [r4, #16]
   d8934:	3b01      	subs	r3, #1
   d8936:	d401      	bmi.n	d893c <localtime_r+0x174>
   d8938:	6123      	str	r3, [r4, #16]
   d893a:	e01d      	b.n	d8978 <localtime_r+0x1b0>
   d893c:	230b      	movs	r3, #11
   d893e:	6123      	str	r3, [r4, #16]
   d8940:	6963      	ldr	r3, [r4, #20]
   d8942:	1e5a      	subs	r2, r3, #1
   d8944:	f012 0f03 	tst.w	r2, #3
   d8948:	6162      	str	r2, [r4, #20]
   d894a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d894e:	d105      	bne.n	d895c <localtime_r+0x194>
   d8950:	2164      	movs	r1, #100	; 0x64
   d8952:	fb93 f2f1 	sdiv	r2, r3, r1
   d8956:	fb01 3212 	mls	r2, r1, r2, r3
   d895a:	b94a      	cbnz	r2, d8970 <localtime_r+0x1a8>
   d895c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8960:	fb93 f2f1 	sdiv	r2, r3, r1
   d8964:	fb01 3312 	mls	r3, r1, r2, r3
   d8968:	fab3 f383 	clz	r3, r3
   d896c:	095b      	lsrs	r3, r3, #5
   d896e:	e000      	b.n	d8972 <localtime_r+0x1aa>
   d8970:	2301      	movs	r3, #1
   d8972:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8976:	61e3      	str	r3, [r4, #28]
   d8978:	6923      	ldr	r3, [r4, #16]
   d897a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d897e:	60e3      	str	r3, [r4, #12]
   d8980:	f000 ffb3 	bl	d98ea <__tz_unlock>
   d8984:	4620      	mov	r0, r4
   d8986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d898a:	bf00      	nop
   d898c:	000da57c 	.word	0x000da57c
   d8990:	2003e7e4 	.word	0x2003e7e4

000d8994 <ldiv>:
   d8994:	2900      	cmp	r1, #0
   d8996:	b510      	push	{r4, lr}
   d8998:	fb91 f4f2 	sdiv	r4, r1, r2
   d899c:	fb02 1314 	mls	r3, r2, r4, r1
   d89a0:	db04      	blt.n	d89ac <ldiv+0x18>
   d89a2:	2b00      	cmp	r3, #0
   d89a4:	da07      	bge.n	d89b6 <ldiv+0x22>
   d89a6:	3401      	adds	r4, #1
   d89a8:	1a9b      	subs	r3, r3, r2
   d89aa:	e004      	b.n	d89b6 <ldiv+0x22>
   d89ac:	2b00      	cmp	r3, #0
   d89ae:	bfc4      	itt	gt
   d89b0:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d89b4:	189b      	addgt	r3, r3, r2
   d89b6:	6004      	str	r4, [r0, #0]
   d89b8:	6043      	str	r3, [r0, #4]
   d89ba:	bd10      	pop	{r4, pc}

000d89bc <memcpy>:
   d89bc:	b510      	push	{r4, lr}
   d89be:	1e43      	subs	r3, r0, #1
   d89c0:	440a      	add	r2, r1
   d89c2:	4291      	cmp	r1, r2
   d89c4:	d004      	beq.n	d89d0 <memcpy+0x14>
   d89c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d89ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d89ce:	e7f8      	b.n	d89c2 <memcpy+0x6>
   d89d0:	bd10      	pop	{r4, pc}

000d89d2 <memmove>:
   d89d2:	4288      	cmp	r0, r1
   d89d4:	b510      	push	{r4, lr}
   d89d6:	eb01 0302 	add.w	r3, r1, r2
   d89da:	d801      	bhi.n	d89e0 <memmove+0xe>
   d89dc:	1e42      	subs	r2, r0, #1
   d89de:	e00b      	b.n	d89f8 <memmove+0x26>
   d89e0:	4298      	cmp	r0, r3
   d89e2:	d2fb      	bcs.n	d89dc <memmove+0xa>
   d89e4:	1881      	adds	r1, r0, r2
   d89e6:	1ad2      	subs	r2, r2, r3
   d89e8:	42d3      	cmn	r3, r2
   d89ea:	d004      	beq.n	d89f6 <memmove+0x24>
   d89ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d89f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d89f4:	e7f8      	b.n	d89e8 <memmove+0x16>
   d89f6:	bd10      	pop	{r4, pc}
   d89f8:	4299      	cmp	r1, r3
   d89fa:	d004      	beq.n	d8a06 <memmove+0x34>
   d89fc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8a00:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8a04:	e7f8      	b.n	d89f8 <memmove+0x26>
   d8a06:	bd10      	pop	{r4, pc}

000d8a08 <memset>:
   d8a08:	4402      	add	r2, r0
   d8a0a:	4603      	mov	r3, r0
   d8a0c:	4293      	cmp	r3, r2
   d8a0e:	d002      	beq.n	d8a16 <memset+0xe>
   d8a10:	f803 1b01 	strb.w	r1, [r3], #1
   d8a14:	e7fa      	b.n	d8a0c <memset+0x4>
   d8a16:	4770      	bx	lr

000d8a18 <srand>:
   d8a18:	b538      	push	{r3, r4, r5, lr}
   d8a1a:	4b12      	ldr	r3, [pc, #72]	; (d8a64 <srand+0x4c>)
   d8a1c:	681c      	ldr	r4, [r3, #0]
   d8a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8a20:	4605      	mov	r5, r0
   d8a22:	b9d3      	cbnz	r3, d8a5a <srand+0x42>
   d8a24:	2018      	movs	r0, #24
   d8a26:	f7fc ff6d 	bl	d5904 <malloc>
   d8a2a:	f243 330e 	movw	r3, #13070	; 0x330e
   d8a2e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8a30:	8003      	strh	r3, [r0, #0]
   d8a32:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8a36:	8043      	strh	r3, [r0, #2]
   d8a38:	f241 2334 	movw	r3, #4660	; 0x1234
   d8a3c:	8083      	strh	r3, [r0, #4]
   d8a3e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8a42:	80c3      	strh	r3, [r0, #6]
   d8a44:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8a48:	8103      	strh	r3, [r0, #8]
   d8a4a:	2305      	movs	r3, #5
   d8a4c:	8143      	strh	r3, [r0, #10]
   d8a4e:	230b      	movs	r3, #11
   d8a50:	8183      	strh	r3, [r0, #12]
   d8a52:	2201      	movs	r2, #1
   d8a54:	2300      	movs	r3, #0
   d8a56:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8a5c:	2200      	movs	r2, #0
   d8a5e:	611d      	str	r5, [r3, #16]
   d8a60:	615a      	str	r2, [r3, #20]
   d8a62:	bd38      	pop	{r3, r4, r5, pc}
   d8a64:	2003dd08 	.word	0x2003dd08

000d8a68 <strcmp>:
   d8a68:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8a70:	2a01      	cmp	r2, #1
   d8a72:	bf28      	it	cs
   d8a74:	429a      	cmpcs	r2, r3
   d8a76:	d0f7      	beq.n	d8a68 <strcmp>
   d8a78:	1ad0      	subs	r0, r2, r3
   d8a7a:	4770      	bx	lr

000d8a7c <strcpy>:
   d8a7c:	4603      	mov	r3, r0
   d8a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8a82:	f803 2b01 	strb.w	r2, [r3], #1
   d8a86:	2a00      	cmp	r2, #0
   d8a88:	d1f9      	bne.n	d8a7e <strcpy+0x2>
   d8a8a:	4770      	bx	lr

000d8a8c <iso_year_adjust>:
   d8a8c:	6941      	ldr	r1, [r0, #20]
   d8a8e:	078b      	lsls	r3, r1, #30
   d8a90:	b510      	push	{r4, lr}
   d8a92:	d10c      	bne.n	d8aae <iso_year_adjust+0x22>
   d8a94:	2900      	cmp	r1, #0
   d8a96:	f240 736c 	movw	r3, #1900	; 0x76c
   d8a9a:	bfa8      	it	ge
   d8a9c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d8aa0:	440b      	add	r3, r1
   d8aa2:	2464      	movs	r4, #100	; 0x64
   d8aa4:	fb93 f2f4 	sdiv	r2, r3, r4
   d8aa8:	fb04 3312 	mls	r3, r4, r2, r3
   d8aac:	b983      	cbnz	r3, d8ad0 <iso_year_adjust+0x44>
   d8aae:	2900      	cmp	r1, #0
   d8ab0:	f240 736c 	movw	r3, #1900	; 0x76c
   d8ab4:	bfa8      	it	ge
   d8ab6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d8aba:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8abe:	440b      	add	r3, r1
   d8ac0:	fb93 f1f2 	sdiv	r1, r3, r2
   d8ac4:	fb02 3311 	mls	r3, r2, r1, r3
   d8ac8:	fab3 f283 	clz	r2, r3
   d8acc:	0952      	lsrs	r2, r2, #5
   d8ace:	e000      	b.n	d8ad2 <iso_year_adjust+0x46>
   d8ad0:	2201      	movs	r2, #1
   d8ad2:	6983      	ldr	r3, [r0, #24]
   d8ad4:	69c1      	ldr	r1, [r0, #28]
   d8ad6:	005b      	lsls	r3, r3, #1
   d8ad8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d8adc:	4413      	add	r3, r2
   d8ade:	2b21      	cmp	r3, #33	; 0x21
   d8ae0:	dc0e      	bgt.n	d8b00 <iso_year_adjust+0x74>
   d8ae2:	2b20      	cmp	r3, #32
   d8ae4:	da2f      	bge.n	d8b46 <iso_year_adjust+0xba>
   d8ae6:	2b0d      	cmp	r3, #13
   d8ae8:	dc02      	bgt.n	d8af0 <iso_year_adjust+0x64>
   d8aea:	2b0a      	cmp	r3, #10
   d8aec:	db05      	blt.n	d8afa <iso_year_adjust+0x6e>
   d8aee:	e02a      	b.n	d8b46 <iso_year_adjust+0xba>
   d8af0:	2b10      	cmp	r3, #16
   d8af2:	db26      	blt.n	d8b42 <iso_year_adjust+0xb6>
   d8af4:	2b11      	cmp	r3, #17
   d8af6:	dd26      	ble.n	d8b46 <iso_year_adjust+0xba>
   d8af8:	3b1c      	subs	r3, #28
   d8afa:	2b01      	cmp	r3, #1
   d8afc:	d923      	bls.n	d8b46 <iso_year_adjust+0xba>
   d8afe:	e020      	b.n	d8b42 <iso_year_adjust+0xb6>
   d8b00:	f241 62c6 	movw	r2, #5830	; 0x16c6
   d8b04:	4293      	cmp	r3, r2
   d8b06:	dc0e      	bgt.n	d8b26 <iso_year_adjust+0x9a>
   d8b08:	f241 62c2 	movw	r2, #5826	; 0x16c2
   d8b0c:	4293      	cmp	r3, r2
   d8b0e:	da16      	bge.n	d8b3e <iso_year_adjust+0xb2>
   d8b10:	f241 62a2 	movw	r2, #5794	; 0x16a2
   d8b14:	4293      	cmp	r3, r2
   d8b16:	d012      	beq.n	d8b3e <iso_year_adjust+0xb2>
   d8b18:	db13      	blt.n	d8b42 <iso_year_adjust+0xb6>
   d8b1a:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   d8b1e:	3b12      	subs	r3, #18
   d8b20:	2b02      	cmp	r3, #2
   d8b22:	d90c      	bls.n	d8b3e <iso_year_adjust+0xb2>
   d8b24:	e00d      	b.n	d8b42 <iso_year_adjust+0xb6>
   d8b26:	f241 62d5 	movw	r2, #5845	; 0x16d5
   d8b2a:	4293      	cmp	r3, r2
   d8b2c:	d007      	beq.n	d8b3e <iso_year_adjust+0xb2>
   d8b2e:	f241 62d7 	movw	r2, #5847	; 0x16d7
   d8b32:	4293      	cmp	r3, r2
   d8b34:	d003      	beq.n	d8b3e <iso_year_adjust+0xb2>
   d8b36:	f241 62d3 	movw	r2, #5843	; 0x16d3
   d8b3a:	4293      	cmp	r3, r2
   d8b3c:	d101      	bne.n	d8b42 <iso_year_adjust+0xb6>
   d8b3e:	2001      	movs	r0, #1
   d8b40:	bd10      	pop	{r4, pc}
   d8b42:	2000      	movs	r0, #0
   d8b44:	bd10      	pop	{r4, pc}
   d8b46:	f04f 30ff 	mov.w	r0, #4294967295
   d8b4a:	bd10      	pop	{r4, pc}

000d8b4c <strftime>:
   d8b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8b50:	b093      	sub	sp, #76	; 0x4c
   d8b52:	460e      	mov	r6, r1
   d8b54:	461d      	mov	r5, r3
   d8b56:	4607      	mov	r7, r0
   d8b58:	4691      	mov	r9, r2
   d8b5a:	f000 fe0d 	bl	d9778 <__get_current_time_locale>
   d8b5e:	2300      	movs	r3, #0
   d8b60:	9306      	str	r3, [sp, #24]
   d8b62:	461c      	mov	r4, r3
   d8b64:	1e73      	subs	r3, r6, #1
   d8b66:	9003      	str	r0, [sp, #12]
   d8b68:	9302      	str	r3, [sp, #8]
   d8b6a:	f899 3000 	ldrb.w	r3, [r9]
   d8b6e:	2b00      	cmp	r3, #0
   d8b70:	f000 8492 	beq.w	d9498 <strftime+0x94c>
   d8b74:	2b25      	cmp	r3, #37	; 0x25
   d8b76:	d008      	beq.n	d8b8a <strftime+0x3e>
   d8b78:	9a02      	ldr	r2, [sp, #8]
   d8b7a:	4294      	cmp	r4, r2
   d8b7c:	f080 8490 	bcs.w	d94a0 <strftime+0x954>
   d8b80:	553b      	strb	r3, [r7, r4]
   d8b82:	f109 0901 	add.w	r9, r9, #1
   d8b86:	3401      	adds	r4, #1
   d8b88:	e7ef      	b.n	d8b6a <strftime+0x1e>
   d8b8a:	f899 a001 	ldrb.w	sl, [r9, #1]
   d8b8e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   d8b92:	d007      	beq.n	d8ba4 <strftime+0x58>
   d8b94:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d8b98:	d004      	beq.n	d8ba4 <strftime+0x58>
   d8b9a:	f109 0901 	add.w	r9, r9, #1
   d8b9e:	f04f 0a00 	mov.w	sl, #0
   d8ba2:	e001      	b.n	d8ba8 <strftime+0x5c>
   d8ba4:	f109 0902 	add.w	r9, r9, #2
   d8ba8:	f899 3000 	ldrb.w	r3, [r9]
   d8bac:	3b31      	subs	r3, #49	; 0x31
   d8bae:	2b08      	cmp	r3, #8
   d8bb0:	d808      	bhi.n	d8bc4 <strftime+0x78>
   d8bb2:	4648      	mov	r0, r9
   d8bb4:	220a      	movs	r2, #10
   d8bb6:	a90a      	add	r1, sp, #40	; 0x28
   d8bb8:	f000 fdd4 	bl	d9764 <strtoul>
   d8bbc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d8bc0:	4680      	mov	r8, r0
   d8bc2:	e001      	b.n	d8bc8 <strftime+0x7c>
   d8bc4:	f04f 0800 	mov.w	r8, #0
   d8bc8:	f899 3000 	ldrb.w	r3, [r9]
   d8bcc:	2b45      	cmp	r3, #69	; 0x45
   d8bce:	d001      	beq.n	d8bd4 <strftime+0x88>
   d8bd0:	2b4f      	cmp	r3, #79	; 0x4f
   d8bd2:	d101      	bne.n	d8bd8 <strftime+0x8c>
   d8bd4:	f109 0901 	add.w	r9, r9, #1
   d8bd8:	f899 0000 	ldrb.w	r0, [r9]
   d8bdc:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   d8be0:	2b55      	cmp	r3, #85	; 0x55
   d8be2:	f200 845d 	bhi.w	d94a0 <strftime+0x954>
   d8be6:	e8df f013 	tbh	[pc, r3, lsl #1]
   d8bea:	044a      	.short	0x044a
   d8bec:	045b045b 	.word	0x045b045b
   d8bf0:	045b045b 	.word	0x045b045b
   d8bf4:	045b045b 	.word	0x045b045b
   d8bf8:	045b045b 	.word	0x045b045b
   d8bfc:	045b045b 	.word	0x045b045b
   d8c00:	045b045b 	.word	0x045b045b
   d8c04:	045b045b 	.word	0x045b045b
   d8c08:	045b045b 	.word	0x045b045b
   d8c0c:	045b045b 	.word	0x045b045b
   d8c10:	045b045b 	.word	0x045b045b
   d8c14:	045b045b 	.word	0x045b045b
   d8c18:	045b045b 	.word	0x045b045b
   d8c1c:	045b045b 	.word	0x045b045b
   d8c20:	006f045b 	.word	0x006f045b
   d8c24:	00d400a1 	.word	0x00d400a1
   d8c28:	045b011a 	.word	0x045b011a
   d8c2c:	01a0013f 	.word	0x01a0013f
   d8c30:	022d0226 	.word	0x022d0226
   d8c34:	045b045b 	.word	0x045b045b
   d8c38:	0260045b 	.word	0x0260045b
   d8c3c:	045b045b 	.word	0x045b045b
   d8c40:	045b0268 	.word	0x045b0268
   d8c44:	031d0297 	.word	0x031d0297
   d8c48:	033b0325 	.word	0x033b0325
   d8c4c:	03860343 	.word	0x03860343
   d8c50:	03a000c6 	.word	0x03a000c6
   d8c54:	045b041f 	.word	0x045b041f
   d8c58:	045b045b 	.word	0x045b045b
   d8c5c:	045b045b 	.word	0x045b045b
   d8c60:	0056045b 	.word	0x0056045b
   d8c64:	00ba0089 	.word	0x00ba0089
   d8c68:	010c010c 	.word	0x010c010c
   d8c6c:	0171045b 	.word	0x0171045b
   d8c70:	045b0089 	.word	0x045b0089
   d8c74:	0226023d 	.word	0x0226023d
   d8c78:	025d022d 	.word	0x025d022d
   d8c7c:	045b0262 	.word	0x045b0262
   d8c80:	045b0268 	.word	0x045b0268
   d8c84:	029c00be 	.word	0x029c00be
   d8c88:	032e031f 	.word	0x032e031f
   d8c8c:	037f045b 	.word	0x037f045b
   d8c90:	039200c2 	.word	0x039200c2
   d8c94:	03e7      	.short	0x03e7
   d8c96:	69ab      	ldr	r3, [r5, #24]
   d8c98:	9a03      	ldr	r2, [sp, #12]
   d8c9a:	3318      	adds	r3, #24
   d8c9c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d8ca0:	4640      	mov	r0, r8
   d8ca2:	f000 fc07 	bl	d94b4 <strlen>
   d8ca6:	f108 38ff 	add.w	r8, r8, #4294967295
   d8caa:	193b      	adds	r3, r7, r4
   d8cac:	4420      	add	r0, r4
   d8cae:	4284      	cmp	r4, r0
   d8cb0:	f000 83eb 	beq.w	d948a <strftime+0x93e>
   d8cb4:	9a02      	ldr	r2, [sp, #8]
   d8cb6:	4294      	cmp	r4, r2
   d8cb8:	f080 83f2 	bcs.w	d94a0 <strftime+0x954>
   d8cbc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8cc0:	f803 2b01 	strb.w	r2, [r3], #1
   d8cc4:	3401      	adds	r4, #1
   d8cc6:	e7f2      	b.n	d8cae <strftime+0x162>
   d8cc8:	69ab      	ldr	r3, [r5, #24]
   d8cca:	9a03      	ldr	r2, [sp, #12]
   d8ccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d8cd0:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   d8cd4:	4640      	mov	r0, r8
   d8cd6:	f000 fbed 	bl	d94b4 <strlen>
   d8cda:	f108 38ff 	add.w	r8, r8, #4294967295
   d8cde:	193b      	adds	r3, r7, r4
   d8ce0:	4420      	add	r0, r4
   d8ce2:	4284      	cmp	r4, r0
   d8ce4:	f000 83d1 	beq.w	d948a <strftime+0x93e>
   d8ce8:	9a02      	ldr	r2, [sp, #8]
   d8cea:	4294      	cmp	r4, r2
   d8cec:	f080 83d8 	bcs.w	d94a0 <strftime+0x954>
   d8cf0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8cf4:	f803 2b01 	strb.w	r2, [r3], #1
   d8cf8:	3401      	adds	r4, #1
   d8cfa:	e7f2      	b.n	d8ce2 <strftime+0x196>
   d8cfc:	692b      	ldr	r3, [r5, #16]
   d8cfe:	9a03      	ldr	r2, [sp, #12]
   d8d00:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d8d04:	4640      	mov	r0, r8
   d8d06:	f000 fbd5 	bl	d94b4 <strlen>
   d8d0a:	f108 38ff 	add.w	r8, r8, #4294967295
   d8d0e:	193b      	adds	r3, r7, r4
   d8d10:	4420      	add	r0, r4
   d8d12:	4284      	cmp	r4, r0
   d8d14:	f000 83b9 	beq.w	d948a <strftime+0x93e>
   d8d18:	9a02      	ldr	r2, [sp, #8]
   d8d1a:	4294      	cmp	r4, r2
   d8d1c:	f080 83c0 	bcs.w	d94a0 <strftime+0x954>
   d8d20:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8d24:	f803 2b01 	strb.w	r2, [r3], #1
   d8d28:	3401      	adds	r4, #1
   d8d2a:	e7f2      	b.n	d8d12 <strftime+0x1c6>
   d8d2c:	692b      	ldr	r3, [r5, #16]
   d8d2e:	9a03      	ldr	r2, [sp, #12]
   d8d30:	330c      	adds	r3, #12
   d8d32:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d8d36:	4640      	mov	r0, r8
   d8d38:	f000 fbbc 	bl	d94b4 <strlen>
   d8d3c:	f108 38ff 	add.w	r8, r8, #4294967295
   d8d40:	193b      	adds	r3, r7, r4
   d8d42:	4420      	add	r0, r4
   d8d44:	4284      	cmp	r4, r0
   d8d46:	f000 83a0 	beq.w	d948a <strftime+0x93e>
   d8d4a:	9a02      	ldr	r2, [sp, #8]
   d8d4c:	4294      	cmp	r4, r2
   d8d4e:	f080 83a7 	bcs.w	d94a0 <strftime+0x954>
   d8d52:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8d56:	f803 2b01 	strb.w	r2, [r3], #1
   d8d5a:	3401      	adds	r4, #1
   d8d5c:	e7f2      	b.n	d8d44 <strftime+0x1f8>
   d8d5e:	9b03      	ldr	r3, [sp, #12]
   d8d60:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   d8d64:	e00a      	b.n	d8d7c <strftime+0x230>
   d8d66:	9b03      	ldr	r3, [sp, #12]
   d8d68:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   d8d6c:	e006      	b.n	d8d7c <strftime+0x230>
   d8d6e:	9b03      	ldr	r3, [sp, #12]
   d8d70:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   d8d74:	e002      	b.n	d8d7c <strftime+0x230>
   d8d76:	9b03      	ldr	r3, [sp, #12]
   d8d78:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   d8d7c:	4640      	mov	r0, r8
   d8d7e:	f000 fb99 	bl	d94b4 <strlen>
   d8d82:	f898 3000 	ldrb.w	r3, [r8]
   d8d86:	2b00      	cmp	r3, #0
   d8d88:	f000 837f 	beq.w	d948a <strftime+0x93e>
   d8d8c:	462b      	mov	r3, r5
   d8d8e:	4642      	mov	r2, r8
   d8d90:	e093      	b.n	d8eba <strftime+0x36e>
   d8d92:	49b6      	ldr	r1, [pc, #728]	; (d906c <strftime+0x520>)
   d8d94:	f8d5 b014 	ldr.w	fp, [r5, #20]
   d8d98:	458b      	cmp	fp, r1
   d8d9a:	bfac      	ite	ge
   d8d9c:	2100      	movge	r1, #0
   d8d9e:	2101      	movlt	r1, #1
   d8da0:	f1bb 0f00 	cmp.w	fp, #0
   d8da4:	db04      	blt.n	d8db0 <strftime+0x264>
   d8da6:	2064      	movs	r0, #100	; 0x64
   d8da8:	fb9b f0f0 	sdiv	r0, fp, r0
   d8dac:	3013      	adds	r0, #19
   d8dae:	e008      	b.n	d8dc2 <strftime+0x276>
   d8db0:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   d8db4:	9107      	str	r1, [sp, #28]
   d8db6:	f000 ff1f 	bl	d9bf8 <abs>
   d8dba:	9907      	ldr	r1, [sp, #28]
   d8dbc:	2364      	movs	r3, #100	; 0x64
   d8dbe:	fb90 f0f3 	sdiv	r0, r0, r3
   d8dc2:	f1ba 0f00 	cmp.w	sl, #0
   d8dc6:	d008      	beq.n	d8dda <strftime+0x28e>
   d8dc8:	2863      	cmp	r0, #99	; 0x63
   d8dca:	dd09      	ble.n	d8de0 <strftime+0x294>
   d8dcc:	4ba8      	ldr	r3, [pc, #672]	; (d9070 <strftime+0x524>)
   d8dce:	4aa9      	ldr	r2, [pc, #676]	; (d9074 <strftime+0x528>)
   d8dd0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d8dd4:	bf18      	it	ne
   d8dd6:	4613      	movne	r3, r2
   d8dd8:	e003      	b.n	d8de2 <strftime+0x296>
   d8dda:	4ba6      	ldr	r3, [pc, #664]	; (d9074 <strftime+0x528>)
   d8ddc:	4aa6      	ldr	r2, [pc, #664]	; (d9078 <strftime+0x52c>)
   d8dde:	e001      	b.n	d8de4 <strftime+0x298>
   d8de0:	4ba4      	ldr	r3, [pc, #656]	; (d9074 <strftime+0x528>)
   d8de2:	4aa6      	ldr	r2, [pc, #664]	; (d907c <strftime+0x530>)
   d8de4:	9001      	str	r0, [sp, #4]
   d8de6:	f1b8 0f01 	cmp.w	r8, #1
   d8dea:	bf98      	it	ls
   d8dec:	f04f 0802 	movls.w	r8, #2
   d8df0:	ebc1 0108 	rsb	r1, r1, r8
   d8df4:	9100      	str	r1, [sp, #0]
   d8df6:	489d      	ldr	r0, [pc, #628]	; (d906c <strftime+0x520>)
   d8df8:	49a1      	ldr	r1, [pc, #644]	; (d9080 <strftime+0x534>)
   d8dfa:	4583      	cmp	fp, r0
   d8dfc:	bfb8      	it	lt
   d8dfe:	460b      	movlt	r3, r1
   d8e00:	e21e      	b.n	d9240 <strftime+0x6f4>
   d8e02:	4aa0      	ldr	r2, [pc, #640]	; (d9084 <strftime+0x538>)
   d8e04:	49a0      	ldr	r1, [pc, #640]	; (d9088 <strftime+0x53c>)
   d8e06:	68eb      	ldr	r3, [r5, #12]
   d8e08:	2864      	cmp	r0, #100	; 0x64
   d8e0a:	bf08      	it	eq
   d8e0c:	460a      	moveq	r2, r1
   d8e0e:	1b31      	subs	r1, r6, r4
   d8e10:	1938      	adds	r0, r7, r4
   d8e12:	f7fc fda7 	bl	d5964 <sniprintf>
   d8e16:	2800      	cmp	r0, #0
   d8e18:	f280 8302 	bge.w	d9420 <strftime+0x8d4>
   d8e1c:	e340      	b.n	d94a0 <strftime+0x954>
   d8e1e:	6968      	ldr	r0, [r5, #20]
   d8e20:	692b      	ldr	r3, [r5, #16]
   d8e22:	2800      	cmp	r0, #0
   d8e24:	f103 0b01 	add.w	fp, r3, #1
   d8e28:	eb07 0804 	add.w	r8, r7, r4
   d8e2c:	ebc4 0a06 	rsb	sl, r4, r6
   d8e30:	68eb      	ldr	r3, [r5, #12]
   d8e32:	db05      	blt.n	d8e40 <strftime+0x2f4>
   d8e34:	2264      	movs	r2, #100	; 0x64
   d8e36:	fb90 f1f2 	sdiv	r1, r0, r2
   d8e3a:	fb02 0011 	mls	r0, r2, r1, r0
   d8e3e:	e00a      	b.n	d8e56 <strftime+0x30a>
   d8e40:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d8e44:	9307      	str	r3, [sp, #28]
   d8e46:	f000 fed7 	bl	d9bf8 <abs>
   d8e4a:	2264      	movs	r2, #100	; 0x64
   d8e4c:	9b07      	ldr	r3, [sp, #28]
   d8e4e:	fb90 f1f2 	sdiv	r1, r0, r2
   d8e52:	fb01 0012 	mls	r0, r1, r2, r0
   d8e56:	4a8d      	ldr	r2, [pc, #564]	; (d908c <strftime+0x540>)
   d8e58:	9001      	str	r0, [sp, #4]
   d8e5a:	9300      	str	r3, [sp, #0]
   d8e5c:	4651      	mov	r1, sl
   d8e5e:	465b      	mov	r3, fp
   d8e60:	4640      	mov	r0, r8
   d8e62:	f7fc fd7f 	bl	d5964 <sniprintf>
   d8e66:	e7d6      	b.n	d8e16 <strftime+0x2ca>
   d8e68:	2325      	movs	r3, #37	; 0x25
   d8e6a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d8e6e:	f1ba 0f00 	cmp.w	sl, #0
   d8e72:	d007      	beq.n	d8e84 <strftime+0x338>
   d8e74:	f1b8 0f05 	cmp.w	r8, #5
   d8e78:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   d8e7c:	bf98      	it	ls
   d8e7e:	f04f 0806 	movls.w	r8, #6
   d8e82:	e004      	b.n	d8e8e <strftime+0x342>
   d8e84:	232b      	movs	r3, #43	; 0x2b
   d8e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   d8e8a:	f04f 080a 	mov.w	r8, #10
   d8e8e:	f1b8 0306 	subs.w	r3, r8, #6
   d8e92:	d102      	bne.n	d8e9a <strftime+0x34e>
   d8e94:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d8e98:	e00a      	b.n	d8eb0 <strftime+0x364>
   d8e9a:	4a7d      	ldr	r2, [pc, #500]	; (d9090 <strftime+0x544>)
   d8e9c:	211e      	movs	r1, #30
   d8e9e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d8ea2:	f7fc fd5f 	bl	d5964 <sniprintf>
   d8ea6:	2800      	cmp	r0, #0
   d8ea8:	ddf4      	ble.n	d8e94 <strftime+0x348>
   d8eaa:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d8eae:	4418      	add	r0, r3
   d8eb0:	4978      	ldr	r1, [pc, #480]	; (d9094 <strftime+0x548>)
   d8eb2:	f7ff fde3 	bl	d8a7c <strcpy>
   d8eb6:	462b      	mov	r3, r5
   d8eb8:	aa0a      	add	r2, sp, #40	; 0x28
   d8eba:	1b31      	subs	r1, r6, r4
   d8ebc:	1938      	adds	r0, r7, r4
   d8ebe:	f7ff fe45 	bl	d8b4c <strftime>
   d8ec2:	2800      	cmp	r0, #0
   d8ec4:	f340 82ec 	ble.w	d94a0 <strftime+0x954>
   d8ec8:	4404      	add	r4, r0
   d8eca:	e2de      	b.n	d948a <strftime+0x93e>
   d8ecc:	4628      	mov	r0, r5
   d8ece:	f7ff fddd 	bl	d8a8c <iso_year_adjust>
   d8ed2:	4680      	mov	r8, r0
   d8ed4:	6968      	ldr	r0, [r5, #20]
   d8ed6:	2800      	cmp	r0, #0
   d8ed8:	db05      	blt.n	d8ee6 <strftime+0x39a>
   d8eda:	2264      	movs	r2, #100	; 0x64
   d8edc:	fb90 f1f2 	sdiv	r1, r0, r2
   d8ee0:	fb02 0011 	mls	r0, r2, r1, r0
   d8ee4:	e008      	b.n	d8ef8 <strftime+0x3ac>
   d8ee6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d8eea:	f000 fe85 	bl	d9bf8 <abs>
   d8eee:	2264      	movs	r2, #100	; 0x64
   d8ef0:	fb90 f3f2 	sdiv	r3, r0, r2
   d8ef4:	fb03 0012 	mls	r0, r3, r2, r0
   d8ef8:	f1b8 0f00 	cmp.w	r8, #0
   d8efc:	da06      	bge.n	d8f0c <strftime+0x3c0>
   d8efe:	696a      	ldr	r2, [r5, #20]
   d8f00:	4b65      	ldr	r3, [pc, #404]	; (d9098 <strftime+0x54c>)
   d8f02:	429a      	cmp	r2, r3
   d8f04:	bfb8      	it	lt
   d8f06:	f04f 0801 	movlt.w	r8, #1
   d8f0a:	e006      	b.n	d8f1a <strftime+0x3ce>
   d8f0c:	d005      	beq.n	d8f1a <strftime+0x3ce>
   d8f0e:	696a      	ldr	r2, [r5, #20]
   d8f10:	4b56      	ldr	r3, [pc, #344]	; (d906c <strftime+0x520>)
   d8f12:	429a      	cmp	r2, r3
   d8f14:	bfb8      	it	lt
   d8f16:	f04f 38ff 	movlt.w	r8, #4294967295
   d8f1a:	2364      	movs	r3, #100	; 0x64
   d8f1c:	4440      	add	r0, r8
   d8f1e:	fb90 f2f3 	sdiv	r2, r0, r3
   d8f22:	fb03 0012 	mls	r0, r3, r2, r0
   d8f26:	4418      	add	r0, r3
   d8f28:	e1f9      	b.n	d931e <strftime+0x7d2>
   d8f2a:	4b50      	ldr	r3, [pc, #320]	; (d906c <strftime+0x520>)
   d8f2c:	6969      	ldr	r1, [r5, #20]
   d8f2e:	9108      	str	r1, [sp, #32]
   d8f30:	4299      	cmp	r1, r3
   d8f32:	bfac      	ite	ge
   d8f34:	2300      	movge	r3, #0
   d8f36:	2301      	movlt	r3, #1
   d8f38:	4628      	mov	r0, r5
   d8f3a:	9307      	str	r3, [sp, #28]
   d8f3c:	f7ff fda6 	bl	d8a8c <iso_year_adjust>
   d8f40:	9908      	ldr	r1, [sp, #32]
   d8f42:	2900      	cmp	r1, #0
   d8f44:	4683      	mov	fp, r0
   d8f46:	db04      	blt.n	d8f52 <strftime+0x406>
   d8f48:	2364      	movs	r3, #100	; 0x64
   d8f4a:	fb91 f3f3 	sdiv	r3, r1, r3
   d8f4e:	3313      	adds	r3, #19
   d8f50:	e008      	b.n	d8f64 <strftime+0x418>
   d8f52:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   d8f56:	9108      	str	r1, [sp, #32]
   d8f58:	f000 fe4e 	bl	d9bf8 <abs>
   d8f5c:	9908      	ldr	r1, [sp, #32]
   d8f5e:	2364      	movs	r3, #100	; 0x64
   d8f60:	fb90 f3f3 	sdiv	r3, r0, r3
   d8f64:	6968      	ldr	r0, [r5, #20]
   d8f66:	2800      	cmp	r0, #0
   d8f68:	db06      	blt.n	d8f78 <strftime+0x42c>
   d8f6a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d8f6e:	fb90 fcfe 	sdiv	ip, r0, lr
   d8f72:	fb0e 001c 	mls	r0, lr, ip, r0
   d8f76:	e00d      	b.n	d8f94 <strftime+0x448>
   d8f78:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d8f7c:	9109      	str	r1, [sp, #36]	; 0x24
   d8f7e:	9308      	str	r3, [sp, #32]
   d8f80:	f000 fe3a 	bl	d9bf8 <abs>
   d8f84:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d8f88:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8f8a:	9b08      	ldr	r3, [sp, #32]
   d8f8c:	fb90 fcfe 	sdiv	ip, r0, lr
   d8f90:	fb0c 001e 	mls	r0, ip, lr, r0
   d8f94:	f1bb 0f00 	cmp.w	fp, #0
   d8f98:	da08      	bge.n	d8fac <strftime+0x460>
   d8f9a:	6969      	ldr	r1, [r5, #20]
   d8f9c:	4a3e      	ldr	r2, [pc, #248]	; (d9098 <strftime+0x54c>)
   d8f9e:	4291      	cmp	r1, r2
   d8fa0:	da0a      	bge.n	d8fb8 <strftime+0x46c>
   d8fa2:	f04f 0b01 	mov.w	fp, #1
   d8fa6:	f8cd b01c 	str.w	fp, [sp, #28]
   d8faa:	e005      	b.n	d8fb8 <strftime+0x46c>
   d8fac:	d004      	beq.n	d8fb8 <strftime+0x46c>
   d8fae:	4a2f      	ldr	r2, [pc, #188]	; (d906c <strftime+0x520>)
   d8fb0:	4291      	cmp	r1, r2
   d8fb2:	bfb8      	it	lt
   d8fb4:	f04f 3bff 	movlt.w	fp, #4294967295
   d8fb8:	eb0b 0200 	add.w	r2, fp, r0
   d8fbc:	1c50      	adds	r0, r2, #1
   d8fbe:	d102      	bne.n	d8fc6 <strftime+0x47a>
   d8fc0:	3b01      	subs	r3, #1
   d8fc2:	2263      	movs	r2, #99	; 0x63
   d8fc4:	e003      	b.n	d8fce <strftime+0x482>
   d8fc6:	2a64      	cmp	r2, #100	; 0x64
   d8fc8:	bf04      	itt	eq
   d8fca:	3301      	addeq	r3, #1
   d8fcc:	2200      	moveq	r2, #0
   d8fce:	2064      	movs	r0, #100	; 0x64
   d8fd0:	fb00 2303 	mla	r3, r0, r3, r2
   d8fd4:	9a07      	ldr	r2, [sp, #28]
   d8fd6:	b142      	cbz	r2, d8fea <strftime+0x49e>
   d8fd8:	222d      	movs	r2, #45	; 0x2d
   d8fda:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d8fde:	f1b8 0f00 	cmp.w	r8, #0
   d8fe2:	d013      	beq.n	d900c <strftime+0x4c0>
   d8fe4:	f108 38ff 	add.w	r8, r8, #4294967295
   d8fe8:	e010      	b.n	d900c <strftime+0x4c0>
   d8fea:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d8fee:	d110      	bne.n	d9012 <strftime+0x4c6>
   d8ff0:	f242 720f 	movw	r2, #9999	; 0x270f
   d8ff4:	4293      	cmp	r3, r2
   d8ff6:	d90c      	bls.n	d9012 <strftime+0x4c6>
   d8ff8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d8ffc:	f1b8 0f00 	cmp.w	r8, #0
   d9000:	d1f0      	bne.n	d8fe4 <strftime+0x498>
   d9002:	aa12      	add	r2, sp, #72	; 0x48
   d9004:	2125      	movs	r1, #37	; 0x25
   d9006:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   d900a:	e00a      	b.n	d9022 <strftime+0x4d6>
   d900c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   d9010:	e000      	b.n	d9014 <strftime+0x4c8>
   d9012:	aa0a      	add	r2, sp, #40	; 0x28
   d9014:	2125      	movs	r1, #37	; 0x25
   d9016:	7011      	strb	r1, [r2, #0]
   d9018:	f1ba 0f00 	cmp.w	sl, #0
   d901c:	d101      	bne.n	d9022 <strftime+0x4d6>
   d901e:	1c50      	adds	r0, r2, #1
   d9020:	e002      	b.n	d9028 <strftime+0x4dc>
   d9022:	2130      	movs	r1, #48	; 0x30
   d9024:	1c90      	adds	r0, r2, #2
   d9026:	7051      	strb	r1, [r2, #1]
   d9028:	491c      	ldr	r1, [pc, #112]	; (d909c <strftime+0x550>)
   d902a:	9307      	str	r3, [sp, #28]
   d902c:	f7ff fd26 	bl	d8a7c <strcpy>
   d9030:	9b07      	ldr	r3, [sp, #28]
   d9032:	9300      	str	r3, [sp, #0]
   d9034:	e1ad      	b.n	d9392 <strftime+0x846>
   d9036:	4a14      	ldr	r2, [pc, #80]	; (d9088 <strftime+0x53c>)
   d9038:	4912      	ldr	r1, [pc, #72]	; (d9084 <strftime+0x538>)
   d903a:	68ab      	ldr	r3, [r5, #8]
   d903c:	286b      	cmp	r0, #107	; 0x6b
   d903e:	bf08      	it	eq
   d9040:	460a      	moveq	r2, r1
   d9042:	e6e4      	b.n	d8e0e <strftime+0x2c2>
   d9044:	68a9      	ldr	r1, [r5, #8]
   d9046:	230c      	movs	r3, #12
   d9048:	b131      	cbz	r1, d9058 <strftime+0x50c>
   d904a:	4299      	cmp	r1, r3
   d904c:	bf0e      	itee	eq
   d904e:	460b      	moveq	r3, r1
   d9050:	fb91 f2f3 	sdivne	r2, r1, r3
   d9054:	fb03 1312 	mlsne	r3, r3, r2, r1
   d9058:	4a0a      	ldr	r2, [pc, #40]	; (d9084 <strftime+0x538>)
   d905a:	490b      	ldr	r1, [pc, #44]	; (d9088 <strftime+0x53c>)
   d905c:	2849      	cmp	r0, #73	; 0x49
   d905e:	bf08      	it	eq
   d9060:	460a      	moveq	r2, r1
   d9062:	e6d4      	b.n	d8e0e <strftime+0x2c2>
   d9064:	69eb      	ldr	r3, [r5, #28]
   d9066:	4a0e      	ldr	r2, [pc, #56]	; (d90a0 <strftime+0x554>)
   d9068:	3301      	adds	r3, #1
   d906a:	e6d0      	b.n	d8e0e <strftime+0x2c2>
   d906c:	fffff894 	.word	0xfffff894
   d9070:	000da5eb 	.word	0x000da5eb
   d9074:	000d9f75 	.word	0x000d9f75
   d9078:	000da5dc 	.word	0x000da5dc
   d907c:	000da5e3 	.word	0x000da5e3
   d9080:	000d9fef 	.word	0x000d9fef
   d9084:	000da5ed 	.word	0x000da5ed
   d9088:	000da5fb 	.word	0x000da5fb
   d908c:	000da5f1 	.word	0x000da5f1
   d9090:	000da600 	.word	0x000da600
   d9094:	000da604 	.word	0x000da604
   d9098:	fffff895 	.word	0xfffff895
   d909c:	000da60c 	.word	0x000da60c
   d90a0:	000da610 	.word	0x000da610
   d90a4:	692b      	ldr	r3, [r5, #16]
   d90a6:	3301      	adds	r3, #1
   d90a8:	e13d      	b.n	d9326 <strftime+0x7da>
   d90aa:	686b      	ldr	r3, [r5, #4]
   d90ac:	e13b      	b.n	d9326 <strftime+0x7da>
   d90ae:	9b02      	ldr	r3, [sp, #8]
   d90b0:	429c      	cmp	r4, r3
   d90b2:	f080 81f5 	bcs.w	d94a0 <strftime+0x954>
   d90b6:	230a      	movs	r3, #10
   d90b8:	e1e5      	b.n	d9486 <strftime+0x93a>
   d90ba:	68ab      	ldr	r3, [r5, #8]
   d90bc:	9a03      	ldr	r2, [sp, #12]
   d90be:	2b0b      	cmp	r3, #11
   d90c0:	bfcc      	ite	gt
   d90c2:	23a4      	movgt	r3, #164	; 0xa4
   d90c4:	23a0      	movle	r3, #160	; 0xa0
   d90c6:	4413      	add	r3, r2
   d90c8:	f8d3 8004 	ldr.w	r8, [r3, #4]
   d90cc:	4640      	mov	r0, r8
   d90ce:	f000 f9f1 	bl	d94b4 <strlen>
   d90d2:	4bb2      	ldr	r3, [pc, #712]	; (d939c <strftime+0x850>)
   d90d4:	f8d3 e000 	ldr.w	lr, [r3]
   d90d8:	1939      	adds	r1, r7, r4
   d90da:	4642      	mov	r2, r8
   d90dc:	4420      	add	r0, r4
   d90de:	4284      	cmp	r4, r0
   d90e0:	f000 81d3 	beq.w	d948a <strftime+0x93e>
   d90e4:	9b02      	ldr	r3, [sp, #8]
   d90e6:	429c      	cmp	r4, r3
   d90e8:	f080 81da 	bcs.w	d94a0 <strftime+0x954>
   d90ec:	f899 3000 	ldrb.w	r3, [r9]
   d90f0:	2b50      	cmp	r3, #80	; 0x50
   d90f2:	f104 0401 	add.w	r4, r4, #1
   d90f6:	7813      	ldrb	r3, [r2, #0]
   d90f8:	d10a      	bne.n	d9110 <strftime+0x5c4>
   d90fa:	eb0e 0c03 	add.w	ip, lr, r3
   d90fe:	f89c c001 	ldrb.w	ip, [ip, #1]
   d9102:	f00c 0c03 	and.w	ip, ip, #3
   d9106:	f1bc 0f01 	cmp.w	ip, #1
   d910a:	bf08      	it	eq
   d910c:	3320      	addeq	r3, #32
   d910e:	b2db      	uxtb	r3, r3
   d9110:	f801 3b01 	strb.w	r3, [r1], #1
   d9114:	3201      	adds	r2, #1
   d9116:	e7e2      	b.n	d90de <strftime+0x592>
   d9118:	686b      	ldr	r3, [r5, #4]
   d911a:	9300      	str	r3, [sp, #0]
   d911c:	4aa0      	ldr	r2, [pc, #640]	; (d93a0 <strftime+0x854>)
   d911e:	68ab      	ldr	r3, [r5, #8]
   d9120:	e139      	b.n	d9396 <strftime+0x84a>
   d9122:	6a2b      	ldr	r3, [r5, #32]
   d9124:	2b00      	cmp	r3, #0
   d9126:	db17      	blt.n	d9158 <strftime+0x60c>
   d9128:	f000 fbde 	bl	d98e8 <__tz_lock>
   d912c:	9b06      	ldr	r3, [sp, #24]
   d912e:	b91b      	cbnz	r3, d9138 <strftime+0x5ec>
   d9130:	f000 fbdc 	bl	d98ec <_tzset_unlocked>
   d9134:	2301      	movs	r3, #1
   d9136:	9306      	str	r3, [sp, #24]
   d9138:	f000 fda6 	bl	d9c88 <__gettzinfo>
   d913c:	6a2b      	ldr	r3, [r5, #32]
   d913e:	2b00      	cmp	r3, #0
   d9140:	bfd4      	ite	le
   d9142:	2300      	movle	r3, #0
   d9144:	2301      	movgt	r3, #1
   d9146:	221c      	movs	r2, #28
   d9148:	fb02 0003 	mla	r0, r2, r3, r0
   d914c:	6a03      	ldr	r3, [r0, #32]
   d914e:	f1c3 0800 	rsb	r8, r3, #0
   d9152:	f000 fbca 	bl	d98ea <__tz_unlock>
   d9156:	e001      	b.n	d915c <strftime+0x610>
   d9158:	f04f 0800 	mov.w	r8, #0
   d915c:	f8d5 e014 	ldr.w	lr, [r5, #20]
   d9160:	4670      	mov	r0, lr
   d9162:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   d9166:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d916a:	f141 33ff 	adc.w	r3, r1, #4294967295
   d916e:	2a00      	cmp	r2, #0
   d9170:	f173 0b00 	sbcs.w	fp, r3, #0
   d9174:	ebc4 0c06 	rsb	ip, r4, r6
   d9178:	eb07 0a04 	add.w	sl, r7, r4
   d917c:	da03      	bge.n	d9186 <strftime+0x63a>
   d917e:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   d9182:	f141 33ff 	adc.w	r3, r1, #4294967295
   d9186:	0891      	lsrs	r1, r2, #2
   d9188:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   d918c:	109b      	asrs	r3, r3, #2
   d918e:	9104      	str	r1, [sp, #16]
   d9190:	9305      	str	r3, [sp, #20]
   d9192:	f10e 31ff 	add.w	r1, lr, #4294967295
   d9196:	2364      	movs	r3, #100	; 0x64
   d9198:	fb91 f1f3 	sdiv	r1, r1, r3
   d919c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d91a0:	1a52      	subs	r2, r2, r1
   d91a2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   d91a6:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   d91aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d91ae:	fb90 f1f1 	sdiv	r1, r0, r1
   d91b2:	1852      	adds	r2, r2, r1
   d91b4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d91b8:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   d91bc:	f240 116d 	movw	r1, #365	; 0x16d
   d91c0:	fb01 fe0e 	mul.w	lr, r1, lr
   d91c4:	69e9      	ldr	r1, [r5, #28]
   d91c6:	eb12 020e 	adds.w	r2, r2, lr
   d91ca:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   d91ce:	1852      	adds	r2, r2, r1
   d91d0:	f04f 0e18 	mov.w	lr, #24
   d91d4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d91d8:	fba2 010e 	umull	r0, r1, r2, lr
   d91dc:	fb0e 1103 	mla	r1, lr, r3, r1
   d91e0:	68ab      	ldr	r3, [r5, #8]
   d91e2:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   d91e6:	18c0      	adds	r0, r0, r3
   d91e8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d91ec:	fba0 230e 	umull	r2, r3, r0, lr
   d91f0:	fb0e 3301 	mla	r3, lr, r1, r3
   d91f4:	6869      	ldr	r1, [r5, #4]
   d91f6:	1852      	adds	r2, r2, r1
   d91f8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d91fc:	fba2 010e 	umull	r0, r1, r2, lr
   d9200:	fb0e 1103 	mla	r1, lr, r3, r1
   d9204:	682b      	ldr	r3, [r5, #0]
   d9206:	4a67      	ldr	r2, [pc, #412]	; (d93a4 <strftime+0x858>)
   d9208:	18c0      	adds	r0, r0, r3
   d920a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d920e:	ebb0 0008 	subs.w	r0, r0, r8
   d9212:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   d9216:	e9cd 0100 	strd	r0, r1, [sp]
   d921a:	4661      	mov	r1, ip
   d921c:	4650      	mov	r0, sl
   d921e:	f7fc fba1 	bl	d5964 <sniprintf>
   d9222:	e5f8      	b.n	d8e16 <strftime+0x2ca>
   d9224:	682b      	ldr	r3, [r5, #0]
   d9226:	e07e      	b.n	d9326 <strftime+0x7da>
   d9228:	9b02      	ldr	r3, [sp, #8]
   d922a:	429c      	cmp	r4, r3
   d922c:	f080 8138 	bcs.w	d94a0 <strftime+0x954>
   d9230:	2309      	movs	r3, #9
   d9232:	e128      	b.n	d9486 <strftime+0x93a>
   d9234:	682b      	ldr	r3, [r5, #0]
   d9236:	9301      	str	r3, [sp, #4]
   d9238:	686b      	ldr	r3, [r5, #4]
   d923a:	9300      	str	r3, [sp, #0]
   d923c:	4a5a      	ldr	r2, [pc, #360]	; (d93a8 <strftime+0x85c>)
   d923e:	68ab      	ldr	r3, [r5, #8]
   d9240:	1b31      	subs	r1, r6, r4
   d9242:	1938      	adds	r0, r7, r4
   d9244:	e60d      	b.n	d8e62 <strftime+0x316>
   d9246:	9b02      	ldr	r3, [sp, #8]
   d9248:	429c      	cmp	r4, r3
   d924a:	f080 8129 	bcs.w	d94a0 <strftime+0x954>
   d924e:	69ab      	ldr	r3, [r5, #24]
   d9250:	1c62      	adds	r2, r4, #1
   d9252:	b90b      	cbnz	r3, d9258 <strftime+0x70c>
   d9254:	2337      	movs	r3, #55	; 0x37
   d9256:	e000      	b.n	d925a <strftime+0x70e>
   d9258:	3330      	adds	r3, #48	; 0x30
   d925a:	553b      	strb	r3, [r7, r4]
   d925c:	4614      	mov	r4, r2
   d925e:	e114      	b.n	d948a <strftime+0x93e>
   d9260:	69eb      	ldr	r3, [r5, #28]
   d9262:	69aa      	ldr	r2, [r5, #24]
   d9264:	3307      	adds	r3, #7
   d9266:	1a9b      	subs	r3, r3, r2
   d9268:	2207      	movs	r2, #7
   d926a:	fb93 f3f2 	sdiv	r3, r3, r2
   d926e:	e05a      	b.n	d9326 <strftime+0x7da>
   d9270:	4628      	mov	r0, r5
   d9272:	f7ff fc0b 	bl	d8a8c <iso_year_adjust>
   d9276:	69aa      	ldr	r2, [r5, #24]
   d9278:	b10a      	cbz	r2, d927e <strftime+0x732>
   d927a:	1e53      	subs	r3, r2, #1
   d927c:	e000      	b.n	d9280 <strftime+0x734>
   d927e:	2306      	movs	r3, #6
   d9280:	2800      	cmp	r0, #0
   d9282:	dc2f      	bgt.n	d92e4 <strftime+0x798>
   d9284:	69ea      	ldr	r2, [r5, #28]
   d9286:	d101      	bne.n	d928c <strftime+0x740>
   d9288:	320a      	adds	r2, #10
   d928a:	e03b      	b.n	d9304 <strftime+0x7b8>
   d928c:	1a9a      	subs	r2, r3, r2
   d928e:	696b      	ldr	r3, [r5, #20]
   d9290:	f240 716b 	movw	r1, #1899	; 0x76b
   d9294:	2b00      	cmp	r3, #0
   d9296:	bfb4      	ite	lt
   d9298:	4608      	movlt	r0, r1
   d929a:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   d929e:	4418      	add	r0, r3
   d92a0:	0781      	lsls	r1, r0, #30
   d92a2:	d107      	bne.n	d92b4 <strftime+0x768>
   d92a4:	4601      	mov	r1, r0
   d92a6:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d92aa:	fb90 f0fe 	sdiv	r0, r0, lr
   d92ae:	fb0e 1110 	mls	r1, lr, r0, r1
   d92b2:	b981      	cbnz	r1, d92d6 <strftime+0x78a>
   d92b4:	2b00      	cmp	r3, #0
   d92b6:	f240 716b 	movw	r1, #1899	; 0x76b
   d92ba:	bfa8      	it	ge
   d92bc:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   d92c0:	4419      	add	r1, r3
   d92c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d92c6:	fb91 f0f3 	sdiv	r0, r1, r3
   d92ca:	fb03 1110 	mls	r1, r3, r0, r1
   d92ce:	fab1 f181 	clz	r1, r1
   d92d2:	0949      	lsrs	r1, r1, #5
   d92d4:	e000      	b.n	d92d8 <strftime+0x78c>
   d92d6:	2101      	movs	r1, #1
   d92d8:	1a52      	subs	r2, r2, r1
   d92da:	2a05      	cmp	r2, #5
   d92dc:	bfb4      	ite	lt
   d92de:	2335      	movlt	r3, #53	; 0x35
   d92e0:	2334      	movge	r3, #52	; 0x34
   d92e2:	e020      	b.n	d9326 <strftime+0x7da>
   d92e4:	2301      	movs	r3, #1
   d92e6:	e01e      	b.n	d9326 <strftime+0x7da>
   d92e8:	9b02      	ldr	r3, [sp, #8]
   d92ea:	429c      	cmp	r4, r3
   d92ec:	f080 80d8 	bcs.w	d94a0 <strftime+0x954>
   d92f0:	69ab      	ldr	r3, [r5, #24]
   d92f2:	3330      	adds	r3, #48	; 0x30
   d92f4:	e0c7      	b.n	d9486 <strftime+0x93a>
   d92f6:	69aa      	ldr	r2, [r5, #24]
   d92f8:	b10a      	cbz	r2, d92fe <strftime+0x7b2>
   d92fa:	1e53      	subs	r3, r2, #1
   d92fc:	e000      	b.n	d9300 <strftime+0x7b4>
   d92fe:	2306      	movs	r3, #6
   d9300:	69ea      	ldr	r2, [r5, #28]
   d9302:	3207      	adds	r2, #7
   d9304:	1ad2      	subs	r2, r2, r3
   d9306:	2307      	movs	r3, #7
   d9308:	fb92 f3f3 	sdiv	r3, r2, r3
   d930c:	e00b      	b.n	d9326 <strftime+0x7da>
   d930e:	6968      	ldr	r0, [r5, #20]
   d9310:	2800      	cmp	r0, #0
   d9312:	da03      	bge.n	d931c <strftime+0x7d0>
   d9314:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9318:	f000 fc6e 	bl	d9bf8 <abs>
   d931c:	2364      	movs	r3, #100	; 0x64
   d931e:	fb90 f2f3 	sdiv	r2, r0, r3
   d9322:	fb02 0313 	mls	r3, r2, r3, r0
   d9326:	4a21      	ldr	r2, [pc, #132]	; (d93ac <strftime+0x860>)
   d9328:	e571      	b.n	d8e0e <strftime+0x2c2>
   d932a:	696b      	ldr	r3, [r5, #20]
   d932c:	4a20      	ldr	r2, [pc, #128]	; (d93b0 <strftime+0x864>)
   d932e:	4293      	cmp	r3, r2
   d9330:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   d9334:	da05      	bge.n	d9342 <strftime+0x7f6>
   d9336:	232d      	movs	r3, #45	; 0x2d
   d9338:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d933c:	f1cb 0b00 	rsb	fp, fp, #0
   d9340:	e008      	b.n	d9354 <strftime+0x808>
   d9342:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d9346:	d10d      	bne.n	d9364 <strftime+0x818>
   d9348:	f242 730f 	movw	r3, #9999	; 0x270f
   d934c:	459b      	cmp	fp, r3
   d934e:	d911      	bls.n	d9374 <strftime+0x828>
   d9350:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d9354:	f1b8 0f00 	cmp.w	r8, #0
   d9358:	d001      	beq.n	d935e <strftime+0x812>
   d935a:	f108 38ff 	add.w	r8, r8, #4294967295
   d935e:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   d9362:	e000      	b.n	d9366 <strftime+0x81a>
   d9364:	ab0a      	add	r3, sp, #40	; 0x28
   d9366:	2225      	movs	r2, #37	; 0x25
   d9368:	701a      	strb	r2, [r3, #0]
   d936a:	f1ba 0f00 	cmp.w	sl, #0
   d936e:	d108      	bne.n	d9382 <strftime+0x836>
   d9370:	1c58      	adds	r0, r3, #1
   d9372:	e009      	b.n	d9388 <strftime+0x83c>
   d9374:	f1b8 0f00 	cmp.w	r8, #0
   d9378:	d1f4      	bne.n	d9364 <strftime+0x818>
   d937a:	2325      	movs	r3, #37	; 0x25
   d937c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d9380:	ab0a      	add	r3, sp, #40	; 0x28
   d9382:	2230      	movs	r2, #48	; 0x30
   d9384:	1c98      	adds	r0, r3, #2
   d9386:	705a      	strb	r2, [r3, #1]
   d9388:	490a      	ldr	r1, [pc, #40]	; (d93b4 <strftime+0x868>)
   d938a:	f7ff fb77 	bl	d8a7c <strcpy>
   d938e:	f8cd b000 	str.w	fp, [sp]
   d9392:	4643      	mov	r3, r8
   d9394:	aa0a      	add	r2, sp, #40	; 0x28
   d9396:	1b31      	subs	r1, r6, r4
   d9398:	1938      	adds	r0, r7, r4
   d939a:	e03e      	b.n	d941a <strftime+0x8ce>
   d939c:	2003dca4 	.word	0x2003dca4
   d93a0:	000da61f 	.word	0x000da61f
   d93a4:	000da615 	.word	0x000da615
   d93a8:	000da61a 	.word	0x000da61a
   d93ac:	000da5fb 	.word	0x000da5fb
   d93b0:	fffff894 	.word	0xfffff894
   d93b4:	000da60c 	.word	0x000da60c
   d93b8:	6a2b      	ldr	r3, [r5, #32]
   d93ba:	2b00      	cmp	r3, #0
   d93bc:	db65      	blt.n	d948a <strftime+0x93e>
   d93be:	f000 fa93 	bl	d98e8 <__tz_lock>
   d93c2:	9b06      	ldr	r3, [sp, #24]
   d93c4:	b91b      	cbnz	r3, d93ce <strftime+0x882>
   d93c6:	f000 fa91 	bl	d98ec <_tzset_unlocked>
   d93ca:	2301      	movs	r3, #1
   d93cc:	9306      	str	r3, [sp, #24]
   d93ce:	f000 fc5b 	bl	d9c88 <__gettzinfo>
   d93d2:	6a2b      	ldr	r3, [r5, #32]
   d93d4:	2b00      	cmp	r3, #0
   d93d6:	bfd4      	ite	le
   d93d8:	2300      	movle	r3, #0
   d93da:	2301      	movgt	r3, #1
   d93dc:	221c      	movs	r2, #28
   d93de:	fb02 0003 	mla	r0, r2, r3, r0
   d93e2:	eb07 0a04 	add.w	sl, r7, r4
   d93e6:	6a03      	ldr	r3, [r0, #32]
   d93e8:	f1c3 0800 	rsb	r8, r3, #0
   d93ec:	f000 fa7d 	bl	d98ea <__tz_unlock>
   d93f0:	233c      	movs	r3, #60	; 0x3c
   d93f2:	fb98 f0f3 	sdiv	r0, r8, r3
   d93f6:	9307      	str	r3, [sp, #28]
   d93f8:	f000 fce2 	bl	d9dc0 <labs>
   d93fc:	9b07      	ldr	r3, [sp, #28]
   d93fe:	fb90 f2f3 	sdiv	r2, r0, r3
   d9402:	ebc4 0b06 	rsb	fp, r4, r6
   d9406:	fb02 0013 	mls	r0, r2, r3, r0
   d940a:	4a28      	ldr	r2, [pc, #160]	; (d94ac <strftime+0x960>)
   d940c:	9000      	str	r0, [sp, #0]
   d940e:	4659      	mov	r1, fp
   d9410:	4650      	mov	r0, sl
   d9412:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9416:	fb98 f3f3 	sdiv	r3, r8, r3
   d941a:	f7fc faa3 	bl	d5964 <sniprintf>
   d941e:	e4fa      	b.n	d8e16 <strftime+0x2ca>
   d9420:	4404      	add	r4, r0
   d9422:	42a6      	cmp	r6, r4
   d9424:	d831      	bhi.n	d948a <strftime+0x93e>
   d9426:	e03b      	b.n	d94a0 <strftime+0x954>
   d9428:	6a2b      	ldr	r3, [r5, #32]
   d942a:	2b00      	cmp	r3, #0
   d942c:	db2d      	blt.n	d948a <strftime+0x93e>
   d942e:	f000 fa5b 	bl	d98e8 <__tz_lock>
   d9432:	9b06      	ldr	r3, [sp, #24]
   d9434:	b91b      	cbnz	r3, d943e <strftime+0x8f2>
   d9436:	f000 fa59 	bl	d98ec <_tzset_unlocked>
   d943a:	2301      	movs	r3, #1
   d943c:	9306      	str	r3, [sp, #24]
   d943e:	6a2b      	ldr	r3, [r5, #32]
   d9440:	4a1b      	ldr	r2, [pc, #108]	; (d94b0 <strftime+0x964>)
   d9442:	2b00      	cmp	r3, #0
   d9444:	bfd4      	ite	le
   d9446:	2300      	movle	r3, #0
   d9448:	2301      	movgt	r3, #1
   d944a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d944e:	4640      	mov	r0, r8
   d9450:	f000 f830 	bl	d94b4 <strlen>
   d9454:	f108 38ff 	add.w	r8, r8, #4294967295
   d9458:	193b      	adds	r3, r7, r4
   d945a:	4420      	add	r0, r4
   d945c:	4284      	cmp	r4, r0
   d945e:	d00b      	beq.n	d9478 <strftime+0x92c>
   d9460:	9a02      	ldr	r2, [sp, #8]
   d9462:	4294      	cmp	r4, r2
   d9464:	d205      	bcs.n	d9472 <strftime+0x926>
   d9466:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d946a:	f803 2b01 	strb.w	r2, [r3], #1
   d946e:	3401      	adds	r4, #1
   d9470:	e7f4      	b.n	d945c <strftime+0x910>
   d9472:	f000 fa3a 	bl	d98ea <__tz_unlock>
   d9476:	e013      	b.n	d94a0 <strftime+0x954>
   d9478:	f000 fa37 	bl	d98ea <__tz_unlock>
   d947c:	e005      	b.n	d948a <strftime+0x93e>
   d947e:	9b02      	ldr	r3, [sp, #8]
   d9480:	429c      	cmp	r4, r3
   d9482:	d20d      	bcs.n	d94a0 <strftime+0x954>
   d9484:	2325      	movs	r3, #37	; 0x25
   d9486:	553b      	strb	r3, [r7, r4]
   d9488:	3401      	adds	r4, #1
   d948a:	f899 3000 	ldrb.w	r3, [r9]
   d948e:	b11b      	cbz	r3, d9498 <strftime+0x94c>
   d9490:	f109 0901 	add.w	r9, r9, #1
   d9494:	f7ff bb69 	b.w	d8b6a <strftime+0x1e>
   d9498:	b126      	cbz	r6, d94a4 <strftime+0x958>
   d949a:	2300      	movs	r3, #0
   d949c:	553b      	strb	r3, [r7, r4]
   d949e:	e001      	b.n	d94a4 <strftime+0x958>
   d94a0:	2000      	movs	r0, #0
   d94a2:	e000      	b.n	d94a6 <strftime+0x95a>
   d94a4:	4620      	mov	r0, r4
   d94a6:	b013      	add	sp, #76	; 0x4c
   d94a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d94ac:	000da629 	.word	0x000da629
   d94b0:	2003dd0c 	.word	0x2003dd0c

000d94b4 <strlen>:
   d94b4:	4603      	mov	r3, r0
   d94b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d94ba:	2a00      	cmp	r2, #0
   d94bc:	d1fb      	bne.n	d94b6 <strlen+0x2>
   d94be:	1a18      	subs	r0, r3, r0
   d94c0:	3801      	subs	r0, #1
   d94c2:	4770      	bx	lr

000d94c4 <strncmp>:
   d94c4:	b530      	push	{r4, r5, lr}
   d94c6:	b182      	cbz	r2, d94ea <strncmp+0x26>
   d94c8:	1e45      	subs	r5, r0, #1
   d94ca:	3901      	subs	r1, #1
   d94cc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d94d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d94d4:	42a3      	cmp	r3, r4
   d94d6:	d106      	bne.n	d94e6 <strncmp+0x22>
   d94d8:	43ec      	mvns	r4, r5
   d94da:	4414      	add	r4, r2
   d94dc:	42e0      	cmn	r0, r4
   d94de:	d001      	beq.n	d94e4 <strncmp+0x20>
   d94e0:	2b00      	cmp	r3, #0
   d94e2:	d1f3      	bne.n	d94cc <strncmp+0x8>
   d94e4:	461c      	mov	r4, r3
   d94e6:	1b18      	subs	r0, r3, r4
   d94e8:	bd30      	pop	{r4, r5, pc}
   d94ea:	4610      	mov	r0, r2
   d94ec:	bd30      	pop	{r4, r5, pc}

000d94ee <strncpy>:
   d94ee:	b510      	push	{r4, lr}
   d94f0:	4603      	mov	r3, r0
   d94f2:	b142      	cbz	r2, d9506 <strncpy+0x18>
   d94f4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d94f8:	f803 4b01 	strb.w	r4, [r3], #1
   d94fc:	3a01      	subs	r2, #1
   d94fe:	2c00      	cmp	r4, #0
   d9500:	d1f7      	bne.n	d94f2 <strncpy+0x4>
   d9502:	441a      	add	r2, r3
   d9504:	e000      	b.n	d9508 <strncpy+0x1a>
   d9506:	bd10      	pop	{r4, pc}
   d9508:	4293      	cmp	r3, r2
   d950a:	d002      	beq.n	d9512 <strncpy+0x24>
   d950c:	f803 4b01 	strb.w	r4, [r3], #1
   d9510:	e7fa      	b.n	d9508 <strncpy+0x1a>
   d9512:	bd10      	pop	{r4, pc}

000d9514 <strstr>:
   d9514:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9516:	7803      	ldrb	r3, [r0, #0]
   d9518:	b963      	cbnz	r3, d9534 <strstr+0x20>
   d951a:	780b      	ldrb	r3, [r1, #0]
   d951c:	2b00      	cmp	r3, #0
   d951e:	bf18      	it	ne
   d9520:	2000      	movne	r0, #0
   d9522:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9524:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9528:	b162      	cbz	r2, d9544 <strstr+0x30>
   d952a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d952e:	4297      	cmp	r7, r2
   d9530:	4630      	mov	r0, r6
   d9532:	d0f7      	beq.n	d9524 <strstr+0x10>
   d9534:	4603      	mov	r3, r0
   d9536:	1c46      	adds	r6, r0, #1
   d9538:	7800      	ldrb	r0, [r0, #0]
   d953a:	b110      	cbz	r0, d9542 <strstr+0x2e>
   d953c:	1e4d      	subs	r5, r1, #1
   d953e:	1e5c      	subs	r4, r3, #1
   d9540:	e7f0      	b.n	d9524 <strstr+0x10>
   d9542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9544:	4618      	mov	r0, r3
   d9546:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9548 <_strtol_r>:
   d9548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d954c:	4680      	mov	r8, r0
   d954e:	4840      	ldr	r0, [pc, #256]	; (d9650 <_strtol_r+0x108>)
   d9550:	f8d0 9000 	ldr.w	r9, [r0]
   d9554:	460f      	mov	r7, r1
   d9556:	463d      	mov	r5, r7
   d9558:	f815 4b01 	ldrb.w	r4, [r5], #1
   d955c:	eb09 0004 	add.w	r0, r9, r4
   d9560:	7840      	ldrb	r0, [r0, #1]
   d9562:	f000 0008 	and.w	r0, r0, #8
   d9566:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d956a:	b108      	cbz	r0, d9570 <_strtol_r+0x28>
   d956c:	462f      	mov	r7, r5
   d956e:	e7f2      	b.n	d9556 <_strtol_r+0xe>
   d9570:	2c2d      	cmp	r4, #45	; 0x2d
   d9572:	d103      	bne.n	d957c <_strtol_r+0x34>
   d9574:	1cbd      	adds	r5, r7, #2
   d9576:	787c      	ldrb	r4, [r7, #1]
   d9578:	2601      	movs	r6, #1
   d957a:	e003      	b.n	d9584 <_strtol_r+0x3c>
   d957c:	2c2b      	cmp	r4, #43	; 0x2b
   d957e:	bf04      	itt	eq
   d9580:	787c      	ldrbeq	r4, [r7, #1]
   d9582:	1cbd      	addeq	r5, r7, #2
   d9584:	b113      	cbz	r3, d958c <_strtol_r+0x44>
   d9586:	2b10      	cmp	r3, #16
   d9588:	d10a      	bne.n	d95a0 <_strtol_r+0x58>
   d958a:	e05b      	b.n	d9644 <_strtol_r+0xfc>
   d958c:	2c30      	cmp	r4, #48	; 0x30
   d958e:	d157      	bne.n	d9640 <_strtol_r+0xf8>
   d9590:	7828      	ldrb	r0, [r5, #0]
   d9592:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9596:	2858      	cmp	r0, #88	; 0x58
   d9598:	d14d      	bne.n	d9636 <_strtol_r+0xee>
   d959a:	786c      	ldrb	r4, [r5, #1]
   d959c:	2310      	movs	r3, #16
   d959e:	3502      	adds	r5, #2
   d95a0:	2e00      	cmp	r6, #0
   d95a2:	bf14      	ite	ne
   d95a4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d95a8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d95ac:	2700      	movs	r7, #0
   d95ae:	fbbc faf3 	udiv	sl, ip, r3
   d95b2:	4638      	mov	r0, r7
   d95b4:	fb03 cc1a 	mls	ip, r3, sl, ip
   d95b8:	eb09 0e04 	add.w	lr, r9, r4
   d95bc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d95c0:	f01e 0f04 	tst.w	lr, #4
   d95c4:	d001      	beq.n	d95ca <_strtol_r+0x82>
   d95c6:	3c30      	subs	r4, #48	; 0x30
   d95c8:	e00b      	b.n	d95e2 <_strtol_r+0x9a>
   d95ca:	f01e 0e03 	ands.w	lr, lr, #3
   d95ce:	d01b      	beq.n	d9608 <_strtol_r+0xc0>
   d95d0:	f1be 0f01 	cmp.w	lr, #1
   d95d4:	bf0c      	ite	eq
   d95d6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d95da:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d95de:	ebce 0404 	rsb	r4, lr, r4
   d95e2:	42a3      	cmp	r3, r4
   d95e4:	dd10      	ble.n	d9608 <_strtol_r+0xc0>
   d95e6:	f1b7 3fff 	cmp.w	r7, #4294967295
   d95ea:	d00a      	beq.n	d9602 <_strtol_r+0xba>
   d95ec:	4550      	cmp	r0, sl
   d95ee:	d806      	bhi.n	d95fe <_strtol_r+0xb6>
   d95f0:	d101      	bne.n	d95f6 <_strtol_r+0xae>
   d95f2:	4564      	cmp	r4, ip
   d95f4:	dc03      	bgt.n	d95fe <_strtol_r+0xb6>
   d95f6:	fb03 4000 	mla	r0, r3, r0, r4
   d95fa:	2701      	movs	r7, #1
   d95fc:	e001      	b.n	d9602 <_strtol_r+0xba>
   d95fe:	f04f 37ff 	mov.w	r7, #4294967295
   d9602:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9606:	e7d7      	b.n	d95b8 <_strtol_r+0x70>
   d9608:	1c7b      	adds	r3, r7, #1
   d960a:	d10c      	bne.n	d9626 <_strtol_r+0xde>
   d960c:	2e00      	cmp	r6, #0
   d960e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9612:	bf14      	ite	ne
   d9614:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9618:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d961c:	f8c8 3000 	str.w	r3, [r8]
   d9620:	b92a      	cbnz	r2, d962e <_strtol_r+0xe6>
   d9622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9626:	b106      	cbz	r6, d962a <_strtol_r+0xe2>
   d9628:	4240      	negs	r0, r0
   d962a:	b172      	cbz	r2, d964a <_strtol_r+0x102>
   d962c:	b107      	cbz	r7, d9630 <_strtol_r+0xe8>
   d962e:	1e69      	subs	r1, r5, #1
   d9630:	6011      	str	r1, [r2, #0]
   d9632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9636:	2430      	movs	r4, #48	; 0x30
   d9638:	2b00      	cmp	r3, #0
   d963a:	d1b1      	bne.n	d95a0 <_strtol_r+0x58>
   d963c:	2308      	movs	r3, #8
   d963e:	e7af      	b.n	d95a0 <_strtol_r+0x58>
   d9640:	230a      	movs	r3, #10
   d9642:	e7ad      	b.n	d95a0 <_strtol_r+0x58>
   d9644:	2c30      	cmp	r4, #48	; 0x30
   d9646:	d0a3      	beq.n	d9590 <_strtol_r+0x48>
   d9648:	e7aa      	b.n	d95a0 <_strtol_r+0x58>
   d964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d964e:	bf00      	nop
   d9650:	2003dca4 	.word	0x2003dca4

000d9654 <strtol>:
   d9654:	4613      	mov	r3, r2
   d9656:	460a      	mov	r2, r1
   d9658:	4601      	mov	r1, r0
   d965a:	4802      	ldr	r0, [pc, #8]	; (d9664 <strtol+0x10>)
   d965c:	6800      	ldr	r0, [r0, #0]
   d965e:	f7ff bf73 	b.w	d9548 <_strtol_r>
   d9662:	bf00      	nop
   d9664:	2003dd08 	.word	0x2003dd08

000d9668 <_strtoul_r>:
   d9668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d966c:	4680      	mov	r8, r0
   d966e:	483c      	ldr	r0, [pc, #240]	; (d9760 <_strtoul_r+0xf8>)
   d9670:	f8d0 9000 	ldr.w	r9, [r0]
   d9674:	460e      	mov	r6, r1
   d9676:	4635      	mov	r5, r6
   d9678:	f815 4b01 	ldrb.w	r4, [r5], #1
   d967c:	eb09 0004 	add.w	r0, r9, r4
   d9680:	7840      	ldrb	r0, [r0, #1]
   d9682:	f000 0008 	and.w	r0, r0, #8
   d9686:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d968a:	b108      	cbz	r0, d9690 <_strtoul_r+0x28>
   d968c:	462e      	mov	r6, r5
   d968e:	e7f2      	b.n	d9676 <_strtoul_r+0xe>
   d9690:	2c2d      	cmp	r4, #45	; 0x2d
   d9692:	d103      	bne.n	d969c <_strtoul_r+0x34>
   d9694:	1cb5      	adds	r5, r6, #2
   d9696:	7874      	ldrb	r4, [r6, #1]
   d9698:	2701      	movs	r7, #1
   d969a:	e003      	b.n	d96a4 <_strtoul_r+0x3c>
   d969c:	2c2b      	cmp	r4, #43	; 0x2b
   d969e:	bf04      	itt	eq
   d96a0:	7874      	ldrbeq	r4, [r6, #1]
   d96a2:	1cb5      	addeq	r5, r6, #2
   d96a4:	b113      	cbz	r3, d96ac <_strtoul_r+0x44>
   d96a6:	2b10      	cmp	r3, #16
   d96a8:	d10a      	bne.n	d96c0 <_strtoul_r+0x58>
   d96aa:	e053      	b.n	d9754 <_strtoul_r+0xec>
   d96ac:	2c30      	cmp	r4, #48	; 0x30
   d96ae:	d14f      	bne.n	d9750 <_strtoul_r+0xe8>
   d96b0:	7828      	ldrb	r0, [r5, #0]
   d96b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d96b6:	2858      	cmp	r0, #88	; 0x58
   d96b8:	d145      	bne.n	d9746 <_strtoul_r+0xde>
   d96ba:	786c      	ldrb	r4, [r5, #1]
   d96bc:	2310      	movs	r3, #16
   d96be:	3502      	adds	r5, #2
   d96c0:	f04f 3cff 	mov.w	ip, #4294967295
   d96c4:	2600      	movs	r6, #0
   d96c6:	fbbc fcf3 	udiv	ip, ip, r3
   d96ca:	fb03 fa0c 	mul.w	sl, r3, ip
   d96ce:	ea6f 0a0a 	mvn.w	sl, sl
   d96d2:	4630      	mov	r0, r6
   d96d4:	eb09 0e04 	add.w	lr, r9, r4
   d96d8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d96dc:	f01e 0f04 	tst.w	lr, #4
   d96e0:	d001      	beq.n	d96e6 <_strtoul_r+0x7e>
   d96e2:	3c30      	subs	r4, #48	; 0x30
   d96e4:	e00b      	b.n	d96fe <_strtoul_r+0x96>
   d96e6:	f01e 0e03 	ands.w	lr, lr, #3
   d96ea:	d01a      	beq.n	d9722 <_strtoul_r+0xba>
   d96ec:	f1be 0f01 	cmp.w	lr, #1
   d96f0:	bf0c      	ite	eq
   d96f2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d96f6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d96fa:	ebce 0404 	rsb	r4, lr, r4
   d96fe:	42a3      	cmp	r3, r4
   d9700:	dd0f      	ble.n	d9722 <_strtoul_r+0xba>
   d9702:	2e00      	cmp	r6, #0
   d9704:	db08      	blt.n	d9718 <_strtoul_r+0xb0>
   d9706:	4560      	cmp	r0, ip
   d9708:	d806      	bhi.n	d9718 <_strtoul_r+0xb0>
   d970a:	d101      	bne.n	d9710 <_strtoul_r+0xa8>
   d970c:	4554      	cmp	r4, sl
   d970e:	dc03      	bgt.n	d9718 <_strtoul_r+0xb0>
   d9710:	fb03 4000 	mla	r0, r3, r0, r4
   d9714:	2601      	movs	r6, #1
   d9716:	e001      	b.n	d971c <_strtoul_r+0xb4>
   d9718:	f04f 36ff 	mov.w	r6, #4294967295
   d971c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9720:	e7d8      	b.n	d96d4 <_strtoul_r+0x6c>
   d9722:	2e00      	cmp	r6, #0
   d9724:	da07      	bge.n	d9736 <_strtoul_r+0xce>
   d9726:	2322      	movs	r3, #34	; 0x22
   d9728:	f8c8 3000 	str.w	r3, [r8]
   d972c:	f04f 30ff 	mov.w	r0, #4294967295
   d9730:	b92a      	cbnz	r2, d973e <_strtoul_r+0xd6>
   d9732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9736:	b107      	cbz	r7, d973a <_strtoul_r+0xd2>
   d9738:	4240      	negs	r0, r0
   d973a:	b172      	cbz	r2, d975a <_strtoul_r+0xf2>
   d973c:	b106      	cbz	r6, d9740 <_strtoul_r+0xd8>
   d973e:	1e69      	subs	r1, r5, #1
   d9740:	6011      	str	r1, [r2, #0]
   d9742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9746:	2430      	movs	r4, #48	; 0x30
   d9748:	2b00      	cmp	r3, #0
   d974a:	d1b9      	bne.n	d96c0 <_strtoul_r+0x58>
   d974c:	2308      	movs	r3, #8
   d974e:	e7b7      	b.n	d96c0 <_strtoul_r+0x58>
   d9750:	230a      	movs	r3, #10
   d9752:	e7b5      	b.n	d96c0 <_strtoul_r+0x58>
   d9754:	2c30      	cmp	r4, #48	; 0x30
   d9756:	d0ab      	beq.n	d96b0 <_strtoul_r+0x48>
   d9758:	e7b2      	b.n	d96c0 <_strtoul_r+0x58>
   d975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d975e:	bf00      	nop
   d9760:	2003dca4 	.word	0x2003dca4

000d9764 <strtoul>:
   d9764:	4613      	mov	r3, r2
   d9766:	460a      	mov	r2, r1
   d9768:	4601      	mov	r1, r0
   d976a:	4802      	ldr	r0, [pc, #8]	; (d9774 <strtoul+0x10>)
   d976c:	6800      	ldr	r0, [r0, #0]
   d976e:	f7ff bf7b 	b.w	d9668 <_strtoul_r>
   d9772:	bf00      	nop
   d9774:	2003dd08 	.word	0x2003dd08

000d9778 <__get_current_time_locale>:
   d9778:	4b04      	ldr	r3, [pc, #16]	; (d978c <__get_current_time_locale+0x14>)
   d977a:	4a05      	ldr	r2, [pc, #20]	; (d9790 <__get_current_time_locale+0x18>)
   d977c:	6818      	ldr	r0, [r3, #0]
   d977e:	4b05      	ldr	r3, [pc, #20]	; (d9794 <__get_current_time_locale+0x1c>)
   d9780:	2800      	cmp	r0, #0
   d9782:	bf14      	ite	ne
   d9784:	4610      	movne	r0, r2
   d9786:	4618      	moveq	r0, r3
   d9788:	4770      	bx	lr
   d978a:	bf00      	nop
   d978c:	2003e6c8 	.word	0x2003e6c8
   d9790:	2003e6cc 	.word	0x2003e6cc
   d9794:	000da768 	.word	0x000da768

000d9798 <__tzcalc_limits>:
   d9798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d979c:	4604      	mov	r4, r0
   d979e:	f000 fa73 	bl	d9c88 <__gettzinfo>
   d97a2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d97a6:	429c      	cmp	r4, r3
   d97a8:	f340 8096 	ble.w	d98d8 <__tzcalc_limits+0x140>
   d97ac:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d97b0:	18e3      	adds	r3, r4, r3
   d97b2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d97b6:	109b      	asrs	r3, r3, #2
   d97b8:	f240 156d 	movw	r5, #365	; 0x16d
   d97bc:	fb05 3502 	mla	r5, r5, r2, r3
   d97c0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d97c4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d97c8:	fb92 f3f3 	sdiv	r3, r2, r3
   d97cc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d97d0:	442b      	add	r3, r5
   d97d2:	18a5      	adds	r5, r4, r2
   d97d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d97d8:	fb95 f5f2 	sdiv	r5, r5, r2
   d97dc:	441d      	add	r5, r3
   d97de:	2364      	movs	r3, #100	; 0x64
   d97e0:	fb94 f7f2 	sdiv	r7, r4, r2
   d97e4:	fb94 f6f3 	sdiv	r6, r4, r3
   d97e8:	fb02 4717 	mls	r7, r2, r7, r4
   d97ec:	fb03 4616 	mls	r6, r3, r6, r4
   d97f0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d97f4:	fab7 fe87 	clz	lr, r7
   d97f8:	9301      	str	r3, [sp, #4]
   d97fa:	f004 0303 	and.w	r3, r4, #3
   d97fe:	6044      	str	r4, [r0, #4]
   d9800:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9804:	4601      	mov	r1, r0
   d9806:	9300      	str	r3, [sp, #0]
   d9808:	f04f 0c07 	mov.w	ip, #7
   d980c:	7a0b      	ldrb	r3, [r1, #8]
   d980e:	2b4a      	cmp	r3, #74	; 0x4a
   d9810:	d10e      	bne.n	d9830 <__tzcalc_limits+0x98>
   d9812:	694b      	ldr	r3, [r1, #20]
   d9814:	9a00      	ldr	r2, [sp, #0]
   d9816:	18ec      	adds	r4, r5, r3
   d9818:	b902      	cbnz	r2, d981c <__tzcalc_limits+0x84>
   d981a:	b906      	cbnz	r6, d981e <__tzcalc_limits+0x86>
   d981c:	b927      	cbnz	r7, d9828 <__tzcalc_limits+0x90>
   d981e:	2b3b      	cmp	r3, #59	; 0x3b
   d9820:	bfd4      	ite	le
   d9822:	2300      	movle	r3, #0
   d9824:	2301      	movgt	r3, #1
   d9826:	e000      	b.n	d982a <__tzcalc_limits+0x92>
   d9828:	2300      	movs	r3, #0
   d982a:	4423      	add	r3, r4
   d982c:	3b01      	subs	r3, #1
   d982e:	e03f      	b.n	d98b0 <__tzcalc_limits+0x118>
   d9830:	2b44      	cmp	r3, #68	; 0x44
   d9832:	d102      	bne.n	d983a <__tzcalc_limits+0xa2>
   d9834:	694b      	ldr	r3, [r1, #20]
   d9836:	442b      	add	r3, r5
   d9838:	e03a      	b.n	d98b0 <__tzcalc_limits+0x118>
   d983a:	9b00      	ldr	r3, [sp, #0]
   d983c:	b92b      	cbnz	r3, d984a <__tzcalc_limits+0xb2>
   d983e:	2e00      	cmp	r6, #0
   d9840:	bf0c      	ite	eq
   d9842:	46f0      	moveq	r8, lr
   d9844:	f04f 0801 	movne.w	r8, #1
   d9848:	e000      	b.n	d984c <__tzcalc_limits+0xb4>
   d984a:	46f0      	mov	r8, lr
   d984c:	4b24      	ldr	r3, [pc, #144]	; (d98e0 <__tzcalc_limits+0x148>)
   d984e:	68cc      	ldr	r4, [r1, #12]
   d9850:	2230      	movs	r2, #48	; 0x30
   d9852:	fb02 3808 	mla	r8, r2, r8, r3
   d9856:	f1a8 0a04 	sub.w	sl, r8, #4
   d985a:	46a9      	mov	r9, r5
   d985c:	2301      	movs	r3, #1
   d985e:	42a3      	cmp	r3, r4
   d9860:	da04      	bge.n	d986c <__tzcalc_limits+0xd4>
   d9862:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d9866:	3301      	adds	r3, #1
   d9868:	44d9      	add	r9, fp
   d986a:	e7f8      	b.n	d985e <__tzcalc_limits+0xc6>
   d986c:	f109 0304 	add.w	r3, r9, #4
   d9870:	fb93 fbfc 	sdiv	fp, r3, ip
   d9874:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d9878:	2c01      	cmp	r4, #1
   d987a:	ebca 0a03 	rsb	sl, sl, r3
   d987e:	694b      	ldr	r3, [r1, #20]
   d9880:	bfb8      	it	lt
   d9882:	2401      	movlt	r4, #1
   d9884:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d9888:	ebb3 0a0a 	subs.w	sl, r3, sl
   d988c:	690b      	ldr	r3, [r1, #16]
   d988e:	f104 34ff 	add.w	r4, r4, #4294967295
   d9892:	f103 33ff 	add.w	r3, r3, #4294967295
   d9896:	bf48      	it	mi
   d9898:	f10a 0a07 	addmi.w	sl, sl, #7
   d989c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d98a0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d98a4:	4453      	add	r3, sl
   d98a6:	42a3      	cmp	r3, r4
   d98a8:	db01      	blt.n	d98ae <__tzcalc_limits+0x116>
   d98aa:	3b07      	subs	r3, #7
   d98ac:	e7fb      	b.n	d98a6 <__tzcalc_limits+0x10e>
   d98ae:	444b      	add	r3, r9
   d98b0:	698c      	ldr	r4, [r1, #24]
   d98b2:	4a0c      	ldr	r2, [pc, #48]	; (d98e4 <__tzcalc_limits+0x14c>)
   d98b4:	fb02 4303 	mla	r3, r2, r3, r4
   d98b8:	6a0c      	ldr	r4, [r1, #32]
   d98ba:	4423      	add	r3, r4
   d98bc:	f841 3f1c 	str.w	r3, [r1, #28]!
   d98c0:	9b01      	ldr	r3, [sp, #4]
   d98c2:	4299      	cmp	r1, r3
   d98c4:	d1a2      	bne.n	d980c <__tzcalc_limits+0x74>
   d98c6:	69c3      	ldr	r3, [r0, #28]
   d98c8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d98ca:	4293      	cmp	r3, r2
   d98cc:	bfac      	ite	ge
   d98ce:	2300      	movge	r3, #0
   d98d0:	2301      	movlt	r3, #1
   d98d2:	6003      	str	r3, [r0, #0]
   d98d4:	2001      	movs	r0, #1
   d98d6:	e000      	b.n	d98da <__tzcalc_limits+0x142>
   d98d8:	2000      	movs	r0, #0
   d98da:	b003      	add	sp, #12
   d98dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d98e0:	000da57c 	.word	0x000da57c
   d98e4:	00015180 	.word	0x00015180

000d98e8 <__tz_lock>:
   d98e8:	4770      	bx	lr

000d98ea <__tz_unlock>:
   d98ea:	4770      	bx	lr

000d98ec <_tzset_unlocked>:
   d98ec:	4b01      	ldr	r3, [pc, #4]	; (d98f4 <_tzset_unlocked+0x8>)
   d98ee:	6818      	ldr	r0, [r3, #0]
   d98f0:	f000 b802 	b.w	d98f8 <_tzset_unlocked_r>
   d98f4:	2003dd08 	.word	0x2003dd08

000d98f8 <_tzset_unlocked_r>:
   d98f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d98fc:	b08d      	sub	sp, #52	; 0x34
   d98fe:	4607      	mov	r7, r0
   d9900:	f000 f9c2 	bl	d9c88 <__gettzinfo>
   d9904:	49b0      	ldr	r1, [pc, #704]	; (d9bc8 <_tzset_unlocked_r+0x2d0>)
   d9906:	4eb1      	ldr	r6, [pc, #708]	; (d9bcc <_tzset_unlocked_r+0x2d4>)
   d9908:	4604      	mov	r4, r0
   d990a:	4638      	mov	r0, r7
   d990c:	f000 f9b4 	bl	d9c78 <_getenv_r>
   d9910:	4605      	mov	r5, r0
   d9912:	b960      	cbnz	r0, d992e <_tzset_unlocked_r+0x36>
   d9914:	4bae      	ldr	r3, [pc, #696]	; (d9bd0 <_tzset_unlocked_r+0x2d8>)
   d9916:	4aaf      	ldr	r2, [pc, #700]	; (d9bd4 <_tzset_unlocked_r+0x2dc>)
   d9918:	6018      	str	r0, [r3, #0]
   d991a:	4baf      	ldr	r3, [pc, #700]	; (d9bd8 <_tzset_unlocked_r+0x2e0>)
   d991c:	6018      	str	r0, [r3, #0]
   d991e:	4baf      	ldr	r3, [pc, #700]	; (d9bdc <_tzset_unlocked_r+0x2e4>)
   d9920:	6830      	ldr	r0, [r6, #0]
   d9922:	601a      	str	r2, [r3, #0]
   d9924:	605a      	str	r2, [r3, #4]
   d9926:	f7fb fff5 	bl	d5914 <free>
   d992a:	6035      	str	r5, [r6, #0]
   d992c:	e148      	b.n	d9bc0 <_tzset_unlocked_r+0x2c8>
   d992e:	6831      	ldr	r1, [r6, #0]
   d9930:	b979      	cbnz	r1, d9952 <_tzset_unlocked_r+0x5a>
   d9932:	6830      	ldr	r0, [r6, #0]
   d9934:	f7fb ffee 	bl	d5914 <free>
   d9938:	4628      	mov	r0, r5
   d993a:	f7ff fdbb 	bl	d94b4 <strlen>
   d993e:	1c41      	adds	r1, r0, #1
   d9940:	4638      	mov	r0, r7
   d9942:	f7fc f817 	bl	d5974 <_malloc_r>
   d9946:	6030      	str	r0, [r6, #0]
   d9948:	b148      	cbz	r0, d995e <_tzset_unlocked_r+0x66>
   d994a:	4629      	mov	r1, r5
   d994c:	f7ff f896 	bl	d8a7c <strcpy>
   d9950:	e005      	b.n	d995e <_tzset_unlocked_r+0x66>
   d9952:	f7ff f889 	bl	d8a68 <strcmp>
   d9956:	2800      	cmp	r0, #0
   d9958:	f000 8132 	beq.w	d9bc0 <_tzset_unlocked_r+0x2c8>
   d995c:	e7e9      	b.n	d9932 <_tzset_unlocked_r+0x3a>
   d995e:	782b      	ldrb	r3, [r5, #0]
   d9960:	4a9f      	ldr	r2, [pc, #636]	; (d9be0 <_tzset_unlocked_r+0x2e8>)
   d9962:	49a0      	ldr	r1, [pc, #640]	; (d9be4 <_tzset_unlocked_r+0x2ec>)
   d9964:	2b3a      	cmp	r3, #58	; 0x3a
   d9966:	bf08      	it	eq
   d9968:	3501      	addeq	r5, #1
   d996a:	ae0a      	add	r6, sp, #40	; 0x28
   d996c:	4633      	mov	r3, r6
   d996e:	4628      	mov	r0, r5
   d9970:	f7fb ffe8 	bl	d5944 <siscanf>
   d9974:	2800      	cmp	r0, #0
   d9976:	f340 8123 	ble.w	d9bc0 <_tzset_unlocked_r+0x2c8>
   d997a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d997c:	18ef      	adds	r7, r5, r3
   d997e:	5ceb      	ldrb	r3, [r5, r3]
   d9980:	2b2d      	cmp	r3, #45	; 0x2d
   d9982:	d103      	bne.n	d998c <_tzset_unlocked_r+0x94>
   d9984:	3701      	adds	r7, #1
   d9986:	f04f 35ff 	mov.w	r5, #4294967295
   d998a:	e003      	b.n	d9994 <_tzset_unlocked_r+0x9c>
   d998c:	2b2b      	cmp	r3, #43	; 0x2b
   d998e:	bf08      	it	eq
   d9990:	3701      	addeq	r7, #1
   d9992:	2501      	movs	r5, #1
   d9994:	f10d 0a20 	add.w	sl, sp, #32
   d9998:	f10d 0b1e 	add.w	fp, sp, #30
   d999c:	f04f 0800 	mov.w	r8, #0
   d99a0:	9603      	str	r6, [sp, #12]
   d99a2:	f8cd a008 	str.w	sl, [sp, #8]
   d99a6:	9601      	str	r6, [sp, #4]
   d99a8:	f8cd b000 	str.w	fp, [sp]
   d99ac:	4633      	mov	r3, r6
   d99ae:	aa07      	add	r2, sp, #28
   d99b0:	498d      	ldr	r1, [pc, #564]	; (d9be8 <_tzset_unlocked_r+0x2f0>)
   d99b2:	f8ad 801e 	strh.w	r8, [sp, #30]
   d99b6:	4638      	mov	r0, r7
   d99b8:	f8ad 8020 	strh.w	r8, [sp, #32]
   d99bc:	f7fb ffc2 	bl	d5944 <siscanf>
   d99c0:	4540      	cmp	r0, r8
   d99c2:	f340 80fd 	ble.w	d9bc0 <_tzset_unlocked_r+0x2c8>
   d99c6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d99ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d99ce:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9bf4 <_tzset_unlocked_r+0x2fc>
   d99d2:	213c      	movs	r1, #60	; 0x3c
   d99d4:	fb01 3302 	mla	r3, r1, r2, r3
   d99d8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d99dc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d99e0:	fb01 3302 	mla	r3, r1, r2, r3
   d99e4:	435d      	muls	r5, r3
   d99e6:	6225      	str	r5, [r4, #32]
   d99e8:	4d7c      	ldr	r5, [pc, #496]	; (d9bdc <_tzset_unlocked_r+0x2e4>)
   d99ea:	4b7d      	ldr	r3, [pc, #500]	; (d9be0 <_tzset_unlocked_r+0x2e8>)
   d99ec:	602b      	str	r3, [r5, #0]
   d99ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d99f0:	497c      	ldr	r1, [pc, #496]	; (d9be4 <_tzset_unlocked_r+0x2ec>)
   d99f2:	441f      	add	r7, r3
   d99f4:	464a      	mov	r2, r9
   d99f6:	4633      	mov	r3, r6
   d99f8:	4638      	mov	r0, r7
   d99fa:	f7fb ffa3 	bl	d5944 <siscanf>
   d99fe:	4540      	cmp	r0, r8
   d9a00:	dc08      	bgt.n	d9a14 <_tzset_unlocked_r+0x11c>
   d9a02:	682b      	ldr	r3, [r5, #0]
   d9a04:	606b      	str	r3, [r5, #4]
   d9a06:	4b72      	ldr	r3, [pc, #456]	; (d9bd0 <_tzset_unlocked_r+0x2d8>)
   d9a08:	6a22      	ldr	r2, [r4, #32]
   d9a0a:	601a      	str	r2, [r3, #0]
   d9a0c:	4b72      	ldr	r3, [pc, #456]	; (d9bd8 <_tzset_unlocked_r+0x2e0>)
   d9a0e:	f8c3 8000 	str.w	r8, [r3]
   d9a12:	e0d5      	b.n	d9bc0 <_tzset_unlocked_r+0x2c8>
   d9a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9a16:	f8c5 9004 	str.w	r9, [r5, #4]
   d9a1a:	18fd      	adds	r5, r7, r3
   d9a1c:	5cfb      	ldrb	r3, [r7, r3]
   d9a1e:	2b2d      	cmp	r3, #45	; 0x2d
   d9a20:	d103      	bne.n	d9a2a <_tzset_unlocked_r+0x132>
   d9a22:	3501      	adds	r5, #1
   d9a24:	f04f 37ff 	mov.w	r7, #4294967295
   d9a28:	e003      	b.n	d9a32 <_tzset_unlocked_r+0x13a>
   d9a2a:	2b2b      	cmp	r3, #43	; 0x2b
   d9a2c:	bf08      	it	eq
   d9a2e:	3501      	addeq	r5, #1
   d9a30:	2701      	movs	r7, #1
   d9a32:	2300      	movs	r3, #0
   d9a34:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9a38:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9a3c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9a40:	930a      	str	r3, [sp, #40]	; 0x28
   d9a42:	9603      	str	r6, [sp, #12]
   d9a44:	f8cd a008 	str.w	sl, [sp, #8]
   d9a48:	9601      	str	r6, [sp, #4]
   d9a4a:	f8cd b000 	str.w	fp, [sp]
   d9a4e:	4633      	mov	r3, r6
   d9a50:	aa07      	add	r2, sp, #28
   d9a52:	4965      	ldr	r1, [pc, #404]	; (d9be8 <_tzset_unlocked_r+0x2f0>)
   d9a54:	4628      	mov	r0, r5
   d9a56:	f7fb ff75 	bl	d5944 <siscanf>
   d9a5a:	2800      	cmp	r0, #0
   d9a5c:	dc04      	bgt.n	d9a68 <_tzset_unlocked_r+0x170>
   d9a5e:	6a23      	ldr	r3, [r4, #32]
   d9a60:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d9a64:	63e3      	str	r3, [r4, #60]	; 0x3c
   d9a66:	e00e      	b.n	d9a86 <_tzset_unlocked_r+0x18e>
   d9a68:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9a6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9a70:	213c      	movs	r1, #60	; 0x3c
   d9a72:	fb01 3302 	mla	r3, r1, r2, r3
   d9a76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9a7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9a7e:	fb01 3302 	mla	r3, r1, r2, r3
   d9a82:	435f      	muls	r7, r3
   d9a84:	63e7      	str	r7, [r4, #60]	; 0x3c
   d9a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9a88:	4627      	mov	r7, r4
   d9a8a:	441d      	add	r5, r3
   d9a8c:	f04f 0900 	mov.w	r9, #0
   d9a90:	782b      	ldrb	r3, [r5, #0]
   d9a92:	2b2c      	cmp	r3, #44	; 0x2c
   d9a94:	bf08      	it	eq
   d9a96:	3501      	addeq	r5, #1
   d9a98:	f895 8000 	ldrb.w	r8, [r5]
   d9a9c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9aa0:	d126      	bne.n	d9af0 <_tzset_unlocked_r+0x1f8>
   d9aa2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d9aa6:	9302      	str	r3, [sp, #8]
   d9aa8:	ab09      	add	r3, sp, #36	; 0x24
   d9aaa:	9300      	str	r3, [sp, #0]
   d9aac:	9603      	str	r6, [sp, #12]
   d9aae:	9601      	str	r6, [sp, #4]
   d9ab0:	4633      	mov	r3, r6
   d9ab2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d9ab6:	494d      	ldr	r1, [pc, #308]	; (d9bec <_tzset_unlocked_r+0x2f4>)
   d9ab8:	4628      	mov	r0, r5
   d9aba:	f7fb ff43 	bl	d5944 <siscanf>
   d9abe:	2803      	cmp	r0, #3
   d9ac0:	d17e      	bne.n	d9bc0 <_tzset_unlocked_r+0x2c8>
   d9ac2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d9ac6:	1e4b      	subs	r3, r1, #1
   d9ac8:	2b0b      	cmp	r3, #11
   d9aca:	d879      	bhi.n	d9bc0 <_tzset_unlocked_r+0x2c8>
   d9acc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9ad0:	1e53      	subs	r3, r2, #1
   d9ad2:	2b04      	cmp	r3, #4
   d9ad4:	d874      	bhi.n	d9bc0 <_tzset_unlocked_r+0x2c8>
   d9ad6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9ada:	2b06      	cmp	r3, #6
   d9adc:	d870      	bhi.n	d9bc0 <_tzset_unlocked_r+0x2c8>
   d9ade:	f887 8008 	strb.w	r8, [r7, #8]
   d9ae2:	60f9      	str	r1, [r7, #12]
   d9ae4:	613a      	str	r2, [r7, #16]
   d9ae6:	617b      	str	r3, [r7, #20]
   d9ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9aea:	eb05 0803 	add.w	r8, r5, r3
   d9aee:	e02a      	b.n	d9b46 <_tzset_unlocked_r+0x24e>
   d9af0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9af4:	bf06      	itte	eq
   d9af6:	3501      	addeq	r5, #1
   d9af8:	4643      	moveq	r3, r8
   d9afa:	2344      	movne	r3, #68	; 0x44
   d9afc:	220a      	movs	r2, #10
   d9afe:	a90b      	add	r1, sp, #44	; 0x2c
   d9b00:	4628      	mov	r0, r5
   d9b02:	9305      	str	r3, [sp, #20]
   d9b04:	f7ff fe2e 	bl	d9764 <strtoul>
   d9b08:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9b0c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9b10:	4545      	cmp	r5, r8
   d9b12:	9b05      	ldr	r3, [sp, #20]
   d9b14:	d114      	bne.n	d9b40 <_tzset_unlocked_r+0x248>
   d9b16:	234d      	movs	r3, #77	; 0x4d
   d9b18:	f1b9 0f00 	cmp.w	r9, #0
   d9b1c:	d107      	bne.n	d9b2e <_tzset_unlocked_r+0x236>
   d9b1e:	7223      	strb	r3, [r4, #8]
   d9b20:	2303      	movs	r3, #3
   d9b22:	60e3      	str	r3, [r4, #12]
   d9b24:	2302      	movs	r3, #2
   d9b26:	6123      	str	r3, [r4, #16]
   d9b28:	f8c4 9014 	str.w	r9, [r4, #20]
   d9b2c:	e00b      	b.n	d9b46 <_tzset_unlocked_r+0x24e>
   d9b2e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d9b32:	230b      	movs	r3, #11
   d9b34:	62a3      	str	r3, [r4, #40]	; 0x28
   d9b36:	2301      	movs	r3, #1
   d9b38:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9b3a:	2300      	movs	r3, #0
   d9b3c:	6323      	str	r3, [r4, #48]	; 0x30
   d9b3e:	e002      	b.n	d9b46 <_tzset_unlocked_r+0x24e>
   d9b40:	b280      	uxth	r0, r0
   d9b42:	723b      	strb	r3, [r7, #8]
   d9b44:	6178      	str	r0, [r7, #20]
   d9b46:	2302      	movs	r3, #2
   d9b48:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9b4c:	2300      	movs	r3, #0
   d9b4e:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9b52:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9b56:	930a      	str	r3, [sp, #40]	; 0x28
   d9b58:	f898 3000 	ldrb.w	r3, [r8]
   d9b5c:	2b2f      	cmp	r3, #47	; 0x2f
   d9b5e:	d10b      	bne.n	d9b78 <_tzset_unlocked_r+0x280>
   d9b60:	9603      	str	r6, [sp, #12]
   d9b62:	f8cd a008 	str.w	sl, [sp, #8]
   d9b66:	9601      	str	r6, [sp, #4]
   d9b68:	f8cd b000 	str.w	fp, [sp]
   d9b6c:	4633      	mov	r3, r6
   d9b6e:	aa07      	add	r2, sp, #28
   d9b70:	491f      	ldr	r1, [pc, #124]	; (d9bf0 <_tzset_unlocked_r+0x2f8>)
   d9b72:	4640      	mov	r0, r8
   d9b74:	f7fb fee6 	bl	d5944 <siscanf>
   d9b78:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9b7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9b80:	213c      	movs	r1, #60	; 0x3c
   d9b82:	fb01 3302 	mla	r3, r1, r2, r3
   d9b86:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9b8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9b8e:	fb01 3302 	mla	r3, r1, r2, r3
   d9b92:	61bb      	str	r3, [r7, #24]
   d9b94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d9b96:	f109 0901 	add.w	r9, r9, #1
   d9b9a:	f1b9 0f02 	cmp.w	r9, #2
   d9b9e:	4445      	add	r5, r8
   d9ba0:	f107 071c 	add.w	r7, r7, #28
   d9ba4:	f47f af74 	bne.w	d9a90 <_tzset_unlocked_r+0x198>
   d9ba8:	6860      	ldr	r0, [r4, #4]
   d9baa:	f7ff fdf5 	bl	d9798 <__tzcalc_limits>
   d9bae:	4b08      	ldr	r3, [pc, #32]	; (d9bd0 <_tzset_unlocked_r+0x2d8>)
   d9bb0:	6a22      	ldr	r2, [r4, #32]
   d9bb2:	601a      	str	r2, [r3, #0]
   d9bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9bb6:	1a9b      	subs	r3, r3, r2
   d9bb8:	4a07      	ldr	r2, [pc, #28]	; (d9bd8 <_tzset_unlocked_r+0x2e0>)
   d9bba:	bf18      	it	ne
   d9bbc:	2301      	movne	r3, #1
   d9bbe:	6013      	str	r3, [r2, #0]
   d9bc0:	b00d      	add	sp, #52	; 0x34
   d9bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9bc6:	bf00      	nop
   d9bc8:	000da864 	.word	0x000da864
   d9bcc:	2003e7e0 	.word	0x2003e7e0
   d9bd0:	2003e7e8 	.word	0x2003e7e8
   d9bd4:	000da867 	.word	0x000da867
   d9bd8:	2003e7e4 	.word	0x2003e7e4
   d9bdc:	2003dd0c 	.word	0x2003dd0c
   d9be0:	2003e7d3 	.word	0x2003e7d3
   d9be4:	000da86b 	.word	0x000da86b
   d9be8:	000da88e 	.word	0x000da88e
   d9bec:	000da87a 	.word	0x000da87a
   d9bf0:	000da88d 	.word	0x000da88d
   d9bf4:	2003e7c8 	.word	0x2003e7c8

000d9bf8 <abs>:
   d9bf8:	2800      	cmp	r0, #0
   d9bfa:	bfb8      	it	lt
   d9bfc:	4240      	neglt	r0, r0
   d9bfe:	4770      	bx	lr

000d9c00 <_findenv_r>:
   d9c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c04:	4607      	mov	r7, r0
   d9c06:	468b      	mov	fp, r1
   d9c08:	4690      	mov	r8, r2
   d9c0a:	f000 f8dd 	bl	d9dc8 <__env_lock>
   d9c0e:	4b19      	ldr	r3, [pc, #100]	; (d9c74 <_findenv_r+0x74>)
   d9c10:	681d      	ldr	r5, [r3, #0]
   d9c12:	469a      	mov	sl, r3
   d9c14:	b13d      	cbz	r5, d9c26 <_findenv_r+0x26>
   d9c16:	465c      	mov	r4, fp
   d9c18:	4623      	mov	r3, r4
   d9c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9c1e:	b142      	cbz	r2, d9c32 <_findenv_r+0x32>
   d9c20:	2a3d      	cmp	r2, #61	; 0x3d
   d9c22:	461c      	mov	r4, r3
   d9c24:	d1f8      	bne.n	d9c18 <_findenv_r+0x18>
   d9c26:	4638      	mov	r0, r7
   d9c28:	f000 f8cf 	bl	d9dca <__env_unlock>
   d9c2c:	2000      	movs	r0, #0
   d9c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c32:	ebcb 0404 	rsb	r4, fp, r4
   d9c36:	46a9      	mov	r9, r5
   d9c38:	f859 0b04 	ldr.w	r0, [r9], #4
   d9c3c:	2800      	cmp	r0, #0
   d9c3e:	d0f2      	beq.n	d9c26 <_findenv_r+0x26>
   d9c40:	4622      	mov	r2, r4
   d9c42:	4659      	mov	r1, fp
   d9c44:	f7ff fc3e 	bl	d94c4 <strncmp>
   d9c48:	b988      	cbnz	r0, d9c6e <_findenv_r+0x6e>
   d9c4a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d9c4e:	191e      	adds	r6, r3, r4
   d9c50:	5d1b      	ldrb	r3, [r3, r4]
   d9c52:	2b3d      	cmp	r3, #61	; 0x3d
   d9c54:	d10b      	bne.n	d9c6e <_findenv_r+0x6e>
   d9c56:	f8da 3000 	ldr.w	r3, [sl]
   d9c5a:	1aed      	subs	r5, r5, r3
   d9c5c:	10ad      	asrs	r5, r5, #2
   d9c5e:	4638      	mov	r0, r7
   d9c60:	f8c8 5000 	str.w	r5, [r8]
   d9c64:	f000 f8b1 	bl	d9dca <__env_unlock>
   d9c68:	1c70      	adds	r0, r6, #1
   d9c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c6e:	464d      	mov	r5, r9
   d9c70:	e7e1      	b.n	d9c36 <_findenv_r+0x36>
   d9c72:	bf00      	nop
   d9c74:	2003dd54 	.word	0x2003dd54

000d9c78 <_getenv_r>:
   d9c78:	b507      	push	{r0, r1, r2, lr}
   d9c7a:	aa01      	add	r2, sp, #4
   d9c7c:	f7ff ffc0 	bl	d9c00 <_findenv_r>
   d9c80:	b003      	add	sp, #12
   d9c82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9c88 <__gettzinfo>:
   d9c88:	4800      	ldr	r0, [pc, #0]	; (d9c8c <__gettzinfo+0x4>)
   d9c8a:	4770      	bx	lr
   d9c8c:	2003dd14 	.word	0x2003dd14

000d9c90 <gmtime_r>:
   d9c90:	6802      	ldr	r2, [r0, #0]
   d9c92:	4b47      	ldr	r3, [pc, #284]	; (d9db0 <gmtime_r+0x120>)
   d9c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9c96:	fb92 f4f3 	sdiv	r4, r2, r3
   d9c9a:	fb03 2214 	mls	r2, r3, r4, r2
   d9c9e:	2a00      	cmp	r2, #0
   d9ca0:	bfbc      	itt	lt
   d9ca2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9ca6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9caa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9cae:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9cb2:	fb92 f3f0 	sdiv	r3, r2, r0
   d9cb6:	fb00 2213 	mls	r2, r0, r3, r2
   d9cba:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9cbe:	bfac      	ite	ge
   d9cc0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9cc4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9cc8:	608b      	str	r3, [r1, #8]
   d9cca:	fb92 f3f0 	sdiv	r3, r2, r0
   d9cce:	fb00 2213 	mls	r2, r0, r3, r2
   d9cd2:	604b      	str	r3, [r1, #4]
   d9cd4:	600a      	str	r2, [r1, #0]
   d9cd6:	2307      	movs	r3, #7
   d9cd8:	1ce2      	adds	r2, r4, #3
   d9cda:	fb92 f3f3 	sdiv	r3, r2, r3
   d9cde:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9ce2:	1ad3      	subs	r3, r2, r3
   d9ce4:	618b      	str	r3, [r1, #24]
   d9ce6:	4b33      	ldr	r3, [pc, #204]	; (d9db4 <gmtime_r+0x124>)
   d9ce8:	4d33      	ldr	r5, [pc, #204]	; (d9db8 <gmtime_r+0x128>)
   d9cea:	fb94 f5f5 	sdiv	r5, r4, r5
   d9cee:	fb03 4405 	mla	r4, r3, r5, r4
   d9cf2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9cf6:	fbb4 f2f2 	udiv	r2, r4, r2
   d9cfa:	4422      	add	r2, r4
   d9cfc:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9d00:	fbb4 f3f7 	udiv	r3, r4, r7
   d9d04:	1ad2      	subs	r2, r2, r3
   d9d06:	482d      	ldr	r0, [pc, #180]	; (d9dbc <gmtime_r+0x12c>)
   d9d08:	fbb4 f0f0 	udiv	r0, r4, r0
   d9d0c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9d10:	1a13      	subs	r3, r2, r0
   d9d12:	fbb3 f6f6 	udiv	r6, r3, r6
   d9d16:	4434      	add	r4, r6
   d9d18:	f240 126d 	movw	r2, #365	; 0x16d
   d9d1c:	fbb3 f0f2 	udiv	r0, r3, r2
   d9d20:	fbb3 f3f7 	udiv	r3, r3, r7
   d9d24:	1ae3      	subs	r3, r4, r3
   d9d26:	fb02 3310 	mls	r3, r2, r0, r3
   d9d2a:	2499      	movs	r4, #153	; 0x99
   d9d2c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9d30:	3202      	adds	r2, #2
   d9d32:	fbb2 f2f4 	udiv	r2, r2, r4
   d9d36:	2a0a      	cmp	r2, #10
   d9d38:	fb04 f402 	mul.w	r4, r4, r2
   d9d3c:	f104 0602 	add.w	r6, r4, #2
   d9d40:	f04f 0405 	mov.w	r4, #5
   d9d44:	fbb6 f4f4 	udiv	r4, r6, r4
   d9d48:	bf34      	ite	cc
   d9d4a:	2602      	movcc	r6, #2
   d9d4c:	f06f 0609 	mvncs.w	r6, #9
   d9d50:	4416      	add	r6, r2
   d9d52:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9d56:	fb02 0505 	mla	r5, r2, r5, r0
   d9d5a:	1c5f      	adds	r7, r3, #1
   d9d5c:	2e01      	cmp	r6, #1
   d9d5e:	bf98      	it	ls
   d9d60:	3501      	addls	r5, #1
   d9d62:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9d66:	eba7 0704 	sub.w	r7, r7, r4
   d9d6a:	d302      	bcc.n	d9d72 <gmtime_r+0xe2>
   d9d6c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9d70:	e014      	b.n	d9d9c <gmtime_r+0x10c>
   d9d72:	0782      	lsls	r2, r0, #30
   d9d74:	d105      	bne.n	d9d82 <gmtime_r+0xf2>
   d9d76:	2464      	movs	r4, #100	; 0x64
   d9d78:	fbb0 f2f4 	udiv	r2, r0, r4
   d9d7c:	fb04 0212 	mls	r2, r4, r2, r0
   d9d80:	b94a      	cbnz	r2, d9d96 <gmtime_r+0x106>
   d9d82:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9d86:	fbb0 f4f2 	udiv	r4, r0, r2
   d9d8a:	fb02 0014 	mls	r0, r2, r4, r0
   d9d8e:	fab0 f280 	clz	r2, r0
   d9d92:	0952      	lsrs	r2, r2, #5
   d9d94:	e000      	b.n	d9d98 <gmtime_r+0x108>
   d9d96:	2201      	movs	r2, #1
   d9d98:	333b      	adds	r3, #59	; 0x3b
   d9d9a:	441a      	add	r2, r3
   d9d9c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9da0:	2300      	movs	r3, #0
   d9da2:	61ca      	str	r2, [r1, #28]
   d9da4:	614d      	str	r5, [r1, #20]
   d9da6:	610e      	str	r6, [r1, #16]
   d9da8:	60cf      	str	r7, [r1, #12]
   d9daa:	620b      	str	r3, [r1, #32]
   d9dac:	4608      	mov	r0, r1
   d9dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9db0:	00015180 	.word	0x00015180
   d9db4:	fffdc54f 	.word	0xfffdc54f
   d9db8:	00023ab1 	.word	0x00023ab1
   d9dbc:	00023ab0 	.word	0x00023ab0

000d9dc0 <labs>:
   d9dc0:	2800      	cmp	r0, #0
   d9dc2:	bfb8      	it	lt
   d9dc4:	4240      	neglt	r0, r0
   d9dc6:	4770      	bx	lr

000d9dc8 <__env_lock>:
   d9dc8:	4770      	bx	lr

000d9dca <__env_unlock>:
   d9dca:	4770      	bx	lr

000d9dcc <dynalib_user>:
   d9dcc:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9ddc:	0000 0000 003b 4547 0054 6641 6574 2072     ....;.GET.After 
   d9dec:	6573 646e 5448 5054 6552 7571 7365 2874     sendHTTPRequest(
   d9dfc:	2029 7468 7074 672e 7465 2928 4f00 004b     ) http.get().OK.
   d9e0c:	6964 6373 6e6f 656e 7463 6f43 6e6e 6365     disconnectConnec
   d9e1c:	6974 6e6f 2928 203a 6562 6f66 6572 4320     tion(): before C
   d9e2c:	6c65 756c 616c 2e72 666f 2866 0029 6964     ellular.off().di
   d9e3c:	6373 6e6f 656e 7463 6f43 6e6e 6365 6974     sconnectConnecti
   d9e4c:	6e6f 2928 203a 6661 6574 2072 6543 6c6c     on(): after Cell
   d9e5c:	6c75 7261 6f2e 6666 2928 7300 0069 696c     ular.off().si.li
   d9e6c:	7300 006d 7570 6600 0064 6f74 6400 0062     .sm.pu.fd.to.db.
   d9e7c:	6e55 6e6b 776f 206e 6170 6172 656d 6574     Unknown paramete
   d9e8c:	2d72 0020 6150 7372 6e69 2067 6552 7073     r- .Parsing Resp
   d9e9c:	6e6f 6573 003a 0022 002e 522c 7065 796c     onse:."...,Reply
   d9eac:	2c00 696c 003a 732c 3a69 2c00 6d73 003a     .,li:.,si:.,sm:.
   d9ebc:	742c 3a6f 2c00 7570 003a 662c 3a64 2c00     ,to:.,pu:.,fd:.,
   d9ecc:	6972 003a 422c 7461 003a 6641 6574 2072     ri:.,Bat:.After 
   d9edc:	6573 646e 7220 7365 6f70 736e 0065 532c     send response.,S
   d9eec:	6174 7574 0073 762c 7265 003a 522c 5353     tatus.,ver:.,RSS
   d9efc:	3a49 7700 2e73 7375 7563 6562 2e64 6f63     I:.ws.uscubed.co
   d9f0c:	006d 502f 7261 6974 6c63 4465 7269 6365     m./ParticleDirec
   d9f1c:	2e74 7361 7870 4300 6e6f 6574 746e 542d     t.aspx.Content-T
   d9f2c:	7079 0065 7061 6c70 6369 7461 6f69 2f6e     ype.application/
   d9f3c:	736a 6e6f 4100 7475 6f68 6972 617a 6974     json.Authorizati
   d9f4c:	6e6f 5400 6b6f 6e65 7920 4e57 5a6a 4e58     on.Token yWNjZXN
   d9f5c:	4d7a 4100 6363 7065 0074 2f2a 002a 4820     zM.Accept.*/*. H
   d9f6c:	5454 2f50 2e31 0d30 000a 6c63 736f 0065     TTP/1.0...close.
   d9f7c:	6f43 6e6e 6365 6974 6e6f 4800 534f 0054     Connection.HOST.
   d9f8c:	6f43 746e 6e65 2d74 654c 676e 6874 5000     Content-Length.P
   d9f9c:	534f 0054 5925 252d 2d6d 6425 2520 3a48     OST.%Y-%m-%d %H:
   d9fac:	4d25 253a 2c53 2d00 2d2d 2d2d 2d2d 2d2d     %M:%S,.---------
   d9fbc:	2d2d 2d2d 7250 676f 6172 206d 6f62 746f     ----Program boot
   d9fcc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d9fdc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d9fec:	2d2d 2d2d 5300 6174 7472 6e69 0067 2a2a     ----.Starting.**
   d9ffc:	2a2a 2a2a 2a2a 2a2a 2a2a 422a 6765 6e69     ***********Begin
   da00c:	6c20 6f6f 2870 2a29 2a2a 2a2a 2a2a 2a2a      loop()*********
   da01c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   da02c:	2a2a 2a2a 2a2a 2a2a 002a 312c 3430 2c33     *********.,1043,
   da03c:	4700 6f6f 2064 694e 6867 2174 6200 6665     .Good Night!.bef
   da04c:	726f 2065 6964 6373 6e6f 656e 7463 6f43     ore disconnectCo
   da05c:	6e6e 6365 6974 6e6f 2928 6100 7466 7265     nnection().after
   da06c:	6420 7369 6f63 6e6e 6365 4374 6e6f 656e      disconnectConne
   da07c:	7463 6f69 286e 0029 7254 7069 4320 756f     ction().Trip Cou
   da08c:	746e 003a 2e31 2e31 0033 0000               nt:.1.1.3...

000da098 <_ZTVN5spark13EthernetClassE>:
	...
   da0a0:	59f3 000d 59e9 000d 59df 000d 59d5 000d     .Y...Y...Y...Y..
   da0b0:	59c9 000d 59bd 000d 59b1 000d 59a9 000d     .Y...Y...Y...Y..
   da0c0:	599f 000d 5995 000d 7517 000d 6162 6475     .Y...Y...u..baud
   da0d0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   da0e0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   da0f0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   da100:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   da110:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   da120:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   da130:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   da140:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   da150:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   da160:	6925 6400 7465 6961 736c 3d20 0020 0066     %i.details = .f.
   da170:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   da180:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   da190:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   da1a0:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   da1b0:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   da1c0:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000da1d0 <_ZTV14CellularSignal>:
	...
   da1d8:	651d 000d 657d 000d 651f 000d 65c1 000d     .e..}e...e...e..
   da1e8:	6525 000d 658d 000d 6551 000d 664b 000d     %e...e..Qe..Kf..
   da1f8:	fffc ffff 0000 0000 6675 000d               ........uf..

000da204 <_ZTV9IPAddress>:
	...
   da20c:	687d 000d 686d 000d 686f 000d               }h..mh..oh..

000da218 <_ZTV9USBSerial>:
	...
   da220:	6981 000d 69d1 000d 69df 000d 6219 000d     .i...i...i...b..
   da230:	69bd 000d 6983 000d 6999 000d 69cb 000d     .i...i...i...i..
   da240:	69af 000d 697d 000d                         .i..}i..

000da248 <_ZTVN5spark13CellularClassE>:
	...
   da250:	6ad9 000d 6acf 000d 6ac5 000d 40f1 000d     .j...j...j...@..
   da260:	6ab9 000d 6aad 000d 6aa1 000d 6a99 000d     .j...j...j...j..
   da270:	6a8f 000d 6a85 000d 7517 000d               .j...j...u..

000da27c <_ZTV11USARTSerial>:
	...
   da284:	6b89 000d 6bd9 000d 6be7 000d 6219 000d     .k...k...k...b..
   da294:	6b9d 000d 6bbf 000d 6bab 000d 6bd3 000d     .k...k...k...k..
   da2a4:	6b8b 000d 6b8f 000d                         .k...k..

000da2ac <_ZTV7TwoWire>:
	...
   da2b4:	6c8d 000d 6cd7 000d 6caf 000d 6c8f 000d     .l...l...l...l..
   da2c4:	6cb7 000d 6cbf 000d 6cc7 000d 6ccf 000d     .l...l...l...l..

000da2d4 <_ZTVN5spark9MeshClassE>:
	...
   da2dc:	6e05 000d 6dfb 000d 6df1 000d 6de7 000d     .n...m...m...m..
   da2ec:	6ddb 000d 6dcf 000d 6dc3 000d 6dbb 000d     .m...m...m...m..
   da2fc:	6db1 000d 6da7 000d 7517 000d               .m...m...u..

000da308 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da310:	6fa9 000d 6faf 000d 7497 000d 6fbd 000d     .o...o...t...o..
   da320:	6fab 000d                                   .o..

000da324 <_ZTV9TCPClient>:
	...
   da32c:	40fd 000d 413d 000d 6f21 000d 6f3b 000d     .@..=A..!o..;o..
   da33c:	733d 000d 708f 000d 7061 000d 6f65 000d     =s...p..ap..eo..
   da34c:	7219 000d 7115 000d 70c3 000d 730d 000d     .r...q...p...s..
   da35c:	6f67 000d 6f9f 000d 6f4d 000d 6fc1 000d     go...o..Mo...o..
   da36c:	7041 000d 6977 6972 676e 7200 6365 2076     Ap..wiring.recv 
   da37c:	7265 6f72 2072 203d 6425 0000               error = %d..

000da388 <_ZTVN5spark12NetworkClassE>:
	...
   da390:	74af 000d 74b9 000d 74c3 000d 74cd 000d     .t...t...t...t..
   da3a0:	74d7 000d 74e3 000d 74ef 000d 74fb 000d     .t...t...t...t..
   da3b0:	7503 000d 750d 000d 7517 000d               .u...u...u..

000da3bc <_ZSt7nothrow>:
	...

000da3bd <day_name.4725>:
   da3bd:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   da3cd:	6972 6153 4a74                                   riSat

000da3d2 <mon_name.4726>:
   da3d2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   da3e2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   da3f2:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   da402:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   da412:	6425 000a                                   %d..

000da416 <_ctype_>:
   da416:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da426:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da436:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da446:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da456:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da466:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da476:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da486:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da496:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da518 <__sf_fake_stdin>:
	...

000da538 <__sf_fake_stdout>:
	...

000da558 <__sf_fake_stderr>:
	...
   da578:	0043 0000                                   C...

000da57c <__month_lengths>:
   da57c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da58c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da59c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da5ac:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da5bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da5cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da5dc:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   da5ec:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   da5fc:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   da60c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   da61c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   da62c:	6c33 2564 322e 646c 4c00 5f43 4954 454d     3ld%.2ld.LC_TIME
   da63c:	4a00 6e61 4600 6265 4d00 7261 4100 7270     .Jan.Feb.Mar.Apr
   da64c:	4d00 7961 4a00 6e75 4a00 6c75 4100 6775     .May.Jun.Jul.Aug
   da65c:	5300 7065 4f00 7463 4e00 766f 4400 6365     .Sep.Oct.Nov.Dec
   da66c:	4a00 6e61 6175 7972 4600 6265 7572 7261     .January.Februar
   da67c:	0079 614d 6372 0068 7041 6972 006c 754a     y.March.April.Ju
   da68c:	656e 4a00 6c75 0079 7541 7567 7473 5300     ne.July.August.S
   da69c:	7065 6574 626d 7265 4f00 7463 626f 7265     eptember.October
   da6ac:	4e00 766f 6d65 6562 0072 6544 6563 626d     .November.Decemb
   da6bc:	7265 5300 6e75 4d00 6e6f 5400 6575 5700     er.Sun.Mon.Tue.W
   da6cc:	6465 5400 7568 4600 6972 5300 7461 5300     ed.Thu.Fri.Sat.S
   da6dc:	6e75 6164 0079 6f4d 646e 7961 5400 6575     unday.Monday.Tue
   da6ec:	6473 7961 5700 6465 656e 6473 7961 5400     sday.Wednesday.T
   da6fc:	7568 7372 6164 0079 7246 6469 7961 5300     hursday.Friday.S
   da70c:	7461 7275 6164 0079 4825 253a 3a4d 5325     aturday.%H:%M:%S
   da71c:	2500 2f6d 6425 252f 0079 6125 2520 2062     .%m/%d/%y.%a %b 
   da72c:	6525 2520 3a48 4d25 253a 2053 5925 4100     %e %H:%M:%S %Y.A
   da73c:	004d 4d50 2500 2061 6225 2520 2065 4825     M.PM.%a %b %e %H
   da74c:	253a 3a4d 5325 2520 205a 5925 2500 3a49     :%M:%S %Z %Y.%I:
   da75c:	4d25 253a 2053 7025 0000 0000               %M:%S %p....

000da768 <_C_time_locale>:
   da768:	a63d 000d a641 000d a645 000d a649 000d     =...A...E...I...
   da778:	a64d 000d a651 000d a655 000d a659 000d     M...Q...U...Y...
   da788:	a65d 000d a661 000d a665 000d a669 000d     ]...a...e...i...
   da798:	a66d 000d a675 000d a67e 000d a684 000d     m...u...~.......
   da7a8:	a64d 000d a68a 000d a68f 000d a694 000d     M...............
   da7b8:	a69b 000d a6a5 000d a6ad 000d a6b6 000d     ................
   da7c8:	a6bf 000d a6c3 000d a6c7 000d a6cb 000d     ................
   da7d8:	a6cf 000d a6d3 000d a6d7 000d a6db 000d     ................
   da7e8:	a6e2 000d a6e9 000d a6f1 000d a6fb 000d     ................
   da7f8:	a704 000d a70b 000d a714 000d a71d 000d     ................
   da808:	a726 000d a73b 000d a73e 000d a741 000d     &...;...>...A...
   da818:	a66d 000d a675 000d a67e 000d a684 000d     m...u...~.......
   da828:	a64d 000d a68a 000d a68f 000d a694 000d     M...............
   da838:	a69b 000d a6a5 000d a6ad 000d a6b6 000d     ................
   da848:	a0ec 000d a759 000d 9f75 000d 9f75 000d     ....Y...u...u...
   da858:	9f75 000d 9f75 000d 9f75 000d 5a54 4700     u...u...u...TZ.G
   da868:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   da878:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   da888:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   da898:	3a6e 6825 2575 006e                         n:%hu%n.

000da8a0 <link_const_variable_data_end>:
   da8a0:	000d4b1d 	.word	0x000d4b1d
   da8a4:	000d4c4d 	.word	0x000d4c4d
   da8a8:	000d530d 	.word	0x000d530d
   da8ac:	000d59fd 	.word	0x000d59fd
   da8b0:	000d5b69 	.word	0x000d5b69
   da8b4:	000d61f1 	.word	0x000d61f1
   da8b8:	000d62e1 	.word	0x000d62e1
   da8bc:	000d64c9 	.word	0x000d64c9
   da8c0:	000d6501 	.word	0x000d6501
   da8c4:	000d6b59 	.word	0x000d6b59
   da8c8:	000d6ed1 	.word	0x000d6ed1
   da8cc:	000d75e5 	.word	0x000d75e5
   da8d0:	000d782d 	.word	0x000d782d
   da8d4:	000d78b1 	.word	0x000d78b1
   da8d8:	000d7975 	.word	0x000d7975
   da8dc:	000d7a39 	.word	0x000d7a39
